
Ass3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000292e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000292e  000029c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800072  00800072  000029d4  2**0
                  ALLOC
  3 .stab         00001fb0  00000000  00000000  000029d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f30  00000000  00000000  00004984  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000058b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a0ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a93c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 13 	call	0x277a	; 0x277a <main>
      8a:	0c 94 95 14 	jmp	0x292a	; 0x292a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <BUTTON_voidButtonConfig>:

void (*BUTTON_FuncList[3])(struct CalculatorData*) = {Calculator_voidCycleUpCallback,Calculator_voidCycledownCallback,Calculator_voidConfirmCallback};


void BUTTON_voidButtonConfig(struct BUTTON_OBJ* pButtons)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <BUTTON_voidButtonConfig+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_INPUT);
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	65 e0       	ldi	r22, 0x05	; 5
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_PIN_INPUT);
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	66 e0       	ldi	r22, 0x06	; 6
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_PIN_INPUT);
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	67 e0       	ldi	r22, 0x07	; 7
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_HIGH);
     ccc:	83 e0       	ldi	r24, 0x03	; 3
     cce:	65 e0       	ldi	r22, 0x05	; 5
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	66 e0       	ldi	r22, 0x06	; 6
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	67 e0       	ldi	r22, 0x07	; 7
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>

	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
     cea:	19 82       	std	Y+1, r1	; 0x01
     cec:	1b c0       	rjmp	.+54     	; 0xd24 <BUTTON_voidButtonConfig+0x86>
	{
		pButtons[Local_u8ButtonItterator].val = 0;
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	9c 01       	movw	r18, r24
     cf6:	22 0f       	add	r18, r18
     cf8:	33 1f       	adc	r19, r19
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	9b 81       	ldd	r25, Y+3	; 0x03
     cfe:	fc 01       	movw	r30, r24
     d00:	e2 0f       	add	r30, r18
     d02:	f3 1f       	adc	r31, r19
     d04:	10 82       	st	Z, r1
		pButtons[Local_u8ButtonItterator].oldVal = 0;
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9c 01       	movw	r18, r24
     d0e:	22 0f       	add	r18, r18
     d10:	33 1f       	adc	r19, r19
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	9b 81       	ldd	r25, Y+3	; 0x03
     d16:	fc 01       	movw	r30, r24
     d18:	e2 0f       	add	r30, r18
     d1a:	f3 1f       	adc	r31, r19
     d1c:	11 82       	std	Z+1, r1	; 0x01

	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_HIGH);
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);

	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	83 30       	cpi	r24, 0x03	; 3
     d28:	10 f3       	brcs	.-60     	; 0xcee <BUTTON_voidButtonConfig+0x50>
	{
		pButtons[Local_u8ButtonItterator].val = 0;
		pButtons[Local_u8ButtonItterator].oldVal = 0;
	}

}
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <BUTTON_voidPolling>:

void BUTTON_voidPolling(struct BUTTON_OBJ* pButtons)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <BUTTON_voidPolling+0x6>
     d3c:	0f 92       	push	r0
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	9b 83       	std	Y+3, r25	; 0x03
     d44:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		//scan over all buttons
		BUTTON_voidButtonSampler(pButtons);
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	0e 94 f2 06 	call	0xde4	; 0xde4 <BUTTON_voidButtonSampler>
     d4e:	45 c0       	rjmp	.+138    	; 0xdda <BUTTON_voidPolling+0xa4>

		//see if any changes happened and take action for them
		for(u8 Local_u8ButtonItterator;Local_u8ButtonItterator <3;Local_u8ButtonItterator++)
		{
			if(pButtons[Local_u8ButtonItterator].val != pButtons[Local_u8ButtonItterator].oldVal)
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 01       	movw	r18, r24
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	fc 01       	movw	r30, r24
     d62:	e2 0f       	add	r30, r18
     d64:	f3 1f       	adc	r31, r19
     d66:	40 81       	ld	r20, Z
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9c 01       	movw	r18, r24
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	fc 01       	movw	r30, r24
     d7a:	e2 0f       	add	r30, r18
     d7c:	f3 1f       	adc	r31, r19
     d7e:	81 81       	ldd	r24, Z+1	; 0x01
     d80:	48 17       	cp	r20, r24
     d82:	41 f1       	breq	.+80     	; 0xdd4 <BUTTON_voidPolling+0x9e>
			{
				//change took place
				if( pButtons[Local_u8ButtonItterator].val > pButtons[Local_u8ButtonItterator].oldVal)
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	88 2f       	mov	r24, r24
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9c 01       	movw	r18, r24
     d8c:	22 0f       	add	r18, r18
     d8e:	33 1f       	adc	r19, r19
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	9b 81       	ldd	r25, Y+3	; 0x03
     d94:	fc 01       	movw	r30, r24
     d96:	e2 0f       	add	r30, r18
     d98:	f3 1f       	adc	r31, r19
     d9a:	40 81       	ld	r20, Z
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	88 2f       	mov	r24, r24
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9c 01       	movw	r18, r24
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	fc 01       	movw	r30, r24
     dae:	e2 0f       	add	r30, r18
     db0:	f3 1f       	adc	r31, r19
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	84 17       	cp	r24, r20
     db6:	70 f4       	brcc	.+28     	; 0xdd4 <BUTTON_voidPolling+0x9e>
					//only take action on low to high change

					//debug
					//LCD_voidSendData('A');
					//OG code
					BUTTON_FuncList[Local_u8ButtonItterator](&calculatorData);
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	fc 01       	movw	r30, r24
     dc4:	e8 59       	subi	r30, 0x98	; 152
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	01 90       	ld	r0, Z+
     dca:	f0 81       	ld	r31, Z
     dcc:	e0 2d       	mov	r30, r0
     dce:	82 e7       	ldi	r24, 0x72	; 114
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	09 95       	icall
	{
		//scan over all buttons
		BUTTON_voidButtonSampler(pButtons);

		//see if any changes happened and take action for them
		for(u8 Local_u8ButtonItterator;Local_u8ButtonItterator <3;Local_u8ButtonItterator++)
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	8f 5f       	subi	r24, 0xFF	; 255
     dd8:	89 83       	std	Y+1, r24	; 0x01
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	08 f4       	brcc	.+2      	; 0xde2 <BUTTON_voidPolling+0xac>
     de0:	b7 cf       	rjmp	.-146    	; 0xd50 <BUTTON_voidPolling+0x1a>
     de2:	b1 cf       	rjmp	.-158    	; 0xd46 <BUTTON_voidPolling+0x10>

00000de4 <BUTTON_voidButtonSampler>:
}



void BUTTON_voidButtonSampler(struct BUTTON_OBJ* pButtons)
{
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	ee 97       	sbiw	r28, 0x3e	; 62
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	99 af       	std	Y+57, r25	; 0x39
     dfe:	88 af       	std	Y+56, r24	; 0x38
	//buttons are from PORTD pins 5,6,7

	//temp button array to save button vals
	u8 Local_u8arrTempBtns[3] = {0, 0 ,0};
     e00:	ce 01       	movw	r24, r28
     e02:	c5 96       	adiw	r24, 0x35	; 53
     e04:	9b af       	std	Y+59, r25	; 0x3b
     e06:	8a af       	std	Y+58, r24	; 0x3a
     e08:	ee e6       	ldi	r30, 0x6E	; 110
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	fd af       	std	Y+61, r31	; 0x3d
     e0e:	ec af       	std	Y+60, r30	; 0x3c
     e10:	f3 e0       	ldi	r31, 0x03	; 3
     e12:	fe af       	std	Y+62, r31	; 0x3e
     e14:	ec ad       	ldd	r30, Y+60	; 0x3c
     e16:	fd ad       	ldd	r31, Y+61	; 0x3d
     e18:	00 80       	ld	r0, Z
     e1a:	8c ad       	ldd	r24, Y+60	; 0x3c
     e1c:	9d ad       	ldd	r25, Y+61	; 0x3d
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	9d af       	std	Y+61, r25	; 0x3d
     e22:	8c af       	std	Y+60, r24	; 0x3c
     e24:	ea ad       	ldd	r30, Y+58	; 0x3a
     e26:	fb ad       	ldd	r31, Y+59	; 0x3b
     e28:	00 82       	st	Z, r0
     e2a:	8a ad       	ldd	r24, Y+58	; 0x3a
     e2c:	9b ad       	ldd	r25, Y+59	; 0x3b
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	9b af       	std	Y+59, r25	; 0x3b
     e32:	8a af       	std	Y+58, r24	; 0x3a
     e34:	9e ad       	ldd	r25, Y+62	; 0x3e
     e36:	91 50       	subi	r25, 0x01	; 1
     e38:	9e af       	std	Y+62, r25	; 0x3e
     e3a:	ee ad       	ldd	r30, Y+62	; 0x3e
     e3c:	ee 23       	and	r30, r30
     e3e:	51 f7       	brne	.-44     	; 0xe14 <BUTTON_voidButtonSampler+0x30>
//		{
//		Local_u8arrTempBtns[Local_u8ButtonItterator] = pButtons[Local_u8ButtonItterator].val;
//		}

	//save first sample as ref
	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
     e40:	1c aa       	std	Y+52, r1	; 0x34
     e42:	17 c0       	rjmp	.+46     	; 0xe72 <BUTTON_voidButtonSampler+0x8e>
		{
			Local_u8arrTempBtns[Local_u8ButtonItterator] = DIO_u8GetPinValue(DIO_PORTD,DIO_PIN5+Local_u8ButtonItterator) ^1;
     e44:	8c a9       	ldd	r24, Y+52	; 0x34
     e46:	08 2f       	mov	r16, r24
     e48:	10 e0       	ldi	r17, 0x00	; 0
     e4a:	8c a9       	ldd	r24, Y+52	; 0x34
     e4c:	98 2f       	mov	r25, r24
     e4e:	9b 5f       	subi	r25, 0xFB	; 251
     e50:	83 e0       	ldi	r24, 0x03	; 3
     e52:	69 2f       	mov	r22, r25
     e54:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_u8GetPinValue>
     e58:	98 2f       	mov	r25, r24
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	29 2f       	mov	r18, r25
     e5e:	28 27       	eor	r18, r24
     e60:	ce 01       	movw	r24, r28
     e62:	c5 96       	adiw	r24, 0x35	; 53
     e64:	fc 01       	movw	r30, r24
     e66:	e0 0f       	add	r30, r16
     e68:	f1 1f       	adc	r31, r17
     e6a:	20 83       	st	Z, r18
//		{
//		Local_u8arrTempBtns[Local_u8ButtonItterator] = pButtons[Local_u8ButtonItterator].val;
//		}

	//save first sample as ref
	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
     e6c:	8c a9       	ldd	r24, Y+52	; 0x34
     e6e:	8f 5f       	subi	r24, 0xFF	; 255
     e70:	8c ab       	std	Y+52, r24	; 0x34
     e72:	8c a9       	ldd	r24, Y+52	; 0x34
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	30 f3       	brcs	.-52     	; 0xe44 <BUTTON_voidButtonSampler+0x60>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a8 ec       	ldi	r26, 0xC8	; 200
     e7e:	b2 e4       	ldi	r27, 0x42	; 66
     e80:	8d a7       	std	Y+45, r24	; 0x2d
     e82:	9e a7       	std	Y+46, r25	; 0x2e
     e84:	af a7       	std	Y+47, r26	; 0x2f
     e86:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e88:	6d a5       	ldd	r22, Y+45	; 0x2d
     e8a:	7e a5       	ldd	r23, Y+46	; 0x2e
     e8c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e8e:	98 a9       	ldd	r25, Y+48	; 0x30
     e90:	2b ea       	ldi	r18, 0xAB	; 171
     e92:	3a ea       	ldi	r19, 0xAA	; 170
     e94:	4a e2       	ldi	r20, 0x2A	; 42
     e96:	50 e4       	ldi	r21, 0x40	; 64
     e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	89 a7       	std	Y+41, r24	; 0x29
     ea2:	9a a7       	std	Y+42, r25	; 0x2a
     ea4:	ab a7       	std	Y+43, r26	; 0x2b
     ea6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     ea8:	69 a5       	ldd	r22, Y+41	; 0x29
     eaa:	7a a5       	ldd	r23, Y+42	; 0x2a
     eac:	8b a5       	ldd	r24, Y+43	; 0x2b
     eae:	9c a5       	ldd	r25, Y+44	; 0x2c
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ebc:	88 23       	and	r24, r24
     ebe:	1c f4       	brge	.+6      	; 0xec6 <BUTTON_voidButtonSampler+0xe2>
		__ticks = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	88 a7       	std	Y+40, r24	; 0x28
     ec4:	91 c0       	rjmp	.+290    	; 0xfe8 <BUTTON_voidButtonSampler+0x204>
	else if (__tmp > 255)
     ec6:	69 a5       	ldd	r22, Y+41	; 0x29
     ec8:	7a a5       	ldd	r23, Y+42	; 0x2a
     eca:	8b a5       	ldd	r24, Y+43	; 0x2b
     ecc:	9c a5       	ldd	r25, Y+44	; 0x2c
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4f e7       	ldi	r20, 0x7F	; 127
     ed4:	53 e4       	ldi	r21, 0x43	; 67
     ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eda:	18 16       	cp	r1, r24
     edc:	0c f0       	brlt	.+2      	; 0xee0 <BUTTON_voidButtonSampler+0xfc>
     ede:	7b c0       	rjmp	.+246    	; 0xfd6 <BUTTON_voidButtonSampler+0x1f2>
	{
		_delay_ms(__us / 1000.0);
     ee0:	6d a5       	ldd	r22, Y+45	; 0x2d
     ee2:	7e a5       	ldd	r23, Y+46	; 0x2e
     ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ee6:	98 a9       	ldd	r25, Y+48	; 0x30
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	4a e7       	ldi	r20, 0x7A	; 122
     eee:	54 e4       	ldi	r21, 0x44	; 68
     ef0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	8c a3       	std	Y+36, r24	; 0x24
     efa:	9d a3       	std	Y+37, r25	; 0x25
     efc:	ae a3       	std	Y+38, r26	; 0x26
     efe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f00:	6c a1       	ldd	r22, Y+36	; 0x24
     f02:	7d a1       	ldd	r23, Y+37	; 0x25
     f04:	8e a1       	ldd	r24, Y+38	; 0x26
     f06:	9f a1       	ldd	r25, Y+39	; 0x27
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	4a ef       	ldi	r20, 0xFA	; 250
     f0e:	54 e4       	ldi	r21, 0x44	; 68
     f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	88 a3       	std	Y+32, r24	; 0x20
     f1a:	99 a3       	std	Y+33, r25	; 0x21
     f1c:	aa a3       	std	Y+34, r26	; 0x22
     f1e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f20:	68 a1       	ldd	r22, Y+32	; 0x20
     f22:	79 a1       	ldd	r23, Y+33	; 0x21
     f24:	8a a1       	ldd	r24, Y+34	; 0x22
     f26:	9b a1       	ldd	r25, Y+35	; 0x23
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e8       	ldi	r20, 0x80	; 128
     f2e:	5f e3       	ldi	r21, 0x3F	; 63
     f30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f34:	88 23       	and	r24, r24
     f36:	2c f4       	brge	.+10     	; 0xf42 <BUTTON_voidButtonSampler+0x15e>
		__ticks = 1;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	9f 8f       	std	Y+31, r25	; 0x1f
     f3e:	8e 8f       	std	Y+30, r24	; 0x1e
     f40:	3f c0       	rjmp	.+126    	; 0xfc0 <BUTTON_voidButtonSampler+0x1dc>
	else if (__tmp > 65535)
     f42:	68 a1       	ldd	r22, Y+32	; 0x20
     f44:	79 a1       	ldd	r23, Y+33	; 0x21
     f46:	8a a1       	ldd	r24, Y+34	; 0x22
     f48:	9b a1       	ldd	r25, Y+35	; 0x23
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	3f ef       	ldi	r19, 0xFF	; 255
     f4e:	4f e7       	ldi	r20, 0x7F	; 127
     f50:	57 e4       	ldi	r21, 0x47	; 71
     f52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f56:	18 16       	cp	r1, r24
     f58:	4c f5       	brge	.+82     	; 0xfac <BUTTON_voidButtonSampler+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5a:	6c a1       	ldd	r22, Y+36	; 0x24
     f5c:	7d a1       	ldd	r23, Y+37	; 0x25
     f5e:	8e a1       	ldd	r24, Y+38	; 0x26
     f60:	9f a1       	ldd	r25, Y+39	; 0x27
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e2       	ldi	r20, 0x20	; 32
     f68:	51 e4       	ldi	r21, 0x41	; 65
     f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	bc 01       	movw	r22, r24
     f74:	cd 01       	movw	r24, r26
     f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	9f 8f       	std	Y+31, r25	; 0x1f
     f80:	8e 8f       	std	Y+30, r24	; 0x1e
     f82:	0f c0       	rjmp	.+30     	; 0xfa2 <BUTTON_voidButtonSampler+0x1be>
     f84:	88 ec       	ldi	r24, 0xC8	; 200
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9d 8f       	std	Y+29, r25	; 0x1d
     f8a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f8e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	f1 f7       	brne	.-4      	; 0xf90 <BUTTON_voidButtonSampler+0x1ac>
     f94:	9d 8f       	std	Y+29, r25	; 0x1d
     f96:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	9f 8f       	std	Y+31, r25	; 0x1f
     fa0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	69 f7       	brne	.-38     	; 0xf84 <BUTTON_voidButtonSampler+0x1a0>
     faa:	24 c0       	rjmp	.+72     	; 0xff4 <BUTTON_voidButtonSampler+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fac:	68 a1       	ldd	r22, Y+32	; 0x20
     fae:	79 a1       	ldd	r23, Y+33	; 0x21
     fb0:	8a a1       	ldd	r24, Y+34	; 0x22
     fb2:	9b a1       	ldd	r25, Y+35	; 0x23
     fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb8:	dc 01       	movw	r26, r24
     fba:	cb 01       	movw	r24, r22
     fbc:	9f 8f       	std	Y+31, r25	; 0x1f
     fbe:	8e 8f       	std	Y+30, r24	; 0x1e
     fc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fc4:	9b 8f       	std	Y+27, r25	; 0x1b
     fc6:	8a 8f       	std	Y+26, r24	; 0x1a
     fc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fca:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <BUTTON_voidButtonSampler+0x1e8>
     fd0:	9b 8f       	std	Y+27, r25	; 0x1b
     fd2:	8a 8f       	std	Y+26, r24	; 0x1a
     fd4:	0f c0       	rjmp	.+30     	; 0xff4 <BUTTON_voidButtonSampler+0x210>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fd6:	69 a5       	ldd	r22, Y+41	; 0x29
     fd8:	7a a5       	ldd	r23, Y+42	; 0x2a
     fda:	8b a5       	ldd	r24, Y+43	; 0x2b
     fdc:	9c a5       	ldd	r25, Y+44	; 0x2c
     fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	88 a7       	std	Y+40, r24	; 0x28
     fe8:	88 a5       	ldd	r24, Y+40	; 0x28
     fea:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fec:	89 8d       	ldd	r24, Y+25	; 0x19
     fee:	8a 95       	dec	r24
     ff0:	f1 f7       	brne	.-4      	; 0xfee <BUTTON_voidButtonSampler+0x20a>
     ff2:	89 8f       	std	Y+25, r24	; 0x19

	//sleep for 100micro sec
	_delay_us(100);

	//cycle rate is 10ms each cycle we get 100sample, sampling rate is 1/(1/10000) = 10kHZ
	for(u8 Local_u8SampleItterator = 0; Local_u8SampleItterator<99; Local_u8SampleItterator++)
     ff4:	1b aa       	std	Y+51, r1	; 0x33
     ff6:	e5 c0       	rjmp	.+458    	; 0x11c2 <BUTTON_voidButtonSampler+0x3de>
	{
		//sample 100 times every 1/10000sec = 100micro sec
		for(u8 Local_u8ButtonItterator = 0; Local_u8ButtonItterator<3; Local_u8ButtonItterator++)
     ff8:	1a aa       	std	Y+50, r1	; 0x32
     ffa:	1f c0       	rjmp	.+62     	; 0x103a <BUTTON_voidButtonSampler+0x256>
		{
			if(Local_u8arrTempBtns[Local_u8ButtonItterator] != DIO_u8GetPinValue(DIO_PORTD,DIO_PIN5+Local_u8ButtonItterator) ^1 )
     ffc:	8a a9       	ldd	r24, Y+50	; 0x32
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	ce 01       	movw	r24, r28
    1004:	c5 96       	adiw	r24, 0x35	; 53
    1006:	fc 01       	movw	r30, r24
    1008:	e2 0f       	add	r30, r18
    100a:	f3 1f       	adc	r31, r19
    100c:	10 81       	ld	r17, Z
    100e:	8a a9       	ldd	r24, Y+50	; 0x32
    1010:	98 2f       	mov	r25, r24
    1012:	9b 5f       	subi	r25, 0xFB	; 251
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	69 2f       	mov	r22, r25
    1018:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_u8GetPinValue>
    101c:	18 17       	cp	r17, r24
    101e:	51 f4       	brne	.+20     	; 0x1034 <BUTTON_voidButtonSampler+0x250>
			{
				Local_u8arrTempBtns[Local_u8ButtonItterator] = -1;
    1020:	8a a9       	ldd	r24, Y+50	; 0x32
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	ce 01       	movw	r24, r28
    1028:	c5 96       	adiw	r24, 0x35	; 53
    102a:	fc 01       	movw	r30, r24
    102c:	e2 0f       	add	r30, r18
    102e:	f3 1f       	adc	r31, r19
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	80 83       	st	Z, r24

	//cycle rate is 10ms each cycle we get 100sample, sampling rate is 1/(1/10000) = 10kHZ
	for(u8 Local_u8SampleItterator = 0; Local_u8SampleItterator<99; Local_u8SampleItterator++)
	{
		//sample 100 times every 1/10000sec = 100micro sec
		for(u8 Local_u8ButtonItterator = 0; Local_u8ButtonItterator<3; Local_u8ButtonItterator++)
    1034:	8a a9       	ldd	r24, Y+50	; 0x32
    1036:	8f 5f       	subi	r24, 0xFF	; 255
    1038:	8a ab       	std	Y+50, r24	; 0x32
    103a:	8a a9       	ldd	r24, Y+50	; 0x32
    103c:	83 30       	cpi	r24, 0x03	; 3
    103e:	f0 f2       	brcs	.-68     	; 0xffc <BUTTON_voidButtonSampler+0x218>
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a8 ec       	ldi	r26, 0xC8	; 200
    1046:	b2 e4       	ldi	r27, 0x42	; 66
    1048:	8d 8b       	std	Y+21, r24	; 0x15
    104a:	9e 8b       	std	Y+22, r25	; 0x16
    104c:	af 8b       	std	Y+23, r26	; 0x17
    104e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1050:	6d 89       	ldd	r22, Y+21	; 0x15
    1052:	7e 89       	ldd	r23, Y+22	; 0x16
    1054:	8f 89       	ldd	r24, Y+23	; 0x17
    1056:	98 8d       	ldd	r25, Y+24	; 0x18
    1058:	2b ea       	ldi	r18, 0xAB	; 171
    105a:	3a ea       	ldi	r19, 0xAA	; 170
    105c:	4a e2       	ldi	r20, 0x2A	; 42
    105e:	50 e4       	ldi	r21, 0x40	; 64
    1060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	89 8b       	std	Y+17, r24	; 0x11
    106a:	9a 8b       	std	Y+18, r25	; 0x12
    106c:	ab 8b       	std	Y+19, r26	; 0x13
    106e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1070:	69 89       	ldd	r22, Y+17	; 0x11
    1072:	7a 89       	ldd	r23, Y+18	; 0x12
    1074:	8b 89       	ldd	r24, Y+19	; 0x13
    1076:	9c 89       	ldd	r25, Y+20	; 0x14
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e8       	ldi	r20, 0x80	; 128
    107e:	5f e3       	ldi	r21, 0x3F	; 63
    1080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1084:	88 23       	and	r24, r24
    1086:	1c f4       	brge	.+6      	; 0x108e <BUTTON_voidButtonSampler+0x2aa>
		__ticks = 1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	88 8b       	std	Y+16, r24	; 0x10
    108c:	91 c0       	rjmp	.+290    	; 0x11b0 <BUTTON_voidButtonSampler+0x3cc>
	else if (__tmp > 255)
    108e:	69 89       	ldd	r22, Y+17	; 0x11
    1090:	7a 89       	ldd	r23, Y+18	; 0x12
    1092:	8b 89       	ldd	r24, Y+19	; 0x13
    1094:	9c 89       	ldd	r25, Y+20	; 0x14
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	53 e4       	ldi	r21, 0x43	; 67
    109e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	0c f0       	brlt	.+2      	; 0x10a8 <BUTTON_voidButtonSampler+0x2c4>
    10a6:	7b c0       	rjmp	.+246    	; 0x119e <BUTTON_voidButtonSampler+0x3ba>
	{
		_delay_ms(__us / 1000.0);
    10a8:	6d 89       	ldd	r22, Y+21	; 0x15
    10aa:	7e 89       	ldd	r23, Y+22	; 0x16
    10ac:	8f 89       	ldd	r24, Y+23	; 0x17
    10ae:	98 8d       	ldd	r25, Y+24	; 0x18
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	4a e7       	ldi	r20, 0x7A	; 122
    10b6:	54 e4       	ldi	r21, 0x44	; 68
    10b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	8c 87       	std	Y+12, r24	; 0x0c
    10c2:	9d 87       	std	Y+13, r25	; 0x0d
    10c4:	ae 87       	std	Y+14, r26	; 0x0e
    10c6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    10ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    10cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    10ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	4a ef       	ldi	r20, 0xFA	; 250
    10d6:	54 e4       	ldi	r21, 0x44	; 68
    10d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	88 87       	std	Y+8, r24	; 0x08
    10e2:	99 87       	std	Y+9, r25	; 0x09
    10e4:	aa 87       	std	Y+10, r26	; 0x0a
    10e6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    10e8:	68 85       	ldd	r22, Y+8	; 0x08
    10ea:	79 85       	ldd	r23, Y+9	; 0x09
    10ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    10ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e8       	ldi	r20, 0x80	; 128
    10f6:	5f e3       	ldi	r21, 0x3F	; 63
    10f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10fc:	88 23       	and	r24, r24
    10fe:	2c f4       	brge	.+10     	; 0x110a <BUTTON_voidButtonSampler+0x326>
		__ticks = 1;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9f 83       	std	Y+7, r25	; 0x07
    1106:	8e 83       	std	Y+6, r24	; 0x06
    1108:	3f c0       	rjmp	.+126    	; 0x1188 <BUTTON_voidButtonSampler+0x3a4>
	else if (__tmp > 65535)
    110a:	68 85       	ldd	r22, Y+8	; 0x08
    110c:	79 85       	ldd	r23, Y+9	; 0x09
    110e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1110:	9b 85       	ldd	r25, Y+11	; 0x0b
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	3f ef       	ldi	r19, 0xFF	; 255
    1116:	4f e7       	ldi	r20, 0x7F	; 127
    1118:	57 e4       	ldi	r21, 0x47	; 71
    111a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    111e:	18 16       	cp	r1, r24
    1120:	4c f5       	brge	.+82     	; 0x1174 <BUTTON_voidButtonSampler+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1122:	6c 85       	ldd	r22, Y+12	; 0x0c
    1124:	7d 85       	ldd	r23, Y+13	; 0x0d
    1126:	8e 85       	ldd	r24, Y+14	; 0x0e
    1128:	9f 85       	ldd	r25, Y+15	; 0x0f
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e2       	ldi	r20, 0x20	; 32
    1130:	51 e4       	ldi	r21, 0x41	; 65
    1132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9f 83       	std	Y+7, r25	; 0x07
    1148:	8e 83       	std	Y+6, r24	; 0x06
    114a:	0f c0       	rjmp	.+30     	; 0x116a <BUTTON_voidButtonSampler+0x386>
    114c:	88 ec       	ldi	r24, 0xC8	; 200
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9d 83       	std	Y+5, r25	; 0x05
    1152:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <BUTTON_voidButtonSampler+0x374>
    115c:	9d 83       	std	Y+5, r25	; 0x05
    115e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1160:	8e 81       	ldd	r24, Y+6	; 0x06
    1162:	9f 81       	ldd	r25, Y+7	; 0x07
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	9f 83       	std	Y+7, r25	; 0x07
    1168:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116a:	8e 81       	ldd	r24, Y+6	; 0x06
    116c:	9f 81       	ldd	r25, Y+7	; 0x07
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	69 f7       	brne	.-38     	; 0x114c <BUTTON_voidButtonSampler+0x368>
    1172:	24 c0       	rjmp	.+72     	; 0x11bc <BUTTON_voidButtonSampler+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1174:	68 85       	ldd	r22, Y+8	; 0x08
    1176:	79 85       	ldd	r23, Y+9	; 0x09
    1178:	8a 85       	ldd	r24, Y+10	; 0x0a
    117a:	9b 85       	ldd	r25, Y+11	; 0x0b
    117c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	9f 83       	std	Y+7, r25	; 0x07
    1186:	8e 83       	std	Y+6, r24	; 0x06
    1188:	8e 81       	ldd	r24, Y+6	; 0x06
    118a:	9f 81       	ldd	r25, Y+7	; 0x07
    118c:	9b 83       	std	Y+3, r25	; 0x03
    118e:	8a 83       	std	Y+2, r24	; 0x02
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	9b 81       	ldd	r25, Y+3	; 0x03
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <BUTTON_voidButtonSampler+0x3b0>
    1198:	9b 83       	std	Y+3, r25	; 0x03
    119a:	8a 83       	std	Y+2, r24	; 0x02
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <BUTTON_voidButtonSampler+0x3d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    119e:	69 89       	ldd	r22, Y+17	; 0x11
    11a0:	7a 89       	ldd	r23, Y+18	; 0x12
    11a2:	8b 89       	ldd	r24, Y+19	; 0x13
    11a4:	9c 89       	ldd	r25, Y+20	; 0x14
    11a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	88 8b       	std	Y+16, r24	; 0x10
    11b0:	88 89       	ldd	r24, Y+16	; 0x10
    11b2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	8a 95       	dec	r24
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <BUTTON_voidButtonSampler+0x3d2>
    11ba:	89 83       	std	Y+1, r24	; 0x01

	//sleep for 100micro sec
	_delay_us(100);

	//cycle rate is 10ms each cycle we get 100sample, sampling rate is 1/(1/10000) = 10kHZ
	for(u8 Local_u8SampleItterator = 0; Local_u8SampleItterator<99; Local_u8SampleItterator++)
    11bc:	8b a9       	ldd	r24, Y+51	; 0x33
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	8b ab       	std	Y+51, r24	; 0x33
    11c2:	8b a9       	ldd	r24, Y+51	; 0x33
    11c4:	83 36       	cpi	r24, 0x63	; 99
    11c6:	08 f4       	brcc	.+2      	; 0x11ca <BUTTON_voidButtonSampler+0x3e6>
    11c8:	17 cf       	rjmp	.-466    	; 0xff8 <BUTTON_voidButtonSampler+0x214>

		//sleep for 100micro sec
		_delay_us(100);
	}

	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
    11ca:	19 aa       	std	Y+49, r1	; 0x31
    11cc:	18 c0       	rjmp	.+48     	; 0x11fe <BUTTON_voidButtonSampler+0x41a>
	{
		if(Local_u8arrTempBtns[Local_u8ButtonItterator] == -1)
			continue;
		else
			pButtons[Local_u8ButtonItterator].val = Local_u8arrTempBtns[Local_u8ButtonItterator];
    11ce:	89 a9       	ldd	r24, Y+49	; 0x31
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9c 01       	movw	r18, r24
    11d6:	22 0f       	add	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	88 ad       	ldd	r24, Y+56	; 0x38
    11dc:	99 ad       	ldd	r25, Y+57	; 0x39
    11de:	dc 01       	movw	r26, r24
    11e0:	a2 0f       	add	r26, r18
    11e2:	b3 1f       	adc	r27, r19
    11e4:	89 a9       	ldd	r24, Y+49	; 0x31
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	ce 01       	movw	r24, r28
    11ec:	c5 96       	adiw	r24, 0x35	; 53
    11ee:	fc 01       	movw	r30, r24
    11f0:	e2 0f       	add	r30, r18
    11f2:	f3 1f       	adc	r31, r19
    11f4:	80 81       	ld	r24, Z
    11f6:	8c 93       	st	X, r24

		//sleep for 100micro sec
		_delay_us(100);
	}

	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
    11f8:	89 a9       	ldd	r24, Y+49	; 0x31
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	89 ab       	std	Y+49, r24	; 0x31
    11fe:	89 a9       	ldd	r24, Y+49	; 0x31
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	28 f3       	brcs	.-54     	; 0x11ce <BUTTON_voidButtonSampler+0x3ea>
		if(Local_u8arrTempBtns[Local_u8ButtonItterator] == -1)
			continue;
		else
			pButtons[Local_u8ButtonItterator].val = Local_u8arrTempBtns[Local_u8ButtonItterator];
	}
}
    1204:	ee 96       	adiw	r28, 0x3e	; 62
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <DIO_voidSetPinDirection>:
#include "DIO_Register.h"
#include "DIO_Interface.h"


void DIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	27 97       	sbiw	r28, 0x07	; 7
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	6a 83       	std	Y+2, r22	; 0x02
    1232:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_PIN_INPUT)
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	88 23       	and	r24, r24
    1238:	09 f0       	breq	.+2      	; 0x123c <DIO_voidSetPinDirection+0x22>
    123a:	74 c0       	rjmp	.+232    	; 0x1324 <DIO_voidSetPinDirection+0x10a>
	{
		switch(Copy_u8Port)
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	3f 83       	std	Y+7, r19	; 0x07
    1244:	2e 83       	std	Y+6, r18	; 0x06
    1246:	8e 81       	ldd	r24, Y+6	; 0x06
    1248:	9f 81       	ldd	r25, Y+7	; 0x07
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	91 05       	cpc	r25, r1
    124e:	59 f1       	breq	.+86     	; 0x12a6 <DIO_voidSetPinDirection+0x8c>
    1250:	2e 81       	ldd	r18, Y+6	; 0x06
    1252:	3f 81       	ldd	r19, Y+7	; 0x07
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	2c f4       	brge	.+10     	; 0x1264 <DIO_voidSetPinDirection+0x4a>
    125a:	8e 81       	ldd	r24, Y+6	; 0x06
    125c:	9f 81       	ldd	r25, Y+7	; 0x07
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	69 f0       	breq	.+26     	; 0x127c <DIO_voidSetPinDirection+0x62>
    1262:	d2 c0       	rjmp	.+420    	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
    1264:	2e 81       	ldd	r18, Y+6	; 0x06
    1266:	3f 81       	ldd	r19, Y+7	; 0x07
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	89 f1       	breq	.+98     	; 0x12d0 <DIO_voidSetPinDirection+0xb6>
    126e:	8e 81       	ldd	r24, Y+6	; 0x06
    1270:	9f 81       	ldd	r25, Y+7	; 0x07
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <DIO_voidSetPinDirection+0x60>
    1278:	40 c0       	rjmp	.+128    	; 0x12fa <DIO_voidSetPinDirection+0xe0>
    127a:	c6 c0       	rjmp	.+396    	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(DDRA,Copy_u8Pin);
    127c:	aa e3       	ldi	r26, 0x3A	; 58
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	ea e3       	ldi	r30, 0x3A	; 58
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_voidSetPinDirection+0x80>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_voidSetPinDirection+0x7c>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	b1 c0       	rjmp	.+354    	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTB:
			CLR_BIT(DDRB,Copy_u8Pin);
    12a6:	a7 e3       	ldi	r26, 0x37	; 55
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e7 e3       	ldi	r30, 0x37	; 55
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_voidSetPinDirection+0xaa>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_voidSetPinDirection+0xa6>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	9c c0       	rjmp	.+312    	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTC:
			CLR_BIT(DDRC,Copy_u8Pin);
    12d0:	a4 e3       	ldi	r26, 0x34	; 52
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_voidSetPinDirection+0xd4>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_voidSetPinDirection+0xd0>
    12f2:	80 95       	com	r24
    12f4:	84 23       	and	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	87 c0       	rjmp	.+270    	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTD:
			CLR_BIT(DDRD,Copy_u8Pin);
    12fa:	a1 e3       	ldi	r26, 0x31	; 49
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e1 e3       	ldi	r30, 0x31	; 49
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_voidSetPinDirection+0xfe>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_voidSetPinDirection+0xfa>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	72 c0       	rjmp	.+228    	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
			break;
		}
	}
	else if(Copy_u8Direction == DIO_PIN_OUTPUT)
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	09 f0       	breq	.+2      	; 0x132c <DIO_voidSetPinDirection+0x112>
    132a:	6e c0       	rjmp	.+220    	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port)
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3d 83       	std	Y+5, r19	; 0x05
    1334:	2c 83       	std	Y+4, r18	; 0x04
    1336:	8c 81       	ldd	r24, Y+4	; 0x04
    1338:	9d 81       	ldd	r25, Y+5	; 0x05
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	91 05       	cpc	r25, r1
    133e:	49 f1       	breq	.+82     	; 0x1392 <DIO_voidSetPinDirection+0x178>
    1340:	2c 81       	ldd	r18, Y+4	; 0x04
    1342:	3d 81       	ldd	r19, Y+5	; 0x05
    1344:	22 30       	cpi	r18, 0x02	; 2
    1346:	31 05       	cpc	r19, r1
    1348:	2c f4       	brge	.+10     	; 0x1354 <DIO_voidSetPinDirection+0x13a>
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	61 f0       	breq	.+24     	; 0x136a <DIO_voidSetPinDirection+0x150>
    1352:	5a c0       	rjmp	.+180    	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	71 f1       	breq	.+92     	; 0x13ba <DIO_voidSetPinDirection+0x1a0>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	83 30       	cpi	r24, 0x03	; 3
    1364:	91 05       	cpc	r25, r1
    1366:	e9 f1       	breq	.+122    	; 0x13e2 <DIO_voidSetPinDirection+0x1c8>
    1368:	4f c0       	rjmp	.+158    	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(DDRA,Copy_u8Pin);
    136a:	aa e3       	ldi	r26, 0x3A	; 58
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	ea e3       	ldi	r30, 0x3A	; 58
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_voidSetPinDirection+0x16e>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_voidSetPinDirection+0x16a>
    138c:	84 2b       	or	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	3b c0       	rjmp	.+118    	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTB:
			SET_BIT(DDRB,Copy_u8Pin);
    1392:	a7 e3       	ldi	r26, 0x37	; 55
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e7 e3       	ldi	r30, 0x37	; 55
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_voidSetPinDirection+0x196>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_voidSetPinDirection+0x192>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	27 c0       	rjmp	.+78     	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(DDRC,Copy_u8Pin);
    13ba:	a4 e3       	ldi	r26, 0x34	; 52
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e4 e3       	ldi	r30, 0x34	; 52
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_voidSetPinDirection+0x1be>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_voidSetPinDirection+0x1ba>
    13dc:	84 2b       	or	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	13 c0       	rjmp	.+38     	; 0x1408 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTD:
			SET_BIT(DDRD,Copy_u8Pin);
    13e2:	a1 e3       	ldi	r26, 0x31	; 49
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e1 e3       	ldi	r30, 0x31	; 49
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_voidSetPinDirection+0x1e6>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_voidSetPinDirection+0x1e2>
    1404:	84 2b       	or	r24, r20
    1406:	8c 93       	st	X, r24
			break;
		}
	}

}
    1408:	27 96       	adiw	r28, 0x07	; 7
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	27 97       	sbiw	r28, 0x07	; 7
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	6a 83       	std	Y+2, r22	; 0x02
    1432:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == DIO_HIGH)
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	09 f0       	breq	.+2      	; 0x143c <DIO_voidSetPinValue+0x22>
    143a:	6f c0       	rjmp	.+222    	; 0x151a <DIO_voidSetPinValue+0x100>
	{
		switch(Copy_u8Port)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	3f 83       	std	Y+7, r19	; 0x07
    1444:	2e 83       	std	Y+6, r18	; 0x06
    1446:	8e 81       	ldd	r24, Y+6	; 0x06
    1448:	9f 81       	ldd	r25, Y+7	; 0x07
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	91 05       	cpc	r25, r1
    144e:	49 f1       	breq	.+82     	; 0x14a2 <DIO_voidSetPinValue+0x88>
    1450:	2e 81       	ldd	r18, Y+6	; 0x06
    1452:	3f 81       	ldd	r19, Y+7	; 0x07
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	2c f4       	brge	.+10     	; 0x1464 <DIO_voidSetPinValue+0x4a>
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	9f 81       	ldd	r25, Y+7	; 0x07
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	61 f0       	breq	.+24     	; 0x147a <DIO_voidSetPinValue+0x60>
    1462:	d2 c0       	rjmp	.+420    	; 0x1608 <DIO_voidSetPinValue+0x1ee>
    1464:	2e 81       	ldd	r18, Y+6	; 0x06
    1466:	3f 81       	ldd	r19, Y+7	; 0x07
    1468:	22 30       	cpi	r18, 0x02	; 2
    146a:	31 05       	cpc	r19, r1
    146c:	71 f1       	breq	.+92     	; 0x14ca <DIO_voidSetPinValue+0xb0>
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	91 05       	cpc	r25, r1
    1476:	e9 f1       	breq	.+122    	; 0x14f2 <DIO_voidSetPinValue+0xd8>
    1478:	c7 c0       	rjmp	.+398    	; 0x1608 <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(PORTA,Copy_u8Pin);
    147a:	ab e3       	ldi	r26, 0x3B	; 59
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	eb e3       	ldi	r30, 0x3B	; 59
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_voidSetPinValue+0x7e>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_voidSetPinValue+0x7a>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	b3 c0       	rjmp	.+358    	; 0x1608 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTB:
			SET_BIT(PORTB,Copy_u8Pin);
    14a2:	a8 e3       	ldi	r26, 0x38	; 56
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e8 e3       	ldi	r30, 0x38	; 56
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_voidSetPinValue+0xa6>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_voidSetPinValue+0xa2>
    14c4:	84 2b       	or	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	9f c0       	rjmp	.+318    	; 0x1608 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(PORTC,Copy_u8Pin);
    14ca:	a5 e3       	ldi	r26, 0x35	; 53
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e5 e3       	ldi	r30, 0x35	; 53
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <DIO_voidSetPinValue+0xce>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <DIO_voidSetPinValue+0xca>
    14ec:	84 2b       	or	r24, r20
    14ee:	8c 93       	st	X, r24
    14f0:	8b c0       	rjmp	.+278    	; 0x1608 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTD:
			SET_BIT(PORTD,Copy_u8Pin);
    14f2:	a2 e3       	ldi	r26, 0x32	; 50
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e2 e3       	ldi	r30, 0x32	; 50
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_voidSetPinValue+0xf6>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_voidSetPinValue+0xf2>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	77 c0       	rjmp	.+238    	; 0x1608 <DIO_voidSetPinValue+0x1ee>
			break;
		}

	}
	else if(Copy_u8Value == DIO_LOW)
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	88 23       	and	r24, r24
    151e:	09 f0       	breq	.+2      	; 0x1522 <DIO_voidSetPinValue+0x108>
    1520:	73 c0       	rjmp	.+230    	; 0x1608 <DIO_voidSetPinValue+0x1ee>
	{
		switch(Copy_u8Port)
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3d 83       	std	Y+5, r19	; 0x05
    152a:	2c 83       	std	Y+4, r18	; 0x04
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	59 f1       	breq	.+86     	; 0x158c <DIO_voidSetPinValue+0x172>
    1536:	2c 81       	ldd	r18, Y+4	; 0x04
    1538:	3d 81       	ldd	r19, Y+5	; 0x05
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <DIO_voidSetPinValue+0x130>
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	69 f0       	breq	.+26     	; 0x1562 <DIO_voidSetPinValue+0x148>
    1548:	5f c0       	rjmp	.+190    	; 0x1608 <DIO_voidSetPinValue+0x1ee>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	89 f1       	breq	.+98     	; 0x15b6 <DIO_voidSetPinValue+0x19c>
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <DIO_voidSetPinValue+0x146>
    155e:	40 c0       	rjmp	.+128    	; 0x15e0 <DIO_voidSetPinValue+0x1c6>
    1560:	53 c0       	rjmp	.+166    	; 0x1608 <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(PORTA,Copy_u8Pin);
    1562:	ab e3       	ldi	r26, 0x3B	; 59
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	eb e3       	ldi	r30, 0x3B	; 59
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_voidSetPinValue+0x166>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_voidSetPinValue+0x162>
    1584:	80 95       	com	r24
    1586:	84 23       	and	r24, r20
    1588:	8c 93       	st	X, r24
    158a:	3e c0       	rjmp	.+124    	; 0x1608 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTB:
			CLR_BIT(PORTB,Copy_u8Pin);
    158c:	a8 e3       	ldi	r26, 0x38	; 56
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e8 e3       	ldi	r30, 0x38	; 56
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	48 2f       	mov	r20, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	02 2e       	mov	r0, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_voidSetPinValue+0x190>
    15a6:	88 0f       	add	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	0a 94       	dec	r0
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_voidSetPinValue+0x18c>
    15ae:	80 95       	com	r24
    15b0:	84 23       	and	r24, r20
    15b2:	8c 93       	st	X, r24
    15b4:	29 c0       	rjmp	.+82     	; 0x1608 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTC:
			CLR_BIT(PORTC,Copy_u8Pin);
    15b6:	a5 e3       	ldi	r26, 0x35	; 53
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e5 e3       	ldi	r30, 0x35	; 53
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_voidSetPinValue+0x1ba>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_voidSetPinValue+0x1b6>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTD:
			CLR_BIT(PORTD,Copy_u8Pin);
    15e0:	a2 e3       	ldi	r26, 0x32	; 50
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e2 e3       	ldi	r30, 0x32	; 50
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_voidSetPinValue+0x1e4>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_voidSetPinValue+0x1e0>
    1602:	80 95       	com	r24
    1604:	84 23       	and	r24, r20
    1606:	8c 93       	st	X, r24
			break;
		}

	}
}
    1608:	27 96       	adiw	r28, 0x07	; 7
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	00 d0       	rcall	.+0      	; 0x1620 <DIO_voidTogglePinValue+0x6>
    1620:	00 d0       	rcall	.+0      	; 0x1622 <DIO_voidTogglePinValue+0x8>
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	3c 83       	std	Y+4, r19	; 0x04
    1632:	2b 83       	std	Y+3, r18	; 0x03
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	91 05       	cpc	r25, r1
    163c:	49 f1       	breq	.+82     	; 0x1690 <DIO_voidTogglePinValue+0x76>
    163e:	2b 81       	ldd	r18, Y+3	; 0x03
    1640:	3c 81       	ldd	r19, Y+4	; 0x04
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	2c f4       	brge	.+10     	; 0x1652 <DIO_voidTogglePinValue+0x38>
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	61 f0       	breq	.+24     	; 0x1668 <DIO_voidTogglePinValue+0x4e>
    1650:	5a c0       	rjmp	.+180    	; 0x1706 <DIO_voidTogglePinValue+0xec>
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	71 f1       	breq	.+92     	; 0x16b8 <DIO_voidTogglePinValue+0x9e>
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	91 05       	cpc	r25, r1
    1664:	e9 f1       	breq	.+122    	; 0x16e0 <DIO_voidTogglePinValue+0xc6>
    1666:	4f c0       	rjmp	.+158    	; 0x1706 <DIO_voidTogglePinValue+0xec>
	{
	case DIO_PORTA:
		TOG_BIT(PORTA,Copy_u8Pin);
    1668:	ab e3       	ldi	r26, 0x3B	; 59
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	eb e3       	ldi	r30, 0x3B	; 59
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	02 2e       	mov	r0, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_voidTogglePinValue+0x6c>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	0a 94       	dec	r0
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_voidTogglePinValue+0x68>
    168a:	84 27       	eor	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	3b c0       	rjmp	.+118    	; 0x1706 <DIO_voidTogglePinValue+0xec>
		break;
	case DIO_PORTB:
		TOG_BIT(PORTB,Copy_u8Pin);
    1690:	a8 e3       	ldi	r26, 0x38	; 56
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e8 e3       	ldi	r30, 0x38	; 56
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 2e       	mov	r0, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <DIO_voidTogglePinValue+0x94>
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	0a 94       	dec	r0
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <DIO_voidTogglePinValue+0x90>
    16b2:	84 27       	eor	r24, r20
    16b4:	8c 93       	st	X, r24
    16b6:	27 c0       	rjmp	.+78     	; 0x1706 <DIO_voidTogglePinValue+0xec>
		break;
	case DIO_PORTC:
		TOG_BIT(PORTC,Copy_u8Pin);
    16b8:	a5 e3       	ldi	r26, 0x35	; 53
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e5 e3       	ldi	r30, 0x35	; 53
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_voidTogglePinValue+0xbc>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <DIO_voidTogglePinValue+0xb8>
    16da:	84 27       	eor	r24, r20
    16dc:	8c 93       	st	X, r24
    16de:	13 c0       	rjmp	.+38     	; 0x1706 <DIO_voidTogglePinValue+0xec>
		break;
	case DIO_PORTD:
		TOG_BIT(PORTD,Copy_u8Pin);
    16e0:	a2 e3       	ldi	r26, 0x32	; 50
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e2 e3       	ldi	r30, 0x32	; 50
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DIO_voidTogglePinValue+0xe4>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <DIO_voidTogglePinValue+0xe0>
    1702:	84 27       	eor	r24, r20
    1704:	8c 93       	st	X, r24
		break;
	}
}
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <DIO_voidSetPortDirection+0x6>
    171a:	00 d0       	rcall	.+0      	; 0x171c <DIO_voidSetPortDirection+0x8>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	3c 83       	std	Y+4, r19	; 0x04
    172c:	2b 83       	std	Y+3, r18	; 0x03
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	d1 f0       	breq	.+52     	; 0x176c <DIO_voidSetPortDirection+0x58>
    1738:	2b 81       	ldd	r18, Y+3	; 0x03
    173a:	3c 81       	ldd	r19, Y+4	; 0x04
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	2c f4       	brge	.+10     	; 0x174c <DIO_voidSetPortDirection+0x38>
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	61 f0       	breq	.+24     	; 0x1762 <DIO_voidSetPortDirection+0x4e>
    174a:	1e c0       	rjmp	.+60     	; 0x1788 <DIO_voidSetPortDirection+0x74>
    174c:	2b 81       	ldd	r18, Y+3	; 0x03
    174e:	3c 81       	ldd	r19, Y+4	; 0x04
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	81 f0       	breq	.+32     	; 0x1776 <DIO_voidSetPortDirection+0x62>
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	81 f0       	breq	.+32     	; 0x1780 <DIO_voidSetPortDirection+0x6c>
    1760:	13 c0       	rjmp	.+38     	; 0x1788 <DIO_voidSetPortDirection+0x74>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Direction;
    1762:	ea e3       	ldi	r30, 0x3A	; 58
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	80 83       	st	Z, r24
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <DIO_voidSetPortDirection+0x74>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Direction;
    176c:	e7 e3       	ldi	r30, 0x37	; 55
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	80 83       	st	Z, r24
    1774:	09 c0       	rjmp	.+18     	; 0x1788 <DIO_voidSetPortDirection+0x74>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Direction;
    1776:	e4 e3       	ldi	r30, 0x34	; 52
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	80 83       	st	Z, r24
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <DIO_voidSetPortDirection+0x74>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Direction;
    1780:	e1 e3       	ldi	r30, 0x31	; 49
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	80 83       	st	Z, r24
			break;
		}
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <DIO_voidSetPortValue+0x6>
    179c:	00 d0       	rcall	.+0      	; 0x179e <DIO_voidSetPortValue+0x8>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3c 83       	std	Y+4, r19	; 0x04
    17ae:	2b 83       	std	Y+3, r18	; 0x03
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	91 05       	cpc	r25, r1
    17b8:	d1 f0       	breq	.+52     	; 0x17ee <DIO_voidSetPortValue+0x58>
    17ba:	2b 81       	ldd	r18, Y+3	; 0x03
    17bc:	3c 81       	ldd	r19, Y+4	; 0x04
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	2c f4       	brge	.+10     	; 0x17ce <DIO_voidSetPortValue+0x38>
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	61 f0       	breq	.+24     	; 0x17e4 <DIO_voidSetPortValue+0x4e>
    17cc:	1e c0       	rjmp	.+60     	; 0x180a <DIO_voidSetPortValue+0x74>
    17ce:	2b 81       	ldd	r18, Y+3	; 0x03
    17d0:	3c 81       	ldd	r19, Y+4	; 0x04
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	81 f0       	breq	.+32     	; 0x17f8 <DIO_voidSetPortValue+0x62>
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <DIO_voidSetPortValue+0x6c>
    17e2:	13 c0       	rjmp	.+38     	; 0x180a <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA:
		PORTA = Copy_u8Value;
    17e4:	eb e3       	ldi	r30, 0x3B	; 59
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	80 83       	st	Z, r24
    17ec:	0e c0       	rjmp	.+28     	; 0x180a <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTB:
		PORTB = Copy_u8Value;
    17ee:	e8 e3       	ldi	r30, 0x38	; 56
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	80 83       	st	Z, r24
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTC:
		PORTC = Copy_u8Value;
    17f8:	e5 e3       	ldi	r30, 0x35	; 53
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	80 83       	st	Z, r24
    1800:	04 c0       	rjmp	.+8      	; 0x180a <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTD:
		PORTD = Copy_u8Value;
    1802:	e2 e3       	ldi	r30, 0x32	; 50
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	80 83       	st	Z, r24
		break;
	}
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <DIO_u8GetPinValue+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <DIO_u8GetPinValue+0x8>
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	8a 83       	std	Y+2, r24	; 0x02
    1828:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnValue;
	switch(Copy_u8Port)
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	3d 83       	std	Y+5, r19	; 0x05
    1832:	2c 83       	std	Y+4, r18	; 0x04
    1834:	4c 81       	ldd	r20, Y+4	; 0x04
    1836:	5d 81       	ldd	r21, Y+5	; 0x05
    1838:	41 30       	cpi	r20, 0x01	; 1
    183a:	51 05       	cpc	r21, r1
    183c:	41 f1       	breq	.+80     	; 0x188e <DIO_u8GetPinValue+0x76>
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	91 05       	cpc	r25, r1
    1846:	34 f4       	brge	.+12     	; 0x1854 <DIO_u8GetPinValue+0x3c>
    1848:	2c 81       	ldd	r18, Y+4	; 0x04
    184a:	3d 81       	ldd	r19, Y+5	; 0x05
    184c:	21 15       	cp	r18, r1
    184e:	31 05       	cpc	r19, r1
    1850:	61 f0       	breq	.+24     	; 0x186a <DIO_u8GetPinValue+0x52>
    1852:	52 c0       	rjmp	.+164    	; 0x18f8 <DIO_u8GetPinValue+0xe0>
    1854:	4c 81       	ldd	r20, Y+4	; 0x04
    1856:	5d 81       	ldd	r21, Y+5	; 0x05
    1858:	42 30       	cpi	r20, 0x02	; 2
    185a:	51 05       	cpc	r21, r1
    185c:	51 f1       	breq	.+84     	; 0x18b2 <DIO_u8GetPinValue+0x9a>
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	b9 f1       	breq	.+110    	; 0x18d6 <DIO_u8GetPinValue+0xbe>
    1868:	47 c0       	rjmp	.+142    	; 0x18f8 <DIO_u8GetPinValue+0xe0>
	{
	case DIO_PORTA:
		Local_u8ReturnValue = GET_BIT(PINA,Copy_u8Pin);
    186a:	e9 e3       	ldi	r30, 0x39	; 57
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	88 2f       	mov	r24, r24
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a9 01       	movw	r20, r18
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <DIO_u8GetPinValue+0x6a>
    187e:	55 95       	asr	r21
    1880:	47 95       	ror	r20
    1882:	8a 95       	dec	r24
    1884:	e2 f7       	brpl	.-8      	; 0x187e <DIO_u8GetPinValue+0x66>
    1886:	ca 01       	movw	r24, r20
    1888:	81 70       	andi	r24, 0x01	; 1
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	35 c0       	rjmp	.+106    	; 0x18f8 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTB:
		Local_u8ReturnValue = GET_BIT(PINB,Copy_u8Pin);
    188e:	e6 e3       	ldi	r30, 0x36	; 54
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a9 01       	movw	r20, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_u8GetPinValue+0x8e>
    18a2:	55 95       	asr	r21
    18a4:	47 95       	ror	r20
    18a6:	8a 95       	dec	r24
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_u8GetPinValue+0x8a>
    18aa:	ca 01       	movw	r24, r20
    18ac:	81 70       	andi	r24, 0x01	; 1
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	23 c0       	rjmp	.+70     	; 0x18f8 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTC:
		Local_u8ReturnValue = GET_BIT(PINC,Copy_u8Pin);
    18b2:	e3 e3       	ldi	r30, 0x33	; 51
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_u8GetPinValue+0xb2>
    18c6:	55 95       	asr	r21
    18c8:	47 95       	ror	r20
    18ca:	8a 95       	dec	r24
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_u8GetPinValue+0xae>
    18ce:	ca 01       	movw	r24, r20
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	11 c0       	rjmp	.+34     	; 0x18f8 <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTD:
		Local_u8ReturnValue = GET_BIT(PIND,Copy_u8Pin);
    18d6:	e0 e3       	ldi	r30, 0x30	; 48
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a9 01       	movw	r20, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_u8GetPinValue+0xd6>
    18ea:	55 95       	asr	r21
    18ec:	47 95       	ror	r20
    18ee:	8a 95       	dec	r24
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_u8GetPinValue+0xd2>
    18f2:	ca 01       	movw	r24, r20
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ReturnValue;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <LCD_voidSendCommand>:
 */

#include "LCD_Interface.h"

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	2f 97       	sbiw	r28, 0x0f	; 15
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	8f 87       	std	Y+15, r24	; 0x0f
	 * set RW to low
	 * send command

	 * set enable */

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    1920:	83 e0       	ldi	r24, 0x03	; 3
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	6f 85       	ldd	r22, Y+15	; 0x0f
    1938:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_voidSetPortValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	62 e0       	ldi	r22, 0x02	; 2
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e0       	ldi	r26, 0x00	; 0
    194c:	b0 e4       	ldi	r27, 0x40	; 64
    194e:	8b 87       	std	Y+11, r24	; 0x0b
    1950:	9c 87       	std	Y+12, r25	; 0x0c
    1952:	ad 87       	std	Y+13, r26	; 0x0d
    1954:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1956:	6b 85       	ldd	r22, Y+11	; 0x0b
    1958:	7c 85       	ldd	r23, Y+12	; 0x0c
    195a:	8d 85       	ldd	r24, Y+13	; 0x0d
    195c:	9e 85       	ldd	r25, Y+14	; 0x0e
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a ef       	ldi	r20, 0xFA	; 250
    1964:	54 e4       	ldi	r21, 0x44	; 68
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8f 83       	std	Y+7, r24	; 0x07
    1970:	98 87       	std	Y+8, r25	; 0x08
    1972:	a9 87       	std	Y+9, r26	; 0x09
    1974:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1976:	6f 81       	ldd	r22, Y+7	; 0x07
    1978:	78 85       	ldd	r23, Y+8	; 0x08
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	9a 85       	ldd	r25, Y+10	; 0x0a
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    198a:	88 23       	and	r24, r24
    198c:	2c f4       	brge	.+10     	; 0x1998 <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	3f c0       	rjmp	.+126    	; 0x1a16 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1998:	6f 81       	ldd	r22, Y+7	; 0x07
    199a:	78 85       	ldd	r23, Y+8	; 0x08
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3f ef       	ldi	r19, 0xFF	; 255
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	57 e4       	ldi	r21, 0x47	; 71
    19a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	4c f5       	brge	.+82     	; 0x1a02 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e2       	ldi	r20, 0x20	; 32
    19be:	51 e4       	ldi	r21, 0x41	; 65
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <LCD_voidSendCommand+0xee>
    19da:	88 ec       	ldi	r24, 0xC8	; 200
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9c 83       	std	Y+4, r25	; 0x04
    19e0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_voidSendCommand+0xdc>
    19ea:	9c 83       	std	Y+4, r25	; 0x04
    19ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ee:	8d 81       	ldd	r24, Y+5	; 0x05
    19f0:	9e 81       	ldd	r25, Y+6	; 0x06
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	69 f7       	brne	.-38     	; 0x19da <LCD_voidSendCommand+0xd0>
    1a00:	14 c0       	rjmp	.+40     	; 0x1a2a <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_voidSendCommand+0x118>
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	62 e0       	ldi	r22, 0x02	; 2
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>
}
    1a34:	2f 96       	adiw	r28, 0x0f	; 15
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	2f 97       	sbiw	r28, 0x0f	; 15
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	f8 94       	cli
    1a54:	de bf       	out	0x3e, r29	; 62
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	cd bf       	out	0x3d, r28	; 61
    1a5a:	8f 87       	std	Y+15, r24	; 0x0f
		 * set RS to high
		 * set RW to low
		 * send data
		 * set enable */

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    1a5c:	83 e0       	ldi	r24, 0x03	; 3
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	41 e0       	ldi	r20, 0x01	; 1
    1a62:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    1a66:	83 e0       	ldi	r24, 0x03	; 3
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a74:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_voidSetPortValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	41 e0       	ldi	r20, 0x01	; 1
    1a7e:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a0 e0       	ldi	r26, 0x00	; 0
    1a88:	b0 e4       	ldi	r27, 0x40	; 64
    1a8a:	8b 87       	std	Y+11, r24	; 0x0b
    1a8c:	9c 87       	std	Y+12, r25	; 0x0c
    1a8e:	ad 87       	std	Y+13, r26	; 0x0d
    1a90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	4a ef       	ldi	r20, 0xFA	; 250
    1aa0:	54 e4       	ldi	r21, 0x44	; 68
    1aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	8f 83       	std	Y+7, r24	; 0x07
    1aac:	98 87       	std	Y+8, r25	; 0x08
    1aae:	a9 87       	std	Y+9, r26	; 0x09
    1ab0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab4:	78 85       	ldd	r23, Y+8	; 0x08
    1ab6:	89 85       	ldd	r24, Y+9	; 0x09
    1ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e8       	ldi	r20, 0x80	; 128
    1ac0:	5f e3       	ldi	r21, 0x3F	; 63
    1ac2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac6:	88 23       	and	r24, r24
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <LCD_voidSendData+0x8e>
		__ticks = 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	3f c0       	rjmp	.+126    	; 0x1b52 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	3f ef       	ldi	r19, 0xFF	; 255
    1ae0:	4f e7       	ldi	r20, 0x7F	; 127
    1ae2:	57 e4       	ldi	r21, 0x47	; 71
    1ae4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae8:	18 16       	cp	r1, r24
    1aea:	4c f5       	brge	.+82     	; 0x1b3e <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e2       	ldi	r20, 0x20	; 32
    1afa:	51 e4       	ldi	r21, 0x41	; 65
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	bc 01       	movw	r22, r24
    1b06:	cd 01       	movw	r24, r26
    1b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	0f c0       	rjmp	.+30     	; 0x1b34 <LCD_voidSendData+0xee>
    1b16:	88 ec       	ldi	r24, 0xC8	; 200
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <LCD_voidSendData+0xdc>
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	69 f7       	brne	.-38     	; 0x1b16 <LCD_voidSendData+0xd0>
    1b3c:	14 c0       	rjmp	.+40     	; 0x1b66 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b40:	78 85       	ldd	r23, Y+8	; 0x08
    1b42:	89 85       	ldd	r24, Y+9	; 0x09
    1b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <LCD_voidSendData+0x118>
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_voidSetPinValue>
}
    1b70:	2f 96       	adiw	r28, 0x0f	; 15
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <LCD_voidLCDInit>:

void LCD_voidLCDInit(void)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	e8 97       	sbiw	r28, 0x38	; 56
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a0 ef       	ldi	r26, 0xF0	; 240
    1b9c:	b1 e4       	ldi	r27, 0x41	; 65
    1b9e:	8d ab       	std	Y+53, r24	; 0x35
    1ba0:	9e ab       	std	Y+54, r25	; 0x36
    1ba2:	af ab       	std	Y+55, r26	; 0x37
    1ba4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ba8:	7e a9       	ldd	r23, Y+54	; 0x36
    1baa:	8f a9       	ldd	r24, Y+55	; 0x37
    1bac:	98 ad       	ldd	r25, Y+56	; 0x38
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a ef       	ldi	r20, 0xFA	; 250
    1bb4:	54 e4       	ldi	r21, 0x44	; 68
    1bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	89 ab       	std	Y+49, r24	; 0x31
    1bc0:	9a ab       	std	Y+50, r25	; 0x32
    1bc2:	ab ab       	std	Y+51, r26	; 0x33
    1bc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1bca:	8b a9       	ldd	r24, Y+51	; 0x33
    1bcc:	9c a9       	ldd	r25, Y+52	; 0x34
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <LCD_voidLCDInit+0x66>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	98 ab       	std	Y+48, r25	; 0x30
    1be4:	8f a7       	std	Y+47, r24	; 0x2f
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <LCD_voidLCDInit+0xe4>
	else if (__tmp > 65535)
    1be8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bea:	7a a9       	ldd	r23, Y+50	; 0x32
    1bec:	8b a9       	ldd	r24, Y+51	; 0x33
    1bee:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	4c f5       	brge	.+82     	; 0x1c52 <LCD_voidLCDInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	6d a9       	ldd	r22, Y+53	; 0x35
    1c02:	7e a9       	ldd	r23, Y+54	; 0x36
    1c04:	8f a9       	ldd	r24, Y+55	; 0x37
    1c06:	98 ad       	ldd	r25, Y+56	; 0x38
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	98 ab       	std	Y+48, r25	; 0x30
    1c26:	8f a7       	std	Y+47, r24	; 0x2f
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <LCD_voidLCDInit+0xc6>
    1c2a:	88 ec       	ldi	r24, 0xC8	; 200
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9e a7       	std	Y+46, r25	; 0x2e
    1c30:	8d a7       	std	Y+45, r24	; 0x2d
    1c32:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c34:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_voidLCDInit+0xb4>
    1c3a:	9e a7       	std	Y+46, r25	; 0x2e
    1c3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c40:	98 a9       	ldd	r25, Y+48	; 0x30
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	98 ab       	std	Y+48, r25	; 0x30
    1c46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	69 f7       	brne	.-38     	; 0x1c2a <LCD_voidLCDInit+0xa8>
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <LCD_voidLCDInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c52:	69 a9       	ldd	r22, Y+49	; 0x31
    1c54:	7a a9       	ldd	r23, Y+50	; 0x32
    1c56:	8b a9       	ldd	r24, Y+51	; 0x33
    1c58:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	98 ab       	std	Y+48, r25	; 0x30
    1c64:	8f a7       	std	Y+47, r24	; 0x2f
    1c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c68:	98 a9       	ldd	r25, Y+48	; 0x30
    1c6a:	9c a7       	std	Y+44, r25	; 0x2c
    1c6c:	8b a7       	std	Y+43, r24	; 0x2b
    1c6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c70:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_voidLCDInit+0xf0>
    1c76:	9c a7       	std	Y+44, r25	; 0x2c
    1c78:	8b a7       	std	Y+43, r24	; 0x2b
	 * send clear display command
	 * wait 1ms
	 * */

	_delay_ms(30);
	LCD_voidSendCommand(0b00111000);
    1c7a:	88 e3       	ldi	r24, 0x38	; 56
    1c7c:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_voidSendCommand>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 e8       	ldi	r26, 0x80	; 128
    1c86:	bf e3       	ldi	r27, 0x3F	; 63
    1c88:	8f a3       	std	Y+39, r24	; 0x27
    1c8a:	98 a7       	std	Y+40, r25	; 0x28
    1c8c:	a9 a7       	std	Y+41, r26	; 0x29
    1c8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c90:	6f a1       	ldd	r22, Y+39	; 0x27
    1c92:	78 a5       	ldd	r23, Y+40	; 0x28
    1c94:	89 a5       	ldd	r24, Y+41	; 0x29
    1c96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	4a ef       	ldi	r20, 0xFA	; 250
    1c9e:	54 e4       	ldi	r21, 0x44	; 68
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	8b a3       	std	Y+35, r24	; 0x23
    1caa:	9c a3       	std	Y+36, r25	; 0x24
    1cac:	ad a3       	std	Y+37, r26	; 0x25
    1cae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	2c f4       	brge	.+10     	; 0x1cd2 <LCD_voidLCDInit+0x150>
		__ticks = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9a a3       	std	Y+34, r25	; 0x22
    1cce:	89 a3       	std	Y+33, r24	; 0x21
    1cd0:	3f c0       	rjmp	.+126    	; 0x1d50 <LCD_voidLCDInit+0x1ce>
	else if (__tmp > 65535)
    1cd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	3f ef       	ldi	r19, 0xFF	; 255
    1cde:	4f e7       	ldi	r20, 0x7F	; 127
    1ce0:	57 e4       	ldi	r21, 0x47	; 71
    1ce2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce6:	18 16       	cp	r1, r24
    1ce8:	4c f5       	brge	.+82     	; 0x1d3c <LCD_voidLCDInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cea:	6f a1       	ldd	r22, Y+39	; 0x27
    1cec:	78 a5       	ldd	r23, Y+40	; 0x28
    1cee:	89 a5       	ldd	r24, Y+41	; 0x29
    1cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e2       	ldi	r20, 0x20	; 32
    1cf8:	51 e4       	ldi	r21, 0x41	; 65
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	bc 01       	movw	r22, r24
    1d04:	cd 01       	movw	r24, r26
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9a a3       	std	Y+34, r25	; 0x22
    1d10:	89 a3       	std	Y+33, r24	; 0x21
    1d12:	0f c0       	rjmp	.+30     	; 0x1d32 <LCD_voidLCDInit+0x1b0>
    1d14:	88 ec       	ldi	r24, 0xC8	; 200
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	98 a3       	std	Y+32, r25	; 0x20
    1d1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1d1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <LCD_voidLCDInit+0x19e>
    1d24:	98 a3       	std	Y+32, r25	; 0x20
    1d26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d28:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	9a a3       	std	Y+34, r25	; 0x22
    1d30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d32:	89 a1       	ldd	r24, Y+33	; 0x21
    1d34:	9a a1       	ldd	r25, Y+34	; 0x22
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <LCD_voidLCDInit+0x192>
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <LCD_voidLCDInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d40:	8d a1       	ldd	r24, Y+37	; 0x25
    1d42:	9e a1       	ldd	r25, Y+38	; 0x26
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	9a a3       	std	Y+34, r25	; 0x22
    1d4e:	89 a3       	std	Y+33, r24	; 0x21
    1d50:	89 a1       	ldd	r24, Y+33	; 0x21
    1d52:	9a a1       	ldd	r25, Y+34	; 0x22
    1d54:	9e 8f       	std	Y+30, r25	; 0x1e
    1d56:	8d 8f       	std	Y+29, r24	; 0x1d
    1d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <LCD_voidLCDInit+0x1da>
    1d60:	9e 8f       	std	Y+30, r25	; 0x1e
    1d62:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidSendCommand(0b00001100);
    1d64:	8c e0       	ldi	r24, 0x0C	; 12
    1d66:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_voidSendCommand>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e8       	ldi	r26, 0x80	; 128
    1d70:	bf e3       	ldi	r27, 0x3F	; 63
    1d72:	89 8f       	std	Y+25, r24	; 0x19
    1d74:	9a 8f       	std	Y+26, r25	; 0x1a
    1d76:	ab 8f       	std	Y+27, r26	; 0x1b
    1d78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a ef       	ldi	r20, 0xFA	; 250
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8d 8b       	std	Y+21, r24	; 0x15
    1d94:	9e 8b       	std	Y+22, r25	; 0x16
    1d96:	af 8b       	std	Y+23, r26	; 0x17
    1d98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1da0:	98 8d       	ldd	r25, Y+24	; 0x18
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e8       	ldi	r20, 0x80	; 128
    1da8:	5f e3       	ldi	r21, 0x3F	; 63
    1daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dae:	88 23       	and	r24, r24
    1db0:	2c f4       	brge	.+10     	; 0x1dbc <LCD_voidLCDInit+0x23a>
		__ticks = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9c 8b       	std	Y+20, r25	; 0x14
    1db8:	8b 8b       	std	Y+19, r24	; 0x13
    1dba:	3f c0       	rjmp	.+126    	; 0x1e3a <LCD_voidLCDInit+0x2b8>
	else if (__tmp > 65535)
    1dbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	3f ef       	ldi	r19, 0xFF	; 255
    1dc8:	4f e7       	ldi	r20, 0x7F	; 127
    1dca:	57 e4       	ldi	r21, 0x47	; 71
    1dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd0:	18 16       	cp	r1, r24
    1dd2:	4c f5       	brge	.+82     	; 0x1e26 <LCD_voidLCDInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e2       	ldi	r20, 0x20	; 32
    1de2:	51 e4       	ldi	r21, 0x41	; 65
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	cd 01       	movw	r24, r26
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9c 8b       	std	Y+20, r25	; 0x14
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
    1dfc:	0f c0       	rjmp	.+30     	; 0x1e1c <LCD_voidLCDInit+0x29a>
    1dfe:	88 ec       	ldi	r24, 0xC8	; 200
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9a 8b       	std	Y+18, r25	; 0x12
    1e04:	89 8b       	std	Y+17, r24	; 0x11
    1e06:	89 89       	ldd	r24, Y+17	; 0x11
    1e08:	9a 89       	ldd	r25, Y+18	; 0x12
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_voidLCDInit+0x288>
    1e0e:	9a 8b       	std	Y+18, r25	; 0x12
    1e10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e12:	8b 89       	ldd	r24, Y+19	; 0x13
    1e14:	9c 89       	ldd	r25, Y+20	; 0x14
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	9c 8b       	std	Y+20, r25	; 0x14
    1e1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <LCD_voidLCDInit+0x27c>
    1e24:	14 c0       	rjmp	.+40     	; 0x1e4e <LCD_voidLCDInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	6d 89       	ldd	r22, Y+21	; 0x15
    1e28:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
    1e3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3e:	98 8b       	std	Y+16, r25	; 0x10
    1e40:	8f 87       	std	Y+15, r24	; 0x0f
    1e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e44:	98 89       	ldd	r25, Y+16	; 0x10
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	f1 f7       	brne	.-4      	; 0x1e46 <LCD_voidLCDInit+0x2c4>
    1e4a:	98 8b       	std	Y+16, r25	; 0x10
    1e4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(1);
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_voidSendCommand>
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e0       	ldi	r26, 0x00	; 0
    1e5a:	b0 e4       	ldi	r27, 0x40	; 64
    1e5c:	8b 87       	std	Y+11, r24	; 0x0b
    1e5e:	9c 87       	std	Y+12, r25	; 0x0c
    1e60:	ad 87       	std	Y+13, r26	; 0x0d
    1e62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	4a ef       	ldi	r20, 0xFA	; 250
    1e72:	54 e4       	ldi	r21, 0x44	; 68
    1e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	8f 83       	std	Y+7, r24	; 0x07
    1e7e:	98 87       	std	Y+8, r25	; 0x08
    1e80:	a9 87       	std	Y+9, r26	; 0x09
    1e82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e84:	6f 81       	ldd	r22, Y+7	; 0x07
    1e86:	78 85       	ldd	r23, Y+8	; 0x08
    1e88:	89 85       	ldd	r24, Y+9	; 0x09
    1e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e8       	ldi	r20, 0x80	; 128
    1e92:	5f e3       	ldi	r21, 0x3F	; 63
    1e94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e98:	88 23       	and	r24, r24
    1e9a:	2c f4       	brge	.+10     	; 0x1ea6 <LCD_voidLCDInit+0x324>
		__ticks = 1;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	3f c0       	rjmp	.+126    	; 0x1f24 <LCD_voidLCDInit+0x3a2>
	else if (__tmp > 65535)
    1ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea8:	78 85       	ldd	r23, Y+8	; 0x08
    1eaa:	89 85       	ldd	r24, Y+9	; 0x09
    1eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	3f ef       	ldi	r19, 0xFF	; 255
    1eb2:	4f e7       	ldi	r20, 0x7F	; 127
    1eb4:	57 e4       	ldi	r21, 0x47	; 71
    1eb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eba:	18 16       	cp	r1, r24
    1ebc:	4c f5       	brge	.+82     	; 0x1f10 <LCD_voidLCDInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e2       	ldi	r20, 0x20	; 32
    1ecc:	51 e4       	ldi	r21, 0x41	; 65
    1ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	0f c0       	rjmp	.+30     	; 0x1f06 <LCD_voidLCDInit+0x384>
    1ee8:	88 ec       	ldi	r24, 0xC8	; 200
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	8b 83       	std	Y+3, r24	; 0x03
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_voidLCDInit+0x372>
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efc:	8d 81       	ldd	r24, Y+5	; 0x05
    1efe:	9e 81       	ldd	r25, Y+6	; 0x06
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	9e 83       	std	Y+6, r25	; 0x06
    1f04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	69 f7       	brne	.-38     	; 0x1ee8 <LCD_voidLCDInit+0x366>
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <LCD_voidLCDInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_voidLCDInit+0x3ae>
    1f34:	9a 83       	std	Y+2, r25	; 0x02
    1f36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1f38:	e8 96       	adiw	r28, 0x38	; 56
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <LCD_voidConfiguration>:

void LCD_voidConfiguration(void)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	6f ef       	ldi	r22, 0xFF	; 255
    1f56:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	41 e0       	ldi	r20, 0x01	; 1
    1f60:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    1f64:	83 e0       	ldi	r24, 0x03	; 3
    1f66:	61 e0       	ldi	r22, 0x01	; 1
    1f68:	41 e0       	ldi	r20, 0x01	; 1
    1f6a:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
    1f6e:	83 e0       	ldi	r24, 0x03	; 3
    1f70:	62 e0       	ldi	r22, 0x02	; 2
    1f72:	41 e0       	ldi	r20, 0x01	; 1
    1f74:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinDirection>
}
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <LCD_voidSendString>:

void LCD_voidSendString(u8* Copy_pu8String)
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <LCD_voidSendString+0x6>
    1f84:	0f 92       	push	r0
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	9b 83       	std	Y+3, r25	; 0x03
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 Local_u8Itterator = 0; Copy_pu8String[Local_u8Itterator] != '\0';++Local_u8Itterator)
    1f8e:	19 82       	std	Y+1, r1	; 0x01
    1f90:	0e c0       	rjmp	.+28     	; 0x1fae <LCD_voidSendString+0x30>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8Itterator]);
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	e2 0f       	add	r30, r18
    1fa0:	f3 1f       	adc	r31, r19
    1fa2:	80 81       	ld	r24, Z
    1fa4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
}

void LCD_voidSendString(u8* Copy_pu8String)
{
	for(u8 Local_u8Itterator = 0; Copy_pu8String[Local_u8Itterator] != '\0';++Local_u8Itterator)
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	8f 5f       	subi	r24, 0xFF	; 255
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	fc 01       	movw	r30, r24
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	80 81       	ld	r24, Z
    1fc0:	88 23       	and	r24, r24
    1fc2:	39 f7       	brne	.-50     	; 0x1f92 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8Itterator]);
	}
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	60 97       	sbiw	r28, 0x10	; 16
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	6d 87       	std	Y+13, r22	; 0x0d
    1fe6:	7e 87       	std	Y+14, r23	; 0x0e
    1fe8:	8f 87       	std	Y+15, r24	; 0x0f
    1fea:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8DigitOrder = 0;
    1fec:	1c 86       	std	Y+12, r1	; 0x0c
	u32 Local_u32NumberCopy = Copy_u32Number;
    1fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff2:	af 85       	ldd	r26, Y+15	; 0x0f
    1ff4:	b8 89       	ldd	r27, Y+16	; 0x10
    1ff6:	88 87       	std	Y+8, r24	; 0x08
    1ff8:	99 87       	std	Y+9, r25	; 0x09
    1ffa:	aa 87       	std	Y+10, r26	; 0x0a
    1ffc:	bb 87       	std	Y+11, r27	; 0x0b
	u32 Local_u32TenthOrder = 10;
    1ffe:	8a e0       	ldi	r24, 0x0A	; 10
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a0 e0       	ldi	r26, 0x00	; 0
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	8c 83       	std	Y+4, r24	; 0x04
    2008:	9d 83       	std	Y+5, r25	; 0x05
    200a:	ae 83       	std	Y+6, r26	; 0x06
    200c:	bf 83       	std	Y+7, r27	; 0x07

	//test if number is less than 9;
	if(Copy_u32Number<=9)
    200e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2010:	9e 85       	ldd	r25, Y+14	; 0x0e
    2012:	af 85       	ldd	r26, Y+15	; 0x0f
    2014:	b8 89       	ldd	r27, Y+16	; 0x10
    2016:	8a 30       	cpi	r24, 0x0A	; 10
    2018:	91 05       	cpc	r25, r1
    201a:	a1 05       	cpc	r26, r1
    201c:	b1 05       	cpc	r27, r1
    201e:	d0 f4       	brcc	.+52     	; 0x2054 <LCD_voidSendNumber+0x84>
	{
		LCD_voidSendData(Copy_u32Number+'0');
    2020:	8d 85       	ldd	r24, Y+13	; 0x0d
    2022:	80 5d       	subi	r24, 0xD0	; 208
    2024:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    2028:	7f c0       	rjmp	.+254    	; 0x2128 <LCD_voidSendNumber+0x158>
	}
	else
	{
		while(Local_u32NumberCopy !=0)
		{
			Local_u8DigitOrder++;
    202a:	8c 85       	ldd	r24, Y+12	; 0x0c
    202c:	8f 5f       	subi	r24, 0xFF	; 255
    202e:	8c 87       	std	Y+12, r24	; 0x0c
			Local_u32NumberCopy/=Local_u32TenthOrder;
    2030:	88 85       	ldd	r24, Y+8	; 0x08
    2032:	99 85       	ldd	r25, Y+9	; 0x09
    2034:	aa 85       	ldd	r26, Y+10	; 0x0a
    2036:	bb 85       	ldd	r27, Y+11	; 0x0b
    2038:	2c 81       	ldd	r18, Y+4	; 0x04
    203a:	3d 81       	ldd	r19, Y+5	; 0x05
    203c:	4e 81       	ldd	r20, Y+6	; 0x06
    203e:	5f 81       	ldd	r21, Y+7	; 0x07
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodsi4>
    2048:	da 01       	movw	r26, r20
    204a:	c9 01       	movw	r24, r18
    204c:	88 87       	std	Y+8, r24	; 0x08
    204e:	99 87       	std	Y+9, r25	; 0x09
    2050:	aa 87       	std	Y+10, r26	; 0x0a
    2052:	bb 87       	std	Y+11, r27	; 0x0b
	{
		LCD_voidSendData(Copy_u32Number+'0');
	}
	else
	{
		while(Local_u32NumberCopy !=0)
    2054:	88 85       	ldd	r24, Y+8	; 0x08
    2056:	99 85       	ldd	r25, Y+9	; 0x09
    2058:	aa 85       	ldd	r26, Y+10	; 0x0a
    205a:	bb 85       	ldd	r27, Y+11	; 0x0b
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	a1 05       	cpc	r26, r1
    2060:	b1 05       	cpc	r27, r1
    2062:	19 f7       	brne	.-58     	; 0x202a <LCD_voidSendNumber+0x5a>
			Local_u8DigitOrder++;
			Local_u32NumberCopy/=Local_u32TenthOrder;
		}

		//Digit order has number of digits in the number
		Local_u32NumberCopy = Copy_u32Number;
    2064:	8d 85       	ldd	r24, Y+13	; 0x0d
    2066:	9e 85       	ldd	r25, Y+14	; 0x0e
    2068:	af 85       	ldd	r26, Y+15	; 0x0f
    206a:	b8 89       	ldd	r27, Y+16	; 0x10
    206c:	88 87       	std	Y+8, r24	; 0x08
    206e:	99 87       	std	Y+9, r25	; 0x09
    2070:	aa 87       	std	Y+10, r26	; 0x0a
    2072:	bb 87       	std	Y+11, r27	; 0x0b
    2074:	55 c0       	rjmp	.+170    	; 0x2120 <LCD_voidSendNumber+0x150>
		LCD_voidSendData(' ');
		*/

		while(Local_u8DigitOrder !=0)
		{
			Local_u32TenthOrder = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a0 e0       	ldi	r26, 0x00	; 0
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	8c 83       	std	Y+4, r24	; 0x04
    2080:	9d 83       	std	Y+5, r25	; 0x05
    2082:	ae 83       	std	Y+6, r26	; 0x06
    2084:	bf 83       	std	Y+7, r27	; 0x07
			for(int i =0; i<Local_u8DigitOrder-1;i++)
    2086:	1a 82       	std	Y+2, r1	; 0x02
    2088:	19 82       	std	Y+1, r1	; 0x01
    208a:	17 c0       	rjmp	.+46     	; 0x20ba <LCD_voidSendNumber+0xea>
			{
				Local_u32TenthOrder *=10;
    208c:	8c 81       	ldd	r24, Y+4	; 0x04
    208e:	9d 81       	ldd	r25, Y+5	; 0x05
    2090:	ae 81       	ldd	r26, Y+6	; 0x06
    2092:	bf 81       	ldd	r27, Y+7	; 0x07
    2094:	2a e0       	ldi	r18, 0x0A	; 10
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	50 e0       	ldi	r21, 0x00	; 0
    209c:	bc 01       	movw	r22, r24
    209e:	cd 01       	movw	r24, r26
    20a0:	0e 94 dd 13 	call	0x27ba	; 0x27ba <__mulsi3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8c 83       	std	Y+4, r24	; 0x04
    20aa:	9d 83       	std	Y+5, r25	; 0x05
    20ac:	ae 83       	std	Y+6, r26	; 0x06
    20ae:	bf 83       	std	Y+7, r27	; 0x07
		*/

		while(Local_u8DigitOrder !=0)
		{
			Local_u32TenthOrder = 1;
			for(int i =0; i<Local_u8DigitOrder-1;i++)
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	9a 83       	std	Y+2, r25	; 0x02
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9c 01       	movw	r18, r24
    20c2:	21 50       	subi	r18, 0x01	; 1
    20c4:	30 40       	sbci	r19, 0x00	; 0
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	82 17       	cp	r24, r18
    20cc:	93 07       	cpc	r25, r19
    20ce:	f4 f2       	brlt	.-68     	; 0x208c <LCD_voidSendNumber+0xbc>
			{
				Local_u32TenthOrder *=10;
			}
			u8 Local_u8Num = Local_u32NumberCopy/Local_u32TenthOrder;
    20d0:	88 85       	ldd	r24, Y+8	; 0x08
    20d2:	99 85       	ldd	r25, Y+9	; 0x09
    20d4:	aa 85       	ldd	r26, Y+10	; 0x0a
    20d6:	bb 85       	ldd	r27, Y+11	; 0x0b
    20d8:	2c 81       	ldd	r18, Y+4	; 0x04
    20da:	3d 81       	ldd	r19, Y+5	; 0x05
    20dc:	4e 81       	ldd	r20, Y+6	; 0x06
    20de:	5f 81       	ldd	r21, Y+7	; 0x07
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodsi4>
    20e8:	da 01       	movw	r26, r20
    20ea:	c9 01       	movw	r24, r18
    20ec:	8b 83       	std	Y+3, r24	; 0x03
			LCD_voidSendData(Local_u8Num+'0');
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	80 5d       	subi	r24, 0xD0	; 208
    20f2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
			Local_u32NumberCopy = Local_u32NumberCopy%Local_u32TenthOrder;
    20f6:	88 85       	ldd	r24, Y+8	; 0x08
    20f8:	99 85       	ldd	r25, Y+9	; 0x09
    20fa:	aa 85       	ldd	r26, Y+10	; 0x0a
    20fc:	bb 85       	ldd	r27, Y+11	; 0x0b
    20fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2100:	3d 81       	ldd	r19, Y+5	; 0x05
    2102:	4e 81       	ldd	r20, Y+6	; 0x06
    2104:	5f 81       	ldd	r21, Y+7	; 0x07
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 28 14 	call	0x2850	; 0x2850 <__udivmodsi4>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	88 87       	std	Y+8, r24	; 0x08
    2114:	99 87       	std	Y+9, r25	; 0x09
    2116:	aa 87       	std	Y+10, r26	; 0x0a
    2118:	bb 87       	std	Y+11, r27	; 0x0b
			Local_u8DigitOrder--;
    211a:	8c 85       	ldd	r24, Y+12	; 0x0c
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	8c 87       	std	Y+12, r24	; 0x0c
		/*debug
		LCD_voidSendData(Local_u8DigitOrder+'0');
		LCD_voidSendData(' ');
		*/

		while(Local_u8DigitOrder !=0)
    2120:	8c 85       	ldd	r24, Y+12	; 0x0c
    2122:	88 23       	and	r24, r24
    2124:	09 f0       	breq	.+2      	; 0x2128 <LCD_voidSendNumber+0x158>
    2126:	a7 cf       	rjmp	.-178    	; 0x2076 <LCD_voidSendNumber+0xa6>
			LCD_voidSendData(Local_u8Num+'0');
			Local_u32NumberCopy = Local_u32NumberCopy%Local_u32TenthOrder;
			Local_u8DigitOrder--;
		}
	}
}
    2128:	60 96       	adiw	r28, 0x10	; 16
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8X, u8 Copy_u8Y)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <LCD_voidGoToXY+0x6>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidSendCommand(128 + Copy_u8X+(0x40*Copy_u8Y));
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	00 24       	eor	r0, r0
    2150:	96 95       	lsr	r25
    2152:	87 95       	ror	r24
    2154:	07 94       	ror	r0
    2156:	96 95       	lsr	r25
    2158:	87 95       	ror	r24
    215a:	07 94       	ror	r0
    215c:	98 2f       	mov	r25, r24
    215e:	80 2d       	mov	r24, r0
    2160:	98 2f       	mov	r25, r24
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	89 0f       	add	r24, r25
    2166:	80 58       	subi	r24, 0x80	; 128
    2168:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_voidSendCommand>

}
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <LCD_voidSendSpecialCharacter>:

void LCD_voidSendSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternSlot ,u8 Copy_u8X, u8 Copy_u8Y)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	27 97       	sbiw	r28, 0x07	; 7
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	9c 83       	std	Y+4, r25	; 0x04
    218c:	8b 83       	std	Y+3, r24	; 0x03
    218e:	6d 83       	std	Y+5, r22	; 0x05
    2190:	4e 83       	std	Y+6, r20	; 0x06
    2192:	2f 83       	std	Y+7, r18	; 0x07
	//calculate addr of pattern in CGROM and set LCD addr counter to it
	u8 Local_u8CGRAMAddress = Copy_u8PatternSlot*8;
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(64+Local_u8CGRAMAddress);
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	80 5c       	subi	r24, 0xC0	; 192
    21ac:	0e 94 85 0c 	call	0x190a	; 0x190a <LCD_voidSendCommand>

	//print byte by byte of pattern
	for(u8 Local_u8Itterator=0;Local_u8Itterator<8;Local_u8Itterator++)
    21b0:	19 82       	std	Y+1, r1	; 0x01
    21b2:	0e c0       	rjmp	.+28     	; 0x21d0 <LCD_voidSendSpecialCharacter+0x5a>
	{
		LCD_voidSendData(Copy_pu8Pattern[Local_u8Itterator]);
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	fc 01       	movw	r30, r24
    21c0:	e2 0f       	add	r30, r18
    21c2:	f3 1f       	adc	r31, r19
    21c4:	80 81       	ld	r24, Z
    21c6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
	//calculate addr of pattern in CGROM and set LCD addr counter to it
	u8 Local_u8CGRAMAddress = Copy_u8PatternSlot*8;
	LCD_voidSendCommand(64+Local_u8CGRAMAddress);

	//print byte by byte of pattern
	for(u8 Local_u8Itterator=0;Local_u8Itterator<8;Local_u8Itterator++)
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	8f 5f       	subi	r24, 0xFF	; 255
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	88 30       	cpi	r24, 0x08	; 8
    21d4:	78 f3       	brcs	.-34     	; 0x21b4 <LCD_voidSendSpecialCharacter+0x3e>
	{
		LCD_voidSendData(Copy_pu8Pattern[Local_u8Itterator]);
	}

	//set DDRAM location
	LCD_voidGoToXY(Copy_u8X,Copy_u8Y);
    21d6:	8e 81       	ldd	r24, Y+6	; 0x06
    21d8:	6f 81       	ldd	r22, Y+7	; 0x07
    21da:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoToXY>

	LCD_voidSendData(Copy_u8PatternSlot);
    21de:	8d 81       	ldd	r24, Y+5	; 0x05
    21e0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
}
    21e4:	27 96       	adiw	r28, 0x07	; 7
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <LCD_voidClearSymbolAtXY>:

void LCD_voidClearSymbolAtXY(u8 Copy_u8X, u8 Copy_u8Y)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <LCD_voidClearSymbolAtXY+0x6>
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToXY(Copy_u8X,Copy_u8Y);
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	6a 81       	ldd	r22, Y+2	; 0x02
    2208:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoToXY>
	LCD_voidSendData(0b00100000); //draw nothing
    220c:	80 e2       	ldi	r24, 0x20	; 32
    220e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
}
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <drawArrow>:
#include "BIT_MATH.h"
#include "LCD_Interface.h"
#include "calculator.h"

void drawArrow(u8 Copy_u8CurrPos,u8 Copy_u8OldPos)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	00 d0       	rcall	.+0      	; 0x2222 <drawArrow+0x6>
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidClearSymbolAtXY(Copy_u8OldPos,1); //delete old arrow
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <LCD_voidClearSymbolAtXY>
	//set cursor pos
	LCD_voidGoToXY(Copy_u8CurrPos,1);
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoToXY>
	LCD_voidSendData(0b01011110); //print arrow
    223a:	8e e5       	ldi	r24, 0x5E	; 94
    223c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
}
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <cycleNumbers>:


void cycleNumbers(u8 Copy_u8CurrPos, u8 Copy_u8NumberIndex)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	00 d0       	rcall	.+0      	; 0x2250 <cycleNumbers+0x6>
    2250:	00 d0       	rcall	.+0      	; 0x2252 <cycleNumbers+0x8>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToXY(Copy_u8CurrPos,0);
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoToXY>
	switch(Copy_u8NumberIndex)
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	3c 83       	std	Y+4, r19	; 0x04
    226a:	2b 83       	std	Y+3, r18	; 0x03
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	84 30       	cpi	r24, 0x04	; 4
    2272:	91 05       	cpc	r25, r1
    2274:	09 f4       	brne	.+2      	; 0x2278 <cycleNumbers+0x2e>
    2276:	4f c0       	rjmp	.+158    	; 0x2316 <cycleNumbers+0xcc>
    2278:	2b 81       	ldd	r18, Y+3	; 0x03
    227a:	3c 81       	ldd	r19, Y+4	; 0x04
    227c:	25 30       	cpi	r18, 0x05	; 5
    227e:	31 05       	cpc	r19, r1
    2280:	d4 f4       	brge	.+52     	; 0x22b6 <cycleNumbers+0x6c>
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	81 30       	cpi	r24, 0x01	; 1
    2288:	91 05       	cpc	r25, r1
    228a:	c9 f1       	breq	.+114    	; 0x22fe <cycleNumbers+0xb4>
    228c:	2b 81       	ldd	r18, Y+3	; 0x03
    228e:	3c 81       	ldd	r19, Y+4	; 0x04
    2290:	22 30       	cpi	r18, 0x02	; 2
    2292:	31 05       	cpc	r19, r1
    2294:	2c f4       	brge	.+10     	; 0x22a0 <cycleNumbers+0x56>
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	9c 81       	ldd	r25, Y+4	; 0x04
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	61 f1       	breq	.+88     	; 0x22f6 <cycleNumbers+0xac>
    229e:	52 c0       	rjmp	.+164    	; 0x2344 <cycleNumbers+0xfa>
    22a0:	2b 81       	ldd	r18, Y+3	; 0x03
    22a2:	3c 81       	ldd	r19, Y+4	; 0x04
    22a4:	22 30       	cpi	r18, 0x02	; 2
    22a6:	31 05       	cpc	r19, r1
    22a8:	71 f1       	breq	.+92     	; 0x2306 <cycleNumbers+0xbc>
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	83 30       	cpi	r24, 0x03	; 3
    22b0:	91 05       	cpc	r25, r1
    22b2:	69 f1       	breq	.+90     	; 0x230e <cycleNumbers+0xc4>
    22b4:	47 c0       	rjmp	.+142    	; 0x2344 <cycleNumbers+0xfa>
    22b6:	2b 81       	ldd	r18, Y+3	; 0x03
    22b8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ba:	27 30       	cpi	r18, 0x07	; 7
    22bc:	31 05       	cpc	r19, r1
    22be:	b9 f1       	breq	.+110    	; 0x232e <cycleNumbers+0xe4>
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	9c 81       	ldd	r25, Y+4	; 0x04
    22c4:	88 30       	cpi	r24, 0x08	; 8
    22c6:	91 05       	cpc	r25, r1
    22c8:	5c f4       	brge	.+22     	; 0x22e0 <cycleNumbers+0x96>
    22ca:	2b 81       	ldd	r18, Y+3	; 0x03
    22cc:	3c 81       	ldd	r19, Y+4	; 0x04
    22ce:	25 30       	cpi	r18, 0x05	; 5
    22d0:	31 05       	cpc	r19, r1
    22d2:	29 f1       	breq	.+74     	; 0x231e <cycleNumbers+0xd4>
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	86 30       	cpi	r24, 0x06	; 6
    22da:	91 05       	cpc	r25, r1
    22dc:	21 f1       	breq	.+72     	; 0x2326 <cycleNumbers+0xdc>
    22de:	32 c0       	rjmp	.+100    	; 0x2344 <cycleNumbers+0xfa>
    22e0:	2b 81       	ldd	r18, Y+3	; 0x03
    22e2:	3c 81       	ldd	r19, Y+4	; 0x04
    22e4:	28 30       	cpi	r18, 0x08	; 8
    22e6:	31 05       	cpc	r19, r1
    22e8:	31 f1       	breq	.+76     	; 0x2336 <cycleNumbers+0xec>
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	89 30       	cpi	r24, 0x09	; 9
    22f0:	91 05       	cpc	r25, r1
    22f2:	29 f1       	breq	.+74     	; 0x233e <cycleNumbers+0xf4>
    22f4:	27 c0       	rjmp	.+78     	; 0x2344 <cycleNumbers+0xfa>
	{
	case CALCULATOR_ZERO:
		LCD_voidSendData('0');
    22f6:	80 e3       	ldi	r24, 0x30	; 48
    22f8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    22fc:	23 c0       	rjmp	.+70     	; 0x2344 <cycleNumbers+0xfa>
		break;
	case CALCULATOR_ONE:
			LCD_voidSendData('1');
    22fe:	81 e3       	ldi	r24, 0x31	; 49
    2300:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    2304:	1f c0       	rjmp	.+62     	; 0x2344 <cycleNumbers+0xfa>
			break;
	case CALCULATOR_TWO:
			LCD_voidSendData('2');
    2306:	82 e3       	ldi	r24, 0x32	; 50
    2308:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    230c:	1b c0       	rjmp	.+54     	; 0x2344 <cycleNumbers+0xfa>
			break;
	case CALCULATOR_THREE:
			LCD_voidSendData('3');
    230e:	83 e3       	ldi	r24, 0x33	; 51
    2310:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    2314:	17 c0       	rjmp	.+46     	; 0x2344 <cycleNumbers+0xfa>
			break;
	case CALCULATOR_FOUR:
			LCD_voidSendData('4');
    2316:	84 e3       	ldi	r24, 0x34	; 52
    2318:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    231c:	13 c0       	rjmp	.+38     	; 0x2344 <cycleNumbers+0xfa>
			break;
	case CALCULATOR_FIVE:
			LCD_voidSendData('5');
    231e:	85 e3       	ldi	r24, 0x35	; 53
    2320:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    2324:	0f c0       	rjmp	.+30     	; 0x2344 <cycleNumbers+0xfa>
			break;
	case CALCULATOR_SIX:
			LCD_voidSendData('6');
    2326:	86 e3       	ldi	r24, 0x36	; 54
    2328:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    232c:	0b c0       	rjmp	.+22     	; 0x2344 <cycleNumbers+0xfa>
			break;
	case CALCULATOR_SEVEN:
			LCD_voidSendData('7');
    232e:	87 e3       	ldi	r24, 0x37	; 55
    2330:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    2334:	07 c0       	rjmp	.+14     	; 0x2344 <cycleNumbers+0xfa>
			break;
	case CALCULATOR_EIGHT:
			LCD_voidSendData('8');
    2336:	88 e3       	ldi	r24, 0x38	; 56
    2338:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    233c:	03 c0       	rjmp	.+6      	; 0x2344 <cycleNumbers+0xfa>
			break;
	case CALCULATOR_NINE:
			LCD_voidSendData('9');
    233e:	89 e3       	ldi	r24, 0x39	; 57
    2340:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
			break;
	}
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <cycleOperators>:


void cycleOperators(u8 Copy_u8CurrPos, u8 Copy_u8OperatorIndex)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	00 d0       	rcall	.+0      	; 0x2358 <cycleOperators+0x6>
    2358:	00 d0       	rcall	.+0      	; 0x235a <cycleOperators+0x8>
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToXY(Copy_u8CurrPos,0);
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoToXY>
	switch(Copy_u8OperatorIndex)
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	3c 83       	std	Y+4, r19	; 0x04
    2372:	2b 83       	std	Y+3, r18	; 0x03
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	82 30       	cpi	r24, 0x02	; 2
    237a:	91 05       	cpc	r25, r1
    237c:	11 f1       	breq	.+68     	; 0x23c2 <cycleOperators+0x70>
    237e:	2b 81       	ldd	r18, Y+3	; 0x03
    2380:	3c 81       	ldd	r19, Y+4	; 0x04
    2382:	23 30       	cpi	r18, 0x03	; 3
    2384:	31 05       	cpc	r19, r1
    2386:	54 f4       	brge	.+20     	; 0x239c <cycleOperators+0x4a>
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	9c 81       	ldd	r25, Y+4	; 0x04
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	89 f0       	breq	.+34     	; 0x23b2 <cycleOperators+0x60>
    2390:	2b 81       	ldd	r18, Y+3	; 0x03
    2392:	3c 81       	ldd	r19, Y+4	; 0x04
    2394:	21 30       	cpi	r18, 0x01	; 1
    2396:	31 05       	cpc	r19, r1
    2398:	81 f0       	breq	.+32     	; 0x23ba <cycleOperators+0x68>
    239a:	1e c0       	rjmp	.+60     	; 0x23d8 <cycleOperators+0x86>
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	83 30       	cpi	r24, 0x03	; 3
    23a2:	91 05       	cpc	r25, r1
    23a4:	91 f0       	breq	.+36     	; 0x23ca <cycleOperators+0x78>
    23a6:	2b 81       	ldd	r18, Y+3	; 0x03
    23a8:	3c 81       	ldd	r19, Y+4	; 0x04
    23aa:	24 30       	cpi	r18, 0x04	; 4
    23ac:	31 05       	cpc	r19, r1
    23ae:	89 f0       	breq	.+34     	; 0x23d2 <cycleOperators+0x80>
    23b0:	13 c0       	rjmp	.+38     	; 0x23d8 <cycleOperators+0x86>
	{
	case CALCULATOR_ADD:
		LCD_voidSendData('+');
    23b2:	8b e2       	ldi	r24, 0x2B	; 43
    23b4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    23b8:	0f c0       	rjmp	.+30     	; 0x23d8 <cycleOperators+0x86>
		break;
	case CALCULATOR_SUB:
			LCD_voidSendData('-');
    23ba:	8d e2       	ldi	r24, 0x2D	; 45
    23bc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    23c0:	0b c0       	rjmp	.+22     	; 0x23d8 <cycleOperators+0x86>
			break;
	case CALCULATOR_MUL:
			LCD_voidSendData('*');
    23c2:	8a e2       	ldi	r24, 0x2A	; 42
    23c4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    23c8:	07 c0       	rjmp	.+14     	; 0x23d8 <cycleOperators+0x86>
			break;
	case CALCULATOR_DIV:
			LCD_voidSendData('/');
    23ca:	8f e2       	ldi	r24, 0x2F	; 47
    23cc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    23d0:	03 c0       	rjmp	.+6      	; 0x23d8 <cycleOperators+0x86>
			break;
	case CALCULATOR_REM:
			LCD_voidSendData('%');
    23d2:	85 e2       	ldi	r24, 0x25	; 37
    23d4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
			break;
		}
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <calculatePrint>:


void calculatePrint(struct CalculatorData* pcalculatorData)
{
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <calculatePrint+0x6>
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <calculatePrint+0x8>
    23ee:	0f 92       	push	r0
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	9b 83       	std	Y+3, r25	; 0x03
    23f6:	8a 83       	std	Y+2, r24	; 0x02
	s8 Local_s8Result;

	switch(pcalculatorData->operator)
    23f8:	ea 81       	ldd	r30, Y+2	; 0x02
    23fa:	fb 81       	ldd	r31, Y+3	; 0x03
    23fc:	83 81       	ldd	r24, Z+3	; 0x03
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	3d 83       	std	Y+5, r19	; 0x05
    2404:	2c 83       	std	Y+4, r18	; 0x04
    2406:	8c 81       	ldd	r24, Y+4	; 0x04
    2408:	9d 81       	ldd	r25, Y+5	; 0x05
    240a:	82 30       	cpi	r24, 0x02	; 2
    240c:	91 05       	cpc	r25, r1
    240e:	71 f1       	breq	.+92     	; 0x246c <calculatePrint+0x86>
    2410:	2c 81       	ldd	r18, Y+4	; 0x04
    2412:	3d 81       	ldd	r19, Y+5	; 0x05
    2414:	23 30       	cpi	r18, 0x03	; 3
    2416:	31 05       	cpc	r19, r1
    2418:	54 f4       	brge	.+20     	; 0x242e <calculatePrint+0x48>
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	89 f0       	breq	.+34     	; 0x2444 <calculatePrint+0x5e>
    2422:	2c 81       	ldd	r18, Y+4	; 0x04
    2424:	3d 81       	ldd	r19, Y+5	; 0x05
    2426:	21 30       	cpi	r18, 0x01	; 1
    2428:	31 05       	cpc	r19, r1
    242a:	a9 f0       	breq	.+42     	; 0x2456 <calculatePrint+0x70>
    242c:	40 c0       	rjmp	.+128    	; 0x24ae <calculatePrint+0xc8>
    242e:	8c 81       	ldd	r24, Y+4	; 0x04
    2430:	9d 81       	ldd	r25, Y+5	; 0x05
    2432:	83 30       	cpi	r24, 0x03	; 3
    2434:	91 05       	cpc	r25, r1
    2436:	29 f1       	breq	.+74     	; 0x2482 <calculatePrint+0x9c>
    2438:	2c 81       	ldd	r18, Y+4	; 0x04
    243a:	3d 81       	ldd	r19, Y+5	; 0x05
    243c:	24 30       	cpi	r18, 0x04	; 4
    243e:	31 05       	cpc	r19, r1
    2440:	59 f1       	breq	.+86     	; 0x2498 <calculatePrint+0xb2>
    2442:	35 c0       	rjmp	.+106    	; 0x24ae <calculatePrint+0xc8>
	{
	case CALCULATOR_ADD:
		Local_s8Result = pcalculatorData->number1+pcalculatorData->number2;
    2444:	ea 81       	ldd	r30, Y+2	; 0x02
    2446:	fb 81       	ldd	r31, Y+3	; 0x03
    2448:	91 81       	ldd	r25, Z+1	; 0x01
    244a:	ea 81       	ldd	r30, Y+2	; 0x02
    244c:	fb 81       	ldd	r31, Y+3	; 0x03
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	89 0f       	add	r24, r25
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	2c c0       	rjmp	.+88     	; 0x24ae <calculatePrint+0xc8>
		break;
	case CALCULATOR_SUB:
		Local_s8Result = pcalculatorData->number1-pcalculatorData->number2;
    2456:	ea 81       	ldd	r30, Y+2	; 0x02
    2458:	fb 81       	ldd	r31, Y+3	; 0x03
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	ea 81       	ldd	r30, Y+2	; 0x02
    245e:	fb 81       	ldd	r31, Y+3	; 0x03
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	39 2f       	mov	r19, r25
    2464:	38 1b       	sub	r19, r24
    2466:	83 2f       	mov	r24, r19
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	21 c0       	rjmp	.+66     	; 0x24ae <calculatePrint+0xc8>
			break;
	case CALCULATOR_MUL:
		Local_s8Result = pcalculatorData->number1*pcalculatorData->number2;
    246c:	ea 81       	ldd	r30, Y+2	; 0x02
    246e:	fb 81       	ldd	r31, Y+3	; 0x03
    2470:	91 81       	ldd	r25, Z+1	; 0x01
    2472:	ea 81       	ldd	r30, Y+2	; 0x02
    2474:	fb 81       	ldd	r31, Y+3	; 0x03
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	98 9f       	mul	r25, r24
    247a:	80 2d       	mov	r24, r0
    247c:	11 24       	eor	r1, r1
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	16 c0       	rjmp	.+44     	; 0x24ae <calculatePrint+0xc8>
			break;
	case CALCULATOR_DIV:
		Local_s8Result = pcalculatorData->number1/pcalculatorData->number2;
    2482:	ea 81       	ldd	r30, Y+2	; 0x02
    2484:	fb 81       	ldd	r31, Y+3	; 0x03
    2486:	81 81       	ldd	r24, Z+1	; 0x01
    2488:	ea 81       	ldd	r30, Y+2	; 0x02
    248a:	fb 81       	ldd	r31, Y+3	; 0x03
    248c:	92 81       	ldd	r25, Z+2	; 0x02
    248e:	69 2f       	mov	r22, r25
    2490:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__udivmodqi4>
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	0b c0       	rjmp	.+22     	; 0x24ae <calculatePrint+0xc8>
		break;
	case CALCULATOR_REM:
		Local_s8Result = pcalculatorData->number1%pcalculatorData->number2;
    2498:	ea 81       	ldd	r30, Y+2	; 0x02
    249a:	fb 81       	ldd	r31, Y+3	; 0x03
    249c:	81 81       	ldd	r24, Z+1	; 0x01
    249e:	ea 81       	ldd	r30, Y+2	; 0x02
    24a0:	fb 81       	ldd	r31, Y+3	; 0x03
    24a2:	92 81       	ldd	r25, Z+2	; 0x02
    24a4:	69 2f       	mov	r22, r25
    24a6:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <__udivmodqi4>
    24aa:	89 2f       	mov	r24, r25
    24ac:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	if(Local_s8Result>9)
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	8a 30       	cpi	r24, 0x0A	; 10
    24b2:	94 f0       	brlt	.+36     	; 0x24d8 <calculatePrint+0xf2>
	{
		LCD_voidSendData('0' + (Local_s8Result/10) );
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a e0       	ldi	r25, 0x0A	; 10
    24b8:	69 2f       	mov	r22, r25
    24ba:	0e 94 08 14 	call	0x2810	; 0x2810 <__divmodqi4>
    24be:	80 5d       	subi	r24, 0xD0	; 208
    24c0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
		LCD_voidSendData('0' + (Local_s8Result%10) );
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	9a e0       	ldi	r25, 0x0A	; 10
    24c8:	69 2f       	mov	r22, r25
    24ca:	0e 94 08 14 	call	0x2810	; 0x2810 <__divmodqi4>
    24ce:	89 2f       	mov	r24, r25
    24d0:	80 5d       	subi	r24, 0xD0	; 208
    24d2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
    24d6:	0a c0       	rjmp	.+20     	; 0x24ec <calculatePrint+0x106>
	}
	else
	{
		if(Local_s8Result<0)
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	88 23       	and	r24, r24
    24dc:	1c f4       	brge	.+6      	; 0x24e4 <calculatePrint+0xfe>
			LCD_voidSendData('-');
    24de:	8d e2       	ldi	r24, 0x2D	; 45
    24e0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>

		LCD_voidSendData('0'+Local_s8Result);
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	80 5d       	subi	r24, 0xD0	; 208
    24e8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <LCD_voidSendData>
	}

}
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <Calculator_voidCycleUpCallback>:

void Calculator_voidCycleUpCallback(struct CalculatorData* pcalculatorData)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	00 d0       	rcall	.+0      	; 0x2502 <Calculator_voidCycleUpCallback+0x6>
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01
	//determine determine operation based on pos
	if(pcalculatorData->currPosX == 0)
    250a:	e9 81       	ldd	r30, Y+1	; 0x01
    250c:	fa 81       	ldd	r31, Y+2	; 0x02
    250e:	80 81       	ld	r24, Z
    2510:	88 23       	and	r24, r24
    2512:	c1 f4       	brne	.+48     	; 0x2544 <Calculator_voidCycleUpCallback+0x48>
	{
		//1st number
		pcalculatorData->number1 = (pcalculatorData->number1+1)%10; //update number
    2514:	e9 81       	ldd	r30, Y+1	; 0x01
    2516:	fa 81       	ldd	r31, Y+2	; 0x02
    2518:	81 81       	ldd	r24, Z+1	; 0x01
    251a:	88 2f       	mov	r24, r24
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	01 96       	adiw	r24, 0x01	; 1
    2520:	2a e0       	ldi	r18, 0x0A	; 10
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	b9 01       	movw	r22, r18
    2526:	0e 94 15 14 	call	0x282a	; 0x282a <__divmodhi4>
    252a:	e9 81       	ldd	r30, Y+1	; 0x01
    252c:	fa 81       	ldd	r31, Y+2	; 0x02
    252e:	81 83       	std	Z+1, r24	; 0x01
		cycleNumbers(pcalculatorData->currPosX,pcalculatorData->number1);
    2530:	e9 81       	ldd	r30, Y+1	; 0x01
    2532:	fa 81       	ldd	r31, Y+2	; 0x02
    2534:	80 81       	ld	r24, Z
    2536:	e9 81       	ldd	r30, Y+1	; 0x01
    2538:	fa 81       	ldd	r31, Y+2	; 0x02
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	69 2f       	mov	r22, r25
    253e:	0e 94 25 11 	call	0x224a	; 0x224a <cycleNumbers>
    2542:	39 c0       	rjmp	.+114    	; 0x25b6 <Calculator_voidCycleUpCallback+0xba>

	}else if(pcalculatorData->currPosX == 1)
    2544:	e9 81       	ldd	r30, Y+1	; 0x01
    2546:	fa 81       	ldd	r31, Y+2	; 0x02
    2548:	80 81       	ld	r24, Z
    254a:	81 30       	cpi	r24, 0x01	; 1
    254c:	c1 f4       	brne	.+48     	; 0x257e <Calculator_voidCycleUpCallback+0x82>
	{
		//operator
		pcalculatorData->operator = (pcalculatorData->operator+1)%5; //update operator
    254e:	e9 81       	ldd	r30, Y+1	; 0x01
    2550:	fa 81       	ldd	r31, Y+2	; 0x02
    2552:	83 81       	ldd	r24, Z+3	; 0x03
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	25 e0       	ldi	r18, 0x05	; 5
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	b9 01       	movw	r22, r18
    2560:	0e 94 15 14 	call	0x282a	; 0x282a <__divmodhi4>
    2564:	e9 81       	ldd	r30, Y+1	; 0x01
    2566:	fa 81       	ldd	r31, Y+2	; 0x02
    2568:	83 83       	std	Z+3, r24	; 0x03
		cycleOperators(pcalculatorData->currPosX,pcalculatorData->operator);
    256a:	e9 81       	ldd	r30, Y+1	; 0x01
    256c:	fa 81       	ldd	r31, Y+2	; 0x02
    256e:	80 81       	ld	r24, Z
    2570:	e9 81       	ldd	r30, Y+1	; 0x01
    2572:	fa 81       	ldd	r31, Y+2	; 0x02
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	69 2f       	mov	r22, r25
    2578:	0e 94 a9 11 	call	0x2352	; 0x2352 <cycleOperators>
    257c:	1c c0       	rjmp	.+56     	; 0x25b6 <Calculator_voidCycleUpCallback+0xba>
	}
	else if(pcalculatorData->currPosX == 2)
    257e:	e9 81       	ldd	r30, Y+1	; 0x01
    2580:	fa 81       	ldd	r31, Y+2	; 0x02
    2582:	80 81       	ld	r24, Z
    2584:	82 30       	cpi	r24, 0x02	; 2
    2586:	b9 f4       	brne	.+46     	; 0x25b6 <Calculator_voidCycleUpCallback+0xba>
	{
		//2nd number
		pcalculatorData->number2 = (pcalculatorData->number2+1)%10; //update number
    2588:	e9 81       	ldd	r30, Y+1	; 0x01
    258a:	fa 81       	ldd	r31, Y+2	; 0x02
    258c:	82 81       	ldd	r24, Z+2	; 0x02
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	01 96       	adiw	r24, 0x01	; 1
    2594:	2a e0       	ldi	r18, 0x0A	; 10
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	b9 01       	movw	r22, r18
    259a:	0e 94 15 14 	call	0x282a	; 0x282a <__divmodhi4>
    259e:	e9 81       	ldd	r30, Y+1	; 0x01
    25a0:	fa 81       	ldd	r31, Y+2	; 0x02
    25a2:	82 83       	std	Z+2, r24	; 0x02
		cycleNumbers(pcalculatorData->currPosX,pcalculatorData->number2);
    25a4:	e9 81       	ldd	r30, Y+1	; 0x01
    25a6:	fa 81       	ldd	r31, Y+2	; 0x02
    25a8:	80 81       	ld	r24, Z
    25aa:	e9 81       	ldd	r30, Y+1	; 0x01
    25ac:	fa 81       	ldd	r31, Y+2	; 0x02
    25ae:	92 81       	ldd	r25, Z+2	; 0x02
    25b0:	69 2f       	mov	r22, r25
    25b2:	0e 94 25 11 	call	0x224a	; 0x224a <cycleNumbers>
	}
}
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <Calculator_voidCycledownCallback>:


void Calculator_voidCycledownCallback(struct CalculatorData* pcalculatorData)
{
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <Calculator_voidCycledownCallback+0x6>
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
	//determine determine operation based on pos
	if(pcalculatorData->currPosX == 0)
    25ce:	e9 81       	ldd	r30, Y+1	; 0x01
    25d0:	fa 81       	ldd	r31, Y+2	; 0x02
    25d2:	80 81       	ld	r24, Z
    25d4:	88 23       	and	r24, r24
    25d6:	c1 f4       	brne	.+48     	; 0x2608 <Calculator_voidCycledownCallback+0x48>
	{
		//1st number
		pcalculatorData->number1 = (pcalculatorData->number1-1)%10; //update number
    25d8:	e9 81       	ldd	r30, Y+1	; 0x01
    25da:	fa 81       	ldd	r31, Y+2	; 0x02
    25dc:	81 81       	ldd	r24, Z+1	; 0x01
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	2a e0       	ldi	r18, 0x0A	; 10
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	b9 01       	movw	r22, r18
    25ea:	0e 94 15 14 	call	0x282a	; 0x282a <__divmodhi4>
    25ee:	e9 81       	ldd	r30, Y+1	; 0x01
    25f0:	fa 81       	ldd	r31, Y+2	; 0x02
    25f2:	81 83       	std	Z+1, r24	; 0x01
		cycleNumbers(pcalculatorData->currPosX,pcalculatorData->number1);
    25f4:	e9 81       	ldd	r30, Y+1	; 0x01
    25f6:	fa 81       	ldd	r31, Y+2	; 0x02
    25f8:	80 81       	ld	r24, Z
    25fa:	e9 81       	ldd	r30, Y+1	; 0x01
    25fc:	fa 81       	ldd	r31, Y+2	; 0x02
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	69 2f       	mov	r22, r25
    2602:	0e 94 25 11 	call	0x224a	; 0x224a <cycleNumbers>
    2606:	39 c0       	rjmp	.+114    	; 0x267a <Calculator_voidCycledownCallback+0xba>

	}else if(pcalculatorData->currPosX == 1)
    2608:	e9 81       	ldd	r30, Y+1	; 0x01
    260a:	fa 81       	ldd	r31, Y+2	; 0x02
    260c:	80 81       	ld	r24, Z
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	c1 f4       	brne	.+48     	; 0x2642 <Calculator_voidCycledownCallback+0x82>
	{
		//operator
		pcalculatorData->operator = (pcalculatorData->operator-1)%5; //update operator
    2612:	e9 81       	ldd	r30, Y+1	; 0x01
    2614:	fa 81       	ldd	r31, Y+2	; 0x02
    2616:	83 81       	ldd	r24, Z+3	; 0x03
    2618:	88 2f       	mov	r24, r24
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	25 e0       	ldi	r18, 0x05	; 5
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	b9 01       	movw	r22, r18
    2624:	0e 94 15 14 	call	0x282a	; 0x282a <__divmodhi4>
    2628:	e9 81       	ldd	r30, Y+1	; 0x01
    262a:	fa 81       	ldd	r31, Y+2	; 0x02
    262c:	83 83       	std	Z+3, r24	; 0x03
		cycleOperators(pcalculatorData->currPosX,pcalculatorData->operator);
    262e:	e9 81       	ldd	r30, Y+1	; 0x01
    2630:	fa 81       	ldd	r31, Y+2	; 0x02
    2632:	80 81       	ld	r24, Z
    2634:	e9 81       	ldd	r30, Y+1	; 0x01
    2636:	fa 81       	ldd	r31, Y+2	; 0x02
    2638:	93 81       	ldd	r25, Z+3	; 0x03
    263a:	69 2f       	mov	r22, r25
    263c:	0e 94 a9 11 	call	0x2352	; 0x2352 <cycleOperators>
    2640:	1c c0       	rjmp	.+56     	; 0x267a <Calculator_voidCycledownCallback+0xba>
	}
	else if(pcalculatorData->currPosX == 2)
    2642:	e9 81       	ldd	r30, Y+1	; 0x01
    2644:	fa 81       	ldd	r31, Y+2	; 0x02
    2646:	80 81       	ld	r24, Z
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	b9 f4       	brne	.+46     	; 0x267a <Calculator_voidCycledownCallback+0xba>
	{
		////2nd number
		pcalculatorData->number2 = (pcalculatorData->number2-1)%10; //update number
    264c:	e9 81       	ldd	r30, Y+1	; 0x01
    264e:	fa 81       	ldd	r31, Y+2	; 0x02
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	88 2f       	mov	r24, r24
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	2a e0       	ldi	r18, 0x0A	; 10
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	b9 01       	movw	r22, r18
    265e:	0e 94 15 14 	call	0x282a	; 0x282a <__divmodhi4>
    2662:	e9 81       	ldd	r30, Y+1	; 0x01
    2664:	fa 81       	ldd	r31, Y+2	; 0x02
    2666:	82 83       	std	Z+2, r24	; 0x02
		cycleNumbers(pcalculatorData->currPosX,pcalculatorData->number2);
    2668:	e9 81       	ldd	r30, Y+1	; 0x01
    266a:	fa 81       	ldd	r31, Y+2	; 0x02
    266c:	80 81       	ld	r24, Z
    266e:	e9 81       	ldd	r30, Y+1	; 0x01
    2670:	fa 81       	ldd	r31, Y+2	; 0x02
    2672:	92 81       	ldd	r25, Z+2	; 0x02
    2674:	69 2f       	mov	r22, r25
    2676:	0e 94 25 11 	call	0x224a	; 0x224a <cycleNumbers>
	}
}
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	08 95       	ret

00002684 <Calculator_voidConfirmCallback>:


void Calculator_voidConfirmCallback(struct CalculatorData* pcalculatorData)
{
    2684:	df 93       	push	r29
    2686:	cf 93       	push	r28
    2688:	00 d0       	rcall	.+0      	; 0x268a <Calculator_voidConfirmCallback+0x6>
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01
	//determine operation based on pos
	if(pcalculatorData->currPosX == 0)
    2692:	e9 81       	ldd	r30, Y+1	; 0x01
    2694:	fa 81       	ldd	r31, Y+2	; 0x02
    2696:	80 81       	ld	r24, Z
    2698:	88 23       	and	r24, r24
    269a:	a1 f4       	brne	.+40     	; 0x26c4 <Calculator_voidConfirmCallback+0x40>
	{
		//advance from 1st num to operator
		pcalculatorData->currPosX++;
    269c:	e9 81       	ldd	r30, Y+1	; 0x01
    269e:	fa 81       	ldd	r31, Y+2	; 0x02
    26a0:	80 81       	ld	r24, Z
    26a2:	8f 5f       	subi	r24, 0xFF	; 255
    26a4:	e9 81       	ldd	r30, Y+1	; 0x01
    26a6:	fa 81       	ldd	r31, Y+2	; 0x02
    26a8:	80 83       	st	Z, r24
		drawArrow(pcalculatorData->currPosX,pcalculatorData->currPosX-1); //advance arrow
    26aa:	e9 81       	ldd	r30, Y+1	; 0x01
    26ac:	fa 81       	ldd	r31, Y+2	; 0x02
    26ae:	20 81       	ld	r18, Z
    26b0:	e9 81       	ldd	r30, Y+1	; 0x01
    26b2:	fa 81       	ldd	r31, Y+2	; 0x02
    26b4:	80 81       	ld	r24, Z
    26b6:	98 2f       	mov	r25, r24
    26b8:	91 50       	subi	r25, 0x01	; 1
    26ba:	82 2f       	mov	r24, r18
    26bc:	69 2f       	mov	r22, r25
    26be:	0e 94 0e 11 	call	0x221c	; 0x221c <drawArrow>
    26c2:	35 c0       	rjmp	.+106    	; 0x272e <Calculator_voidConfirmCallback+0xaa>

	}else if(pcalculatorData->currPosX == 1)
    26c4:	e9 81       	ldd	r30, Y+1	; 0x01
    26c6:	fa 81       	ldd	r31, Y+2	; 0x02
    26c8:	80 81       	ld	r24, Z
    26ca:	81 30       	cpi	r24, 0x01	; 1
    26cc:	a1 f4       	brne	.+40     	; 0x26f6 <Calculator_voidConfirmCallback+0x72>
	{
		//advance from operator to 2nd num
		pcalculatorData->currPosX++;
    26ce:	e9 81       	ldd	r30, Y+1	; 0x01
    26d0:	fa 81       	ldd	r31, Y+2	; 0x02
    26d2:	80 81       	ld	r24, Z
    26d4:	8f 5f       	subi	r24, 0xFF	; 255
    26d6:	e9 81       	ldd	r30, Y+1	; 0x01
    26d8:	fa 81       	ldd	r31, Y+2	; 0x02
    26da:	80 83       	st	Z, r24
		drawArrow(pcalculatorData->currPosX,pcalculatorData->currPosX-1); //advance arrow
    26dc:	e9 81       	ldd	r30, Y+1	; 0x01
    26de:	fa 81       	ldd	r31, Y+2	; 0x02
    26e0:	20 81       	ld	r18, Z
    26e2:	e9 81       	ldd	r30, Y+1	; 0x01
    26e4:	fa 81       	ldd	r31, Y+2	; 0x02
    26e6:	80 81       	ld	r24, Z
    26e8:	98 2f       	mov	r25, r24
    26ea:	91 50       	subi	r25, 0x01	; 1
    26ec:	82 2f       	mov	r24, r18
    26ee:	69 2f       	mov	r22, r25
    26f0:	0e 94 0e 11 	call	0x221c	; 0x221c <drawArrow>
    26f4:	1c c0       	rjmp	.+56     	; 0x272e <Calculator_voidConfirmCallback+0xaa>
	}
	else if(pcalculatorData->currPosX == 2)
    26f6:	e9 81       	ldd	r30, Y+1	; 0x01
    26f8:	fa 81       	ldd	r31, Y+2	; 0x02
    26fa:	80 81       	ld	r24, Z
    26fc:	82 30       	cpi	r24, 0x02	; 2
    26fe:	b9 f4       	brne	.+46     	; 0x272e <Calculator_voidConfirmCallback+0xaa>
	{
		//advance from 2nd num to res
		pcalculatorData->currPosX++;
    2700:	e9 81       	ldd	r30, Y+1	; 0x01
    2702:	fa 81       	ldd	r31, Y+2	; 0x02
    2704:	80 81       	ld	r24, Z
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	e9 81       	ldd	r30, Y+1	; 0x01
    270a:	fa 81       	ldd	r31, Y+2	; 0x02
    270c:	80 83       	st	Z, r24
		drawArrow(pcalculatorData->currPosX,pcalculatorData->currPosX-1); //advance arrow
    270e:	e9 81       	ldd	r30, Y+1	; 0x01
    2710:	fa 81       	ldd	r31, Y+2	; 0x02
    2712:	20 81       	ld	r18, Z
    2714:	e9 81       	ldd	r30, Y+1	; 0x01
    2716:	fa 81       	ldd	r31, Y+2	; 0x02
    2718:	80 81       	ld	r24, Z
    271a:	98 2f       	mov	r25, r24
    271c:	91 50       	subi	r25, 0x01	; 1
    271e:	82 2f       	mov	r24, r18
    2720:	69 2f       	mov	r22, r25
    2722:	0e 94 0e 11 	call	0x221c	; 0x221c <drawArrow>
		calculatePrint(pcalculatorData);
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <calculatePrint>
	}
	else if(pcalculatorData->currPosX == 3)
	{
		//advance from res to a new operation (to be implemented
	}
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <Calculator_voidConfig>:


void Calculator_voidConfig(struct CalculatorData* pcalculatorData)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	00 d0       	rcall	.+0      	; 0x273e <Calculator_voidConfig+0x6>
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
	//intial config for calculator elements
	pcalculatorData->currPosX = 0;
    2746:	e9 81       	ldd	r30, Y+1	; 0x01
    2748:	fa 81       	ldd	r31, Y+2	; 0x02
    274a:	10 82       	st	Z, r1
	pcalculatorData->number1 = 0;
    274c:	e9 81       	ldd	r30, Y+1	; 0x01
    274e:	fa 81       	ldd	r31, Y+2	; 0x02
    2750:	11 82       	std	Z+1, r1	; 0x01
	pcalculatorData->number2 = 0;
    2752:	e9 81       	ldd	r30, Y+1	; 0x01
    2754:	fa 81       	ldd	r31, Y+2	; 0x02
    2756:	12 82       	std	Z+2, r1	; 0x02
	pcalculatorData->operator = 0;
    2758:	e9 81       	ldd	r30, Y+1	; 0x01
    275a:	fa 81       	ldd	r31, Y+2	; 0x02
    275c:	13 82       	std	Z+3, r1	; 0x03

	//intialize arrow
	drawArrow(pcalculatorData->currPosX,pcalculatorData->currPosX);
    275e:	e9 81       	ldd	r30, Y+1	; 0x01
    2760:	fa 81       	ldd	r31, Y+2	; 0x02
    2762:	80 81       	ld	r24, Z
    2764:	e9 81       	ldd	r30, Y+1	; 0x01
    2766:	fa 81       	ldd	r31, Y+2	; 0x02
    2768:	90 81       	ld	r25, Z
    276a:	69 2f       	mov	r22, r25
    276c:	0e 94 0e 11 	call	0x221c	; 0x221c <drawArrow>
}
    2770:	0f 90       	pop	r0
    2772:	0f 90       	pop	r0
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <main>:
#include "BUTTON.h"
#include "calculator.h"


void main(void)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	00 d0       	rcall	.+0      	; 0x2780 <main+0x6>
    2780:	00 d0       	rcall	.+0      	; 0x2782 <main+0x8>
    2782:	00 d0       	rcall	.+0      	; 0x2784 <main+0xa>
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
	LCD_voidConfiguration();
    2788:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <LCD_voidConfiguration>
	LCD_voidLCDInit();
    278c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_voidLCDInit>
	//LCD_voidSendSpecialCharacter(Pattern1,1,14,0);
	//LCD_voidSendSpecialCharacter(Pattern2,2,13,0);
	//LCD_voidSendSpecialCharacter(Pattern3,3,12,0);


	struct BUTTON_OBJ BUTTON_structButtons[3] = {};
    2790:	86 e0       	ldi	r24, 0x06	; 6
    2792:	fe 01       	movw	r30, r28
    2794:	31 96       	adiw	r30, 0x01	; 1
    2796:	df 01       	movw	r26, r30
    2798:	98 2f       	mov	r25, r24
    279a:	1d 92       	st	X+, r1
    279c:	9a 95       	dec	r25
    279e:	e9 f7       	brne	.-6      	; 0x279a <main+0x20>
	BUTTON_voidButtonConfig(BUTTON_structButtons);
    27a0:	ce 01       	movw	r24, r28
    27a2:	01 96       	adiw	r24, 0x01	; 1
    27a4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <BUTTON_voidButtonConfig>
	Calculator_voidConfig(&calculatorData);
    27a8:	82 e7       	ldi	r24, 0x72	; 114
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 9c 13 	call	0x2738	; 0x2738 <Calculator_voidConfig>

	while(1)
	{

		BUTTON_voidPolling(BUTTON_structButtons);
    27b0:	ce 01       	movw	r24, r28
    27b2:	01 96       	adiw	r24, 0x01	; 1
    27b4:	0e 94 9b 06 	call	0xd36	; 0xd36 <BUTTON_voidPolling>
    27b8:	fb cf       	rjmp	.-10     	; 0x27b0 <main+0x36>

000027ba <__mulsi3>:
    27ba:	62 9f       	mul	r22, r18
    27bc:	d0 01       	movw	r26, r0
    27be:	73 9f       	mul	r23, r19
    27c0:	f0 01       	movw	r30, r0
    27c2:	82 9f       	mul	r24, r18
    27c4:	e0 0d       	add	r30, r0
    27c6:	f1 1d       	adc	r31, r1
    27c8:	64 9f       	mul	r22, r20
    27ca:	e0 0d       	add	r30, r0
    27cc:	f1 1d       	adc	r31, r1
    27ce:	92 9f       	mul	r25, r18
    27d0:	f0 0d       	add	r31, r0
    27d2:	83 9f       	mul	r24, r19
    27d4:	f0 0d       	add	r31, r0
    27d6:	74 9f       	mul	r23, r20
    27d8:	f0 0d       	add	r31, r0
    27da:	65 9f       	mul	r22, r21
    27dc:	f0 0d       	add	r31, r0
    27de:	99 27       	eor	r25, r25
    27e0:	72 9f       	mul	r23, r18
    27e2:	b0 0d       	add	r27, r0
    27e4:	e1 1d       	adc	r30, r1
    27e6:	f9 1f       	adc	r31, r25
    27e8:	63 9f       	mul	r22, r19
    27ea:	b0 0d       	add	r27, r0
    27ec:	e1 1d       	adc	r30, r1
    27ee:	f9 1f       	adc	r31, r25
    27f0:	bd 01       	movw	r22, r26
    27f2:	cf 01       	movw	r24, r30
    27f4:	11 24       	eor	r1, r1
    27f6:	08 95       	ret

000027f8 <__udivmodqi4>:
    27f8:	99 1b       	sub	r25, r25
    27fa:	79 e0       	ldi	r23, 0x09	; 9
    27fc:	04 c0       	rjmp	.+8      	; 0x2806 <__udivmodqi4_ep>

000027fe <__udivmodqi4_loop>:
    27fe:	99 1f       	adc	r25, r25
    2800:	96 17       	cp	r25, r22
    2802:	08 f0       	brcs	.+2      	; 0x2806 <__udivmodqi4_ep>
    2804:	96 1b       	sub	r25, r22

00002806 <__udivmodqi4_ep>:
    2806:	88 1f       	adc	r24, r24
    2808:	7a 95       	dec	r23
    280a:	c9 f7       	brne	.-14     	; 0x27fe <__udivmodqi4_loop>
    280c:	80 95       	com	r24
    280e:	08 95       	ret

00002810 <__divmodqi4>:
    2810:	87 fb       	bst	r24, 7
    2812:	08 2e       	mov	r0, r24
    2814:	06 26       	eor	r0, r22
    2816:	87 fd       	sbrc	r24, 7
    2818:	81 95       	neg	r24
    281a:	67 fd       	sbrc	r22, 7
    281c:	61 95       	neg	r22
    281e:	ec df       	rcall	.-40     	; 0x27f8 <__udivmodqi4>
    2820:	0e f4       	brtc	.+2      	; 0x2824 <__divmodqi4_1>
    2822:	91 95       	neg	r25

00002824 <__divmodqi4_1>:
    2824:	07 fc       	sbrc	r0, 7
    2826:	81 95       	neg	r24

00002828 <__divmodqi4_exit>:
    2828:	08 95       	ret

0000282a <__divmodhi4>:
    282a:	97 fb       	bst	r25, 7
    282c:	09 2e       	mov	r0, r25
    282e:	07 26       	eor	r0, r23
    2830:	0a d0       	rcall	.+20     	; 0x2846 <__divmodhi4_neg1>
    2832:	77 fd       	sbrc	r23, 7
    2834:	04 d0       	rcall	.+8      	; 0x283e <__divmodhi4_neg2>
    2836:	2e d0       	rcall	.+92     	; 0x2894 <__udivmodhi4>
    2838:	06 d0       	rcall	.+12     	; 0x2846 <__divmodhi4_neg1>
    283a:	00 20       	and	r0, r0
    283c:	1a f4       	brpl	.+6      	; 0x2844 <__divmodhi4_exit>

0000283e <__divmodhi4_neg2>:
    283e:	70 95       	com	r23
    2840:	61 95       	neg	r22
    2842:	7f 4f       	sbci	r23, 0xFF	; 255

00002844 <__divmodhi4_exit>:
    2844:	08 95       	ret

00002846 <__divmodhi4_neg1>:
    2846:	f6 f7       	brtc	.-4      	; 0x2844 <__divmodhi4_exit>
    2848:	90 95       	com	r25
    284a:	81 95       	neg	r24
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	08 95       	ret

00002850 <__udivmodsi4>:
    2850:	a1 e2       	ldi	r26, 0x21	; 33
    2852:	1a 2e       	mov	r1, r26
    2854:	aa 1b       	sub	r26, r26
    2856:	bb 1b       	sub	r27, r27
    2858:	fd 01       	movw	r30, r26
    285a:	0d c0       	rjmp	.+26     	; 0x2876 <__udivmodsi4_ep>

0000285c <__udivmodsi4_loop>:
    285c:	aa 1f       	adc	r26, r26
    285e:	bb 1f       	adc	r27, r27
    2860:	ee 1f       	adc	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	a2 17       	cp	r26, r18
    2866:	b3 07       	cpc	r27, r19
    2868:	e4 07       	cpc	r30, r20
    286a:	f5 07       	cpc	r31, r21
    286c:	20 f0       	brcs	.+8      	; 0x2876 <__udivmodsi4_ep>
    286e:	a2 1b       	sub	r26, r18
    2870:	b3 0b       	sbc	r27, r19
    2872:	e4 0b       	sbc	r30, r20
    2874:	f5 0b       	sbc	r31, r21

00002876 <__udivmodsi4_ep>:
    2876:	66 1f       	adc	r22, r22
    2878:	77 1f       	adc	r23, r23
    287a:	88 1f       	adc	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	1a 94       	dec	r1
    2880:	69 f7       	brne	.-38     	; 0x285c <__udivmodsi4_loop>
    2882:	60 95       	com	r22
    2884:	70 95       	com	r23
    2886:	80 95       	com	r24
    2888:	90 95       	com	r25
    288a:	9b 01       	movw	r18, r22
    288c:	ac 01       	movw	r20, r24
    288e:	bd 01       	movw	r22, r26
    2890:	cf 01       	movw	r24, r30
    2892:	08 95       	ret

00002894 <__udivmodhi4>:
    2894:	aa 1b       	sub	r26, r26
    2896:	bb 1b       	sub	r27, r27
    2898:	51 e1       	ldi	r21, 0x11	; 17
    289a:	07 c0       	rjmp	.+14     	; 0x28aa <__udivmodhi4_ep>

0000289c <__udivmodhi4_loop>:
    289c:	aa 1f       	adc	r26, r26
    289e:	bb 1f       	adc	r27, r27
    28a0:	a6 17       	cp	r26, r22
    28a2:	b7 07       	cpc	r27, r23
    28a4:	10 f0       	brcs	.+4      	; 0x28aa <__udivmodhi4_ep>
    28a6:	a6 1b       	sub	r26, r22
    28a8:	b7 0b       	sbc	r27, r23

000028aa <__udivmodhi4_ep>:
    28aa:	88 1f       	adc	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	5a 95       	dec	r21
    28b0:	a9 f7       	brne	.-22     	; 0x289c <__udivmodhi4_loop>
    28b2:	80 95       	com	r24
    28b4:	90 95       	com	r25
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	08 95       	ret

000028bc <__prologue_saves__>:
    28bc:	2f 92       	push	r2
    28be:	3f 92       	push	r3
    28c0:	4f 92       	push	r4
    28c2:	5f 92       	push	r5
    28c4:	6f 92       	push	r6
    28c6:	7f 92       	push	r7
    28c8:	8f 92       	push	r8
    28ca:	9f 92       	push	r9
    28cc:	af 92       	push	r10
    28ce:	bf 92       	push	r11
    28d0:	cf 92       	push	r12
    28d2:	df 92       	push	r13
    28d4:	ef 92       	push	r14
    28d6:	ff 92       	push	r15
    28d8:	0f 93       	push	r16
    28da:	1f 93       	push	r17
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	ca 1b       	sub	r28, r26
    28e6:	db 0b       	sbc	r29, r27
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	09 94       	ijmp

000028f4 <__epilogue_restores__>:
    28f4:	2a 88       	ldd	r2, Y+18	; 0x12
    28f6:	39 88       	ldd	r3, Y+17	; 0x11
    28f8:	48 88       	ldd	r4, Y+16	; 0x10
    28fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    28fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    28fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2900:	8c 84       	ldd	r8, Y+12	; 0x0c
    2902:	9b 84       	ldd	r9, Y+11	; 0x0b
    2904:	aa 84       	ldd	r10, Y+10	; 0x0a
    2906:	b9 84       	ldd	r11, Y+9	; 0x09
    2908:	c8 84       	ldd	r12, Y+8	; 0x08
    290a:	df 80       	ldd	r13, Y+7	; 0x07
    290c:	ee 80       	ldd	r14, Y+6	; 0x06
    290e:	fd 80       	ldd	r15, Y+5	; 0x05
    2910:	0c 81       	ldd	r16, Y+4	; 0x04
    2912:	1b 81       	ldd	r17, Y+3	; 0x03
    2914:	aa 81       	ldd	r26, Y+2	; 0x02
    2916:	b9 81       	ldd	r27, Y+1	; 0x01
    2918:	ce 0f       	add	r28, r30
    291a:	d1 1d       	adc	r29, r1
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	ed 01       	movw	r28, r26
    2928:	08 95       	ret

0000292a <_exit>:
    292a:	f8 94       	cli

0000292c <__stop_program>:
    292c:	ff cf       	rjmp	.-2      	; 0x292c <__stop_program>
