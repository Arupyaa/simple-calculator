
Ass3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002964  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002964  000029f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800072  00800072  00002a0a  2**0
                  ALLOC
  3 .stab         00001fbc  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f30  00000000  00000000  000049c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000058f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <main>
      8a:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 14 	jmp	0x290a	; 0x290a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 14 	jmp	0x290a	; 0x290a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 14 	jmp	0x28f2	; 0x28f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 14 	jmp	0x292a	; 0x292a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 85 14 	jmp	0x290a	; 0x290a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 85 14 	jmp	0x290a	; 0x290a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 85 14 	jmp	0x290a	; 0x290a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a5 14 	jmp	0x294a	; 0x294a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <BUTTON_voidButtonConfig>:

void (*BUTTON_FuncList[3])(struct CalculatorData*) = {Calculator_voidCycleUpCallback,Calculator_voidCycledownCallback,Calculator_voidConfirmCallback};


void BUTTON_voidButtonConfig(struct BUTTON_OBJ* pButtons)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <BUTTON_voidButtonConfig+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_INPUT);
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	65 e0       	ldi	r22, 0x05	; 5
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN6,DIO_PIN_INPUT);
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	66 e0       	ldi	r22, 0x06	; 6
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_PIN_INPUT);
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	67 e0       	ldi	r22, 0x07	; 7
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_HIGH);
     ccc:	83 e0       	ldi	r24, 0x03	; 3
     cce:	65 e0       	ldi	r22, 0x05	; 5
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	66 e0       	ldi	r22, 0x06	; 6
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);
     ce0:	83 e0       	ldi	r24, 0x03	; 3
     ce2:	67 e0       	ldi	r22, 0x07	; 7
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>

	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
     cea:	19 82       	std	Y+1, r1	; 0x01
     cec:	1b c0       	rjmp	.+54     	; 0xd24 <BUTTON_voidButtonConfig+0x86>
	{
		pButtons[Local_u8ButtonItterator].val = 0;
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	9c 01       	movw	r18, r24
     cf6:	22 0f       	add	r18, r18
     cf8:	33 1f       	adc	r19, r19
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	9b 81       	ldd	r25, Y+3	; 0x03
     cfe:	fc 01       	movw	r30, r24
     d00:	e2 0f       	add	r30, r18
     d02:	f3 1f       	adc	r31, r19
     d04:	10 82       	st	Z, r1
		pButtons[Local_u8ButtonItterator].oldVal = 0;
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9c 01       	movw	r18, r24
     d0e:	22 0f       	add	r18, r18
     d10:	33 1f       	adc	r19, r19
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	9b 81       	ldd	r25, Y+3	; 0x03
     d16:	fc 01       	movw	r30, r24
     d18:	e2 0f       	add	r30, r18
     d1a:	f3 1f       	adc	r31, r19
     d1c:	11 82       	std	Z+1, r1	; 0x01

	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN5,DIO_HIGH);
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
	DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_HIGH);

	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	89 83       	std	Y+1, r24	; 0x01
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	83 30       	cpi	r24, 0x03	; 3
     d28:	10 f3       	brcs	.-60     	; 0xcee <BUTTON_voidButtonConfig+0x50>
	{
		pButtons[Local_u8ButtonItterator].val = 0;
		pButtons[Local_u8ButtonItterator].oldVal = 0;
	}

}
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <BUTTON_voidPolling>:

void BUTTON_voidPolling(struct BUTTON_OBJ* pButtons)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <BUTTON_voidPolling+0x6>
     d3c:	0f 92       	push	r0
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	9b 83       	std	Y+3, r25	; 0x03
     d44:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{
		//scan over all buttons
		BUTTON_voidButtonSampler(pButtons);
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <BUTTON_voidButtonSampler>
     d4e:	60 c0       	rjmp	.+192    	; 0xe10 <BUTTON_voidPolling+0xda>

		//see if any changes happened and take action for them
		for(u8 Local_u8ButtonItterator;Local_u8ButtonItterator <3;Local_u8ButtonItterator++)
		{
			if(pButtons[Local_u8ButtonItterator].val != pButtons[Local_u8ButtonItterator].oldVal)
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 01       	movw	r18, r24
     d58:	22 0f       	add	r18, r18
     d5a:	33 1f       	adc	r19, r19
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	fc 01       	movw	r30, r24
     d62:	e2 0f       	add	r30, r18
     d64:	f3 1f       	adc	r31, r19
     d66:	40 81       	ld	r20, Z
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9c 01       	movw	r18, r24
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	fc 01       	movw	r30, r24
     d7a:	e2 0f       	add	r30, r18
     d7c:	f3 1f       	adc	r31, r19
     d7e:	81 81       	ldd	r24, Z+1	; 0x01
     d80:	48 17       	cp	r20, r24
     d82:	09 f4       	brne	.+2      	; 0xd86 <BUTTON_voidPolling+0x50>
     d84:	42 c0       	rjmp	.+132    	; 0xe0a <BUTTON_voidPolling+0xd4>
			{
				//change took place
				if( pButtons[Local_u8ButtonItterator].val > pButtons[Local_u8ButtonItterator].oldVal)
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	9c 01       	movw	r18, r24
     d8e:	22 0f       	add	r18, r18
     d90:	33 1f       	adc	r19, r19
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	9b 81       	ldd	r25, Y+3	; 0x03
     d96:	fc 01       	movw	r30, r24
     d98:	e2 0f       	add	r30, r18
     d9a:	f3 1f       	adc	r31, r19
     d9c:	40 81       	ld	r20, Z
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	88 2f       	mov	r24, r24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9c 01       	movw	r18, r24
     da6:	22 0f       	add	r18, r18
     da8:	33 1f       	adc	r19, r19
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	9b 81       	ldd	r25, Y+3	; 0x03
     dae:	fc 01       	movw	r30, r24
     db0:	e2 0f       	add	r30, r18
     db2:	f3 1f       	adc	r31, r19
     db4:	81 81       	ldd	r24, Z+1	; 0x01
     db6:	84 17       	cp	r24, r20
     db8:	40 f5       	brcc	.+80     	; 0xe0a <BUTTON_voidPolling+0xd4>
					//only take action on low to high change

					//debug
					//LCD_voidSendData('A');
					//OG code
					BUTTON_FuncList[Local_u8ButtonItterator](&calculatorData);
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	fc 01       	movw	r30, r24
     dc6:	e8 59       	subi	r30, 0x98	; 152
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	01 90       	ld	r0, Z+
     dcc:	f0 81       	ld	r31, Z
     dce:	e0 2d       	mov	r30, r0
     dd0:	82 e7       	ldi	r24, 0x72	; 114
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	09 95       	icall

					pButtons[Local_u8ButtonItterator].oldVal = pButtons[Local_u8ButtonItterator].val;
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9c 01       	movw	r18, r24
     dde:	22 0f       	add	r18, r18
     de0:	33 1f       	adc	r19, r19
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	dc 01       	movw	r26, r24
     de8:	a2 0f       	add	r26, r18
     dea:	b3 1f       	adc	r27, r19
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9c 01       	movw	r18, r24
     df4:	22 0f       	add	r18, r18
     df6:	33 1f       	adc	r19, r19
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	9b 81       	ldd	r25, Y+3	; 0x03
     dfc:	fc 01       	movw	r30, r24
     dfe:	e2 0f       	add	r30, r18
     e00:	f3 1f       	adc	r31, r19
     e02:	80 81       	ld	r24, Z
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	8c 93       	st	X, r24
     e08:	11 97       	sbiw	r26, 0x01	; 1
	{
		//scan over all buttons
		BUTTON_voidButtonSampler(pButtons);

		//see if any changes happened and take action for them
		for(u8 Local_u8ButtonItterator;Local_u8ButtonItterator <3;Local_u8ButtonItterator++)
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	83 30       	cpi	r24, 0x03	; 3
     e14:	08 f4       	brcc	.+2      	; 0xe18 <BUTTON_voidPolling+0xe2>
     e16:	9c cf       	rjmp	.-200    	; 0xd50 <BUTTON_voidPolling+0x1a>
     e18:	96 cf       	rjmp	.-212    	; 0xd46 <BUTTON_voidPolling+0x10>

00000e1a <BUTTON_voidButtonSampler>:
}



void BUTTON_voidButtonSampler(struct BUTTON_OBJ* pButtons)
{
     e1a:	0f 93       	push	r16
     e1c:	1f 93       	push	r17
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	ee 97       	sbiw	r28, 0x3e	; 62
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	99 af       	std	Y+57, r25	; 0x39
     e34:	88 af       	std	Y+56, r24	; 0x38
	//buttons are from PORTD pins 5,6,7

	//temp button array to save button vals
	u8 Local_u8arrTempBtns[3] = {0, 0 ,0};
     e36:	ce 01       	movw	r24, r28
     e38:	c5 96       	adiw	r24, 0x35	; 53
     e3a:	9b af       	std	Y+59, r25	; 0x3b
     e3c:	8a af       	std	Y+58, r24	; 0x3a
     e3e:	ee e6       	ldi	r30, 0x6E	; 110
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	fd af       	std	Y+61, r31	; 0x3d
     e44:	ec af       	std	Y+60, r30	; 0x3c
     e46:	f3 e0       	ldi	r31, 0x03	; 3
     e48:	fe af       	std	Y+62, r31	; 0x3e
     e4a:	ec ad       	ldd	r30, Y+60	; 0x3c
     e4c:	fd ad       	ldd	r31, Y+61	; 0x3d
     e4e:	00 80       	ld	r0, Z
     e50:	8c ad       	ldd	r24, Y+60	; 0x3c
     e52:	9d ad       	ldd	r25, Y+61	; 0x3d
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	9d af       	std	Y+61, r25	; 0x3d
     e58:	8c af       	std	Y+60, r24	; 0x3c
     e5a:	ea ad       	ldd	r30, Y+58	; 0x3a
     e5c:	fb ad       	ldd	r31, Y+59	; 0x3b
     e5e:	00 82       	st	Z, r0
     e60:	8a ad       	ldd	r24, Y+58	; 0x3a
     e62:	9b ad       	ldd	r25, Y+59	; 0x3b
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	9b af       	std	Y+59, r25	; 0x3b
     e68:	8a af       	std	Y+58, r24	; 0x3a
     e6a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e6c:	91 50       	subi	r25, 0x01	; 1
     e6e:	9e af       	std	Y+62, r25	; 0x3e
     e70:	ee ad       	ldd	r30, Y+62	; 0x3e
     e72:	ee 23       	and	r30, r30
     e74:	51 f7       	brne	.-44     	; 0xe4a <BUTTON_voidButtonSampler+0x30>
//		{
//		Local_u8arrTempBtns[Local_u8ButtonItterator] = pButtons[Local_u8ButtonItterator].val;
//		}

	//save first sample as ref
	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
     e76:	1c aa       	std	Y+52, r1	; 0x34
     e78:	17 c0       	rjmp	.+46     	; 0xea8 <BUTTON_voidButtonSampler+0x8e>
		{
			Local_u8arrTempBtns[Local_u8ButtonItterator] = DIO_u8GetPinValue(DIO_PORTD,DIO_PIN5+Local_u8ButtonItterator) ^1;
     e7a:	8c a9       	ldd	r24, Y+52	; 0x34
     e7c:	08 2f       	mov	r16, r24
     e7e:	10 e0       	ldi	r17, 0x00	; 0
     e80:	8c a9       	ldd	r24, Y+52	; 0x34
     e82:	98 2f       	mov	r25, r24
     e84:	9b 5f       	subi	r25, 0xFB	; 251
     e86:	83 e0       	ldi	r24, 0x03	; 3
     e88:	69 2f       	mov	r22, r25
     e8a:	0e 94 27 0c 	call	0x184e	; 0x184e <DIO_u8GetPinValue>
     e8e:	98 2f       	mov	r25, r24
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	29 2f       	mov	r18, r25
     e94:	28 27       	eor	r18, r24
     e96:	ce 01       	movw	r24, r28
     e98:	c5 96       	adiw	r24, 0x35	; 53
     e9a:	fc 01       	movw	r30, r24
     e9c:	e0 0f       	add	r30, r16
     e9e:	f1 1f       	adc	r31, r17
     ea0:	20 83       	st	Z, r18
//		{
//		Local_u8arrTempBtns[Local_u8ButtonItterator] = pButtons[Local_u8ButtonItterator].val;
//		}

	//save first sample as ref
	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
     ea2:	8c a9       	ldd	r24, Y+52	; 0x34
     ea4:	8f 5f       	subi	r24, 0xFF	; 255
     ea6:	8c ab       	std	Y+52, r24	; 0x34
     ea8:	8c a9       	ldd	r24, Y+52	; 0x34
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	30 f3       	brcs	.-52     	; 0xe7a <BUTTON_voidButtonSampler+0x60>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	a8 ec       	ldi	r26, 0xC8	; 200
     eb4:	b2 e4       	ldi	r27, 0x42	; 66
     eb6:	8d a7       	std	Y+45, r24	; 0x2d
     eb8:	9e a7       	std	Y+46, r25	; 0x2e
     eba:	af a7       	std	Y+47, r26	; 0x2f
     ebc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ebe:	6d a5       	ldd	r22, Y+45	; 0x2d
     ec0:	7e a5       	ldd	r23, Y+46	; 0x2e
     ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ec4:	98 a9       	ldd	r25, Y+48	; 0x30
     ec6:	2b ea       	ldi	r18, 0xAB	; 171
     ec8:	3a ea       	ldi	r19, 0xAA	; 170
     eca:	4a e2       	ldi	r20, 0x2A	; 42
     ecc:	50 e4       	ldi	r21, 0x40	; 64
     ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	89 a7       	std	Y+41, r24	; 0x29
     ed8:	9a a7       	std	Y+42, r25	; 0x2a
     eda:	ab a7       	std	Y+43, r26	; 0x2b
     edc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     ede:	69 a5       	ldd	r22, Y+41	; 0x29
     ee0:	7a a5       	ldd	r23, Y+42	; 0x2a
     ee2:	8b a5       	ldd	r24, Y+43	; 0x2b
     ee4:	9c a5       	ldd	r25, Y+44	; 0x2c
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e8       	ldi	r20, 0x80	; 128
     eec:	5f e3       	ldi	r21, 0x3F	; 63
     eee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ef2:	88 23       	and	r24, r24
     ef4:	1c f4       	brge	.+6      	; 0xefc <BUTTON_voidButtonSampler+0xe2>
		__ticks = 1;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	88 a7       	std	Y+40, r24	; 0x28
     efa:	91 c0       	rjmp	.+290    	; 0x101e <BUTTON_voidButtonSampler+0x204>
	else if (__tmp > 255)
     efc:	69 a5       	ldd	r22, Y+41	; 0x29
     efe:	7a a5       	ldd	r23, Y+42	; 0x2a
     f00:	8b a5       	ldd	r24, Y+43	; 0x2b
     f02:	9c a5       	ldd	r25, Y+44	; 0x2c
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	4f e7       	ldi	r20, 0x7F	; 127
     f0a:	53 e4       	ldi	r21, 0x43	; 67
     f0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f10:	18 16       	cp	r1, r24
     f12:	0c f0       	brlt	.+2      	; 0xf16 <BUTTON_voidButtonSampler+0xfc>
     f14:	7b c0       	rjmp	.+246    	; 0x100c <BUTTON_voidButtonSampler+0x1f2>
	{
		_delay_ms(__us / 1000.0);
     f16:	6d a5       	ldd	r22, Y+45	; 0x2d
     f18:	7e a5       	ldd	r23, Y+46	; 0x2e
     f1a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f1c:	98 a9       	ldd	r25, Y+48	; 0x30
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	4a e7       	ldi	r20, 0x7A	; 122
     f24:	54 e4       	ldi	r21, 0x44	; 68
     f26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	8c a3       	std	Y+36, r24	; 0x24
     f30:	9d a3       	std	Y+37, r25	; 0x25
     f32:	ae a3       	std	Y+38, r26	; 0x26
     f34:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f36:	6c a1       	ldd	r22, Y+36	; 0x24
     f38:	7d a1       	ldd	r23, Y+37	; 0x25
     f3a:	8e a1       	ldd	r24, Y+38	; 0x26
     f3c:	9f a1       	ldd	r25, Y+39	; 0x27
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4a ef       	ldi	r20, 0xFA	; 250
     f44:	54 e4       	ldi	r21, 0x44	; 68
     f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	88 a3       	std	Y+32, r24	; 0x20
     f50:	99 a3       	std	Y+33, r25	; 0x21
     f52:	aa a3       	std	Y+34, r26	; 0x22
     f54:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f56:	68 a1       	ldd	r22, Y+32	; 0x20
     f58:	79 a1       	ldd	r23, Y+33	; 0x21
     f5a:	8a a1       	ldd	r24, Y+34	; 0x22
     f5c:	9b a1       	ldd	r25, Y+35	; 0x23
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	2c f4       	brge	.+10     	; 0xf78 <BUTTON_voidButtonSampler+0x15e>
		__ticks = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9f 8f       	std	Y+31, r25	; 0x1f
     f74:	8e 8f       	std	Y+30, r24	; 0x1e
     f76:	3f c0       	rjmp	.+126    	; 0xff6 <BUTTON_voidButtonSampler+0x1dc>
	else if (__tmp > 65535)
     f78:	68 a1       	ldd	r22, Y+32	; 0x20
     f7a:	79 a1       	ldd	r23, Y+33	; 0x21
     f7c:	8a a1       	ldd	r24, Y+34	; 0x22
     f7e:	9b a1       	ldd	r25, Y+35	; 0x23
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	57 e4       	ldi	r21, 0x47	; 71
     f88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	4c f5       	brge	.+82     	; 0xfe2 <BUTTON_voidButtonSampler+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	6c a1       	ldd	r22, Y+36	; 0x24
     f92:	7d a1       	ldd	r23, Y+37	; 0x25
     f94:	8e a1       	ldd	r24, Y+38	; 0x26
     f96:	9f a1       	ldd	r25, Y+39	; 0x27
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e2       	ldi	r20, 0x20	; 32
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9f 8f       	std	Y+31, r25	; 0x1f
     fb6:	8e 8f       	std	Y+30, r24	; 0x1e
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <BUTTON_voidButtonSampler+0x1be>
     fba:	88 ec       	ldi	r24, 0xC8	; 200
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9d 8f       	std	Y+29, r25	; 0x1d
     fc0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fc2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fc4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <BUTTON_voidButtonSampler+0x1ac>
     fca:	9d 8f       	std	Y+29, r25	; 0x1d
     fcc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fce:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	9f 8f       	std	Y+31, r25	; 0x1f
     fd6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fda:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	69 f7       	brne	.-38     	; 0xfba <BUTTON_voidButtonSampler+0x1a0>
     fe0:	24 c0       	rjmp	.+72     	; 0x102a <BUTTON_voidButtonSampler+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe2:	68 a1       	ldd	r22, Y+32	; 0x20
     fe4:	79 a1       	ldd	r23, Y+33	; 0x21
     fe6:	8a a1       	ldd	r24, Y+34	; 0x22
     fe8:	9b a1       	ldd	r25, Y+35	; 0x23
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9f 8f       	std	Y+31, r25	; 0x1f
     ff4:	8e 8f       	std	Y+30, r24	; 0x1e
     ff6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ff8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ffa:	9b 8f       	std	Y+27, r25	; 0x1b
     ffc:	8a 8f       	std	Y+26, r24	; 0x1a
     ffe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1000:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <BUTTON_voidButtonSampler+0x1e8>
    1006:	9b 8f       	std	Y+27, r25	; 0x1b
    1008:	8a 8f       	std	Y+26, r24	; 0x1a
    100a:	0f c0       	rjmp	.+30     	; 0x102a <BUTTON_voidButtonSampler+0x210>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    100c:	69 a5       	ldd	r22, Y+41	; 0x29
    100e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1010:	8b a5       	ldd	r24, Y+43	; 0x2b
    1012:	9c a5       	ldd	r25, Y+44	; 0x2c
    1014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	88 a7       	std	Y+40, r24	; 0x28
    101e:	88 a5       	ldd	r24, Y+40	; 0x28
    1020:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1022:	89 8d       	ldd	r24, Y+25	; 0x19
    1024:	8a 95       	dec	r24
    1026:	f1 f7       	brne	.-4      	; 0x1024 <BUTTON_voidButtonSampler+0x20a>
    1028:	89 8f       	std	Y+25, r24	; 0x19

	//sleep for 100micro sec
	_delay_us(100);

	//cycle rate is 10ms each cycle we get 100sample, sampling rate is 1/(1/10000) = 10kHZ
	for(u8 Local_u8SampleItterator = 0; Local_u8SampleItterator<99; Local_u8SampleItterator++)
    102a:	1b aa       	std	Y+51, r1	; 0x33
    102c:	e5 c0       	rjmp	.+458    	; 0x11f8 <BUTTON_voidButtonSampler+0x3de>
	{
		//sample 100 times every 1/10000sec = 100micro sec
		for(u8 Local_u8ButtonItterator = 0; Local_u8ButtonItterator<3; Local_u8ButtonItterator++)
    102e:	1a aa       	std	Y+50, r1	; 0x32
    1030:	1f c0       	rjmp	.+62     	; 0x1070 <BUTTON_voidButtonSampler+0x256>
		{
			if(Local_u8arrTempBtns[Local_u8ButtonItterator] != DIO_u8GetPinValue(DIO_PORTD,DIO_PIN5+Local_u8ButtonItterator) ^1 )
    1032:	8a a9       	ldd	r24, Y+50	; 0x32
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	ce 01       	movw	r24, r28
    103a:	c5 96       	adiw	r24, 0x35	; 53
    103c:	fc 01       	movw	r30, r24
    103e:	e2 0f       	add	r30, r18
    1040:	f3 1f       	adc	r31, r19
    1042:	10 81       	ld	r17, Z
    1044:	8a a9       	ldd	r24, Y+50	; 0x32
    1046:	98 2f       	mov	r25, r24
    1048:	9b 5f       	subi	r25, 0xFB	; 251
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	69 2f       	mov	r22, r25
    104e:	0e 94 27 0c 	call	0x184e	; 0x184e <DIO_u8GetPinValue>
    1052:	18 17       	cp	r17, r24
    1054:	51 f4       	brne	.+20     	; 0x106a <BUTTON_voidButtonSampler+0x250>
			{
				Local_u8arrTempBtns[Local_u8ButtonItterator] = -1;
    1056:	8a a9       	ldd	r24, Y+50	; 0x32
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	ce 01       	movw	r24, r28
    105e:	c5 96       	adiw	r24, 0x35	; 53
    1060:	fc 01       	movw	r30, r24
    1062:	e2 0f       	add	r30, r18
    1064:	f3 1f       	adc	r31, r19
    1066:	8f ef       	ldi	r24, 0xFF	; 255
    1068:	80 83       	st	Z, r24

	//cycle rate is 10ms each cycle we get 100sample, sampling rate is 1/(1/10000) = 10kHZ
	for(u8 Local_u8SampleItterator = 0; Local_u8SampleItterator<99; Local_u8SampleItterator++)
	{
		//sample 100 times every 1/10000sec = 100micro sec
		for(u8 Local_u8ButtonItterator = 0; Local_u8ButtonItterator<3; Local_u8ButtonItterator++)
    106a:	8a a9       	ldd	r24, Y+50	; 0x32
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	8a ab       	std	Y+50, r24	; 0x32
    1070:	8a a9       	ldd	r24, Y+50	; 0x32
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	f0 f2       	brcs	.-68     	; 0x1032 <BUTTON_voidButtonSampler+0x218>
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a8 ec       	ldi	r26, 0xC8	; 200
    107c:	b2 e4       	ldi	r27, 0x42	; 66
    107e:	8d 8b       	std	Y+21, r24	; 0x15
    1080:	9e 8b       	std	Y+22, r25	; 0x16
    1082:	af 8b       	std	Y+23, r26	; 0x17
    1084:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1086:	6d 89       	ldd	r22, Y+21	; 0x15
    1088:	7e 89       	ldd	r23, Y+22	; 0x16
    108a:	8f 89       	ldd	r24, Y+23	; 0x17
    108c:	98 8d       	ldd	r25, Y+24	; 0x18
    108e:	2b ea       	ldi	r18, 0xAB	; 171
    1090:	3a ea       	ldi	r19, 0xAA	; 170
    1092:	4a e2       	ldi	r20, 0x2A	; 42
    1094:	50 e4       	ldi	r21, 0x40	; 64
    1096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	89 8b       	std	Y+17, r24	; 0x11
    10a0:	9a 8b       	std	Y+18, r25	; 0x12
    10a2:	ab 8b       	std	Y+19, r26	; 0x13
    10a4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10a6:	69 89       	ldd	r22, Y+17	; 0x11
    10a8:	7a 89       	ldd	r23, Y+18	; 0x12
    10aa:	8b 89       	ldd	r24, Y+19	; 0x13
    10ac:	9c 89       	ldd	r25, Y+20	; 0x14
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e8       	ldi	r20, 0x80	; 128
    10b4:	5f e3       	ldi	r21, 0x3F	; 63
    10b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10ba:	88 23       	and	r24, r24
    10bc:	1c f4       	brge	.+6      	; 0x10c4 <BUTTON_voidButtonSampler+0x2aa>
		__ticks = 1;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	88 8b       	std	Y+16, r24	; 0x10
    10c2:	91 c0       	rjmp	.+290    	; 0x11e6 <BUTTON_voidButtonSampler+0x3cc>
	else if (__tmp > 255)
    10c4:	69 89       	ldd	r22, Y+17	; 0x11
    10c6:	7a 89       	ldd	r23, Y+18	; 0x12
    10c8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ca:	9c 89       	ldd	r25, Y+20	; 0x14
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	4f e7       	ldi	r20, 0x7F	; 127
    10d2:	53 e4       	ldi	r21, 0x43	; 67
    10d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10d8:	18 16       	cp	r1, r24
    10da:	0c f0       	brlt	.+2      	; 0x10de <BUTTON_voidButtonSampler+0x2c4>
    10dc:	7b c0       	rjmp	.+246    	; 0x11d4 <BUTTON_voidButtonSampler+0x3ba>
	{
		_delay_ms(__us / 1000.0);
    10de:	6d 89       	ldd	r22, Y+21	; 0x15
    10e0:	7e 89       	ldd	r23, Y+22	; 0x16
    10e2:	8f 89       	ldd	r24, Y+23	; 0x17
    10e4:	98 8d       	ldd	r25, Y+24	; 0x18
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	4a e7       	ldi	r20, 0x7A	; 122
    10ec:	54 e4       	ldi	r21, 0x44	; 68
    10ee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	8c 87       	std	Y+12, r24	; 0x0c
    10f8:	9d 87       	std	Y+13, r25	; 0x0d
    10fa:	ae 87       	std	Y+14, r26	; 0x0e
    10fc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1100:	7d 85       	ldd	r23, Y+13	; 0x0d
    1102:	8e 85       	ldd	r24, Y+14	; 0x0e
    1104:	9f 85       	ldd	r25, Y+15	; 0x0f
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	4a ef       	ldi	r20, 0xFA	; 250
    110c:	54 e4       	ldi	r21, 0x44	; 68
    110e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	88 87       	std	Y+8, r24	; 0x08
    1118:	99 87       	std	Y+9, r25	; 0x09
    111a:	aa 87       	std	Y+10, r26	; 0x0a
    111c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    111e:	68 85       	ldd	r22, Y+8	; 0x08
    1120:	79 85       	ldd	r23, Y+9	; 0x09
    1122:	8a 85       	ldd	r24, Y+10	; 0x0a
    1124:	9b 85       	ldd	r25, Y+11	; 0x0b
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e8       	ldi	r20, 0x80	; 128
    112c:	5f e3       	ldi	r21, 0x3F	; 63
    112e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1132:	88 23       	and	r24, r24
    1134:	2c f4       	brge	.+10     	; 0x1140 <BUTTON_voidButtonSampler+0x326>
		__ticks = 1;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9f 83       	std	Y+7, r25	; 0x07
    113c:	8e 83       	std	Y+6, r24	; 0x06
    113e:	3f c0       	rjmp	.+126    	; 0x11be <BUTTON_voidButtonSampler+0x3a4>
	else if (__tmp > 65535)
    1140:	68 85       	ldd	r22, Y+8	; 0x08
    1142:	79 85       	ldd	r23, Y+9	; 0x09
    1144:	8a 85       	ldd	r24, Y+10	; 0x0a
    1146:	9b 85       	ldd	r25, Y+11	; 0x0b
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	3f ef       	ldi	r19, 0xFF	; 255
    114c:	4f e7       	ldi	r20, 0x7F	; 127
    114e:	57 e4       	ldi	r21, 0x47	; 71
    1150:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1154:	18 16       	cp	r1, r24
    1156:	4c f5       	brge	.+82     	; 0x11aa <BUTTON_voidButtonSampler+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1158:	6c 85       	ldd	r22, Y+12	; 0x0c
    115a:	7d 85       	ldd	r23, Y+13	; 0x0d
    115c:	8e 85       	ldd	r24, Y+14	; 0x0e
    115e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e2       	ldi	r20, 0x20	; 32
    1166:	51 e4       	ldi	r21, 0x41	; 65
    1168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	bc 01       	movw	r22, r24
    1172:	cd 01       	movw	r24, r26
    1174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	9f 83       	std	Y+7, r25	; 0x07
    117e:	8e 83       	std	Y+6, r24	; 0x06
    1180:	0f c0       	rjmp	.+30     	; 0x11a0 <BUTTON_voidButtonSampler+0x386>
    1182:	88 ec       	ldi	r24, 0xC8	; 200
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	9d 83       	std	Y+5, r25	; 0x05
    1188:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <BUTTON_voidButtonSampler+0x374>
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	9f 83       	std	Y+7, r25	; 0x07
    119e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a0:	8e 81       	ldd	r24, Y+6	; 0x06
    11a2:	9f 81       	ldd	r25, Y+7	; 0x07
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	69 f7       	brne	.-38     	; 0x1182 <BUTTON_voidButtonSampler+0x368>
    11a8:	24 c0       	rjmp	.+72     	; 0x11f2 <BUTTON_voidButtonSampler+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11aa:	68 85       	ldd	r22, Y+8	; 0x08
    11ac:	79 85       	ldd	r23, Y+9	; 0x09
    11ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	9f 83       	std	Y+7, r25	; 0x07
    11bc:	8e 83       	std	Y+6, r24	; 0x06
    11be:	8e 81       	ldd	r24, Y+6	; 0x06
    11c0:	9f 81       	ldd	r25, Y+7	; 0x07
    11c2:	9b 83       	std	Y+3, r25	; 0x03
    11c4:	8a 83       	std	Y+2, r24	; 0x02
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <BUTTON_voidButtonSampler+0x3b0>
    11ce:	9b 83       	std	Y+3, r25	; 0x03
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <BUTTON_voidButtonSampler+0x3d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11d4:	69 89       	ldd	r22, Y+17	; 0x11
    11d6:	7a 89       	ldd	r23, Y+18	; 0x12
    11d8:	8b 89       	ldd	r24, Y+19	; 0x13
    11da:	9c 89       	ldd	r25, Y+20	; 0x14
    11dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	88 8b       	std	Y+16, r24	; 0x10
    11e6:	88 89       	ldd	r24, Y+16	; 0x10
    11e8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	8a 95       	dec	r24
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <BUTTON_voidButtonSampler+0x3d2>
    11f0:	89 83       	std	Y+1, r24	; 0x01

	//sleep for 100micro sec
	_delay_us(100);

	//cycle rate is 10ms each cycle we get 100sample, sampling rate is 1/(1/10000) = 10kHZ
	for(u8 Local_u8SampleItterator = 0; Local_u8SampleItterator<99; Local_u8SampleItterator++)
    11f2:	8b a9       	ldd	r24, Y+51	; 0x33
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	8b ab       	std	Y+51, r24	; 0x33
    11f8:	8b a9       	ldd	r24, Y+51	; 0x33
    11fa:	83 36       	cpi	r24, 0x63	; 99
    11fc:	08 f4       	brcc	.+2      	; 0x1200 <BUTTON_voidButtonSampler+0x3e6>
    11fe:	17 cf       	rjmp	.-466    	; 0x102e <BUTTON_voidButtonSampler+0x214>

		//sleep for 100micro sec
		_delay_us(100);
	}

	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
    1200:	19 aa       	std	Y+49, r1	; 0x31
    1202:	18 c0       	rjmp	.+48     	; 0x1234 <BUTTON_voidButtonSampler+0x41a>
	{
		if(Local_u8arrTempBtns[Local_u8ButtonItterator] == -1)
			continue;
		else
			pButtons[Local_u8ButtonItterator].val = Local_u8arrTempBtns[Local_u8ButtonItterator];
    1204:	89 a9       	ldd	r24, Y+49	; 0x31
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9c 01       	movw	r18, r24
    120c:	22 0f       	add	r18, r18
    120e:	33 1f       	adc	r19, r19
    1210:	88 ad       	ldd	r24, Y+56	; 0x38
    1212:	99 ad       	ldd	r25, Y+57	; 0x39
    1214:	dc 01       	movw	r26, r24
    1216:	a2 0f       	add	r26, r18
    1218:	b3 1f       	adc	r27, r19
    121a:	89 a9       	ldd	r24, Y+49	; 0x31
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	ce 01       	movw	r24, r28
    1222:	c5 96       	adiw	r24, 0x35	; 53
    1224:	fc 01       	movw	r30, r24
    1226:	e2 0f       	add	r30, r18
    1228:	f3 1f       	adc	r31, r19
    122a:	80 81       	ld	r24, Z
    122c:	8c 93       	st	X, r24

		//sleep for 100micro sec
		_delay_us(100);
	}

	for(u8 Local_u8ButtonItterator = 0;Local_u8ButtonItterator<3;Local_u8ButtonItterator++)
    122e:	89 a9       	ldd	r24, Y+49	; 0x31
    1230:	8f 5f       	subi	r24, 0xFF	; 255
    1232:	89 ab       	std	Y+49, r24	; 0x31
    1234:	89 a9       	ldd	r24, Y+49	; 0x31
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	28 f3       	brcs	.-54     	; 0x1204 <BUTTON_voidButtonSampler+0x3ea>
		if(Local_u8arrTempBtns[Local_u8ButtonItterator] == -1)
			continue;
		else
			pButtons[Local_u8ButtonItterator].val = Local_u8arrTempBtns[Local_u8ButtonItterator];
	}
}
    123a:	ee 96       	adiw	r28, 0x3e	; 62
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	08 95       	ret

00001250 <DIO_voidSetPinDirection>:
#include "DIO_Register.h"
#include "DIO_Interface.h"


void DIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	27 97       	sbiw	r28, 0x07	; 7
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	89 83       	std	Y+1, r24	; 0x01
    1266:	6a 83       	std	Y+2, r22	; 0x02
    1268:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_PIN_INPUT)
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	88 23       	and	r24, r24
    126e:	09 f0       	breq	.+2      	; 0x1272 <DIO_voidSetPinDirection+0x22>
    1270:	74 c0       	rjmp	.+232    	; 0x135a <DIO_voidSetPinDirection+0x10a>
	{
		switch(Copy_u8Port)
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	3f 83       	std	Y+7, r19	; 0x07
    127a:	2e 83       	std	Y+6, r18	; 0x06
    127c:	8e 81       	ldd	r24, Y+6	; 0x06
    127e:	9f 81       	ldd	r25, Y+7	; 0x07
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	59 f1       	breq	.+86     	; 0x12dc <DIO_voidSetPinDirection+0x8c>
    1286:	2e 81       	ldd	r18, Y+6	; 0x06
    1288:	3f 81       	ldd	r19, Y+7	; 0x07
    128a:	22 30       	cpi	r18, 0x02	; 2
    128c:	31 05       	cpc	r19, r1
    128e:	2c f4       	brge	.+10     	; 0x129a <DIO_voidSetPinDirection+0x4a>
    1290:	8e 81       	ldd	r24, Y+6	; 0x06
    1292:	9f 81       	ldd	r25, Y+7	; 0x07
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	69 f0       	breq	.+26     	; 0x12b2 <DIO_voidSetPinDirection+0x62>
    1298:	d2 c0       	rjmp	.+420    	; 0x143e <DIO_voidSetPinDirection+0x1ee>
    129a:	2e 81       	ldd	r18, Y+6	; 0x06
    129c:	3f 81       	ldd	r19, Y+7	; 0x07
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	89 f1       	breq	.+98     	; 0x1306 <DIO_voidSetPinDirection+0xb6>
    12a4:	8e 81       	ldd	r24, Y+6	; 0x06
    12a6:	9f 81       	ldd	r25, Y+7	; 0x07
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <DIO_voidSetPinDirection+0x60>
    12ae:	40 c0       	rjmp	.+128    	; 0x1330 <DIO_voidSetPinDirection+0xe0>
    12b0:	c6 c0       	rjmp	.+396    	; 0x143e <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(DDRA,Copy_u8Pin);
    12b2:	aa e3       	ldi	r26, 0x3A	; 58
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	ea e3       	ldi	r30, 0x3A	; 58
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	48 2f       	mov	r20, r24
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 2e       	mov	r0, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <DIO_voidSetPinDirection+0x80>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	0a 94       	dec	r0
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <DIO_voidSetPinDirection+0x7c>
    12d4:	80 95       	com	r24
    12d6:	84 23       	and	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	b1 c0       	rjmp	.+354    	; 0x143e <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTB:
			CLR_BIT(DDRB,Copy_u8Pin);
    12dc:	a7 e3       	ldi	r26, 0x37	; 55
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e7 e3       	ldi	r30, 0x37	; 55
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_voidSetPinDirection+0xaa>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_voidSetPinDirection+0xa6>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	9c c0       	rjmp	.+312    	; 0x143e <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTC:
			CLR_BIT(DDRC,Copy_u8Pin);
    1306:	a4 e3       	ldi	r26, 0x34	; 52
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e4 e3       	ldi	r30, 0x34	; 52
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_voidSetPinDirection+0xd4>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_voidSetPinDirection+0xd0>
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	87 c0       	rjmp	.+270    	; 0x143e <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTD:
			CLR_BIT(DDRD,Copy_u8Pin);
    1330:	a1 e3       	ldi	r26, 0x31	; 49
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e1 e3       	ldi	r30, 0x31	; 49
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_voidSetPinDirection+0xfe>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_voidSetPinDirection+0xfa>
    1352:	80 95       	com	r24
    1354:	84 23       	and	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	72 c0       	rjmp	.+228    	; 0x143e <DIO_voidSetPinDirection+0x1ee>
			break;
		}
	}
	else if(Copy_u8Direction == DIO_PIN_OUTPUT)
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	09 f0       	breq	.+2      	; 0x1362 <DIO_voidSetPinDirection+0x112>
    1360:	6e c0       	rjmp	.+220    	; 0x143e <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port)
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	3d 83       	std	Y+5, r19	; 0x05
    136a:	2c 83       	std	Y+4, r18	; 0x04
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	9d 81       	ldd	r25, Y+5	; 0x05
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	91 05       	cpc	r25, r1
    1374:	49 f1       	breq	.+82     	; 0x13c8 <DIO_voidSetPinDirection+0x178>
    1376:	2c 81       	ldd	r18, Y+4	; 0x04
    1378:	3d 81       	ldd	r19, Y+5	; 0x05
    137a:	22 30       	cpi	r18, 0x02	; 2
    137c:	31 05       	cpc	r19, r1
    137e:	2c f4       	brge	.+10     	; 0x138a <DIO_voidSetPinDirection+0x13a>
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	9d 81       	ldd	r25, Y+5	; 0x05
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	61 f0       	breq	.+24     	; 0x13a0 <DIO_voidSetPinDirection+0x150>
    1388:	5a c0       	rjmp	.+180    	; 0x143e <DIO_voidSetPinDirection+0x1ee>
    138a:	2c 81       	ldd	r18, Y+4	; 0x04
    138c:	3d 81       	ldd	r19, Y+5	; 0x05
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	71 f1       	breq	.+92     	; 0x13f0 <DIO_voidSetPinDirection+0x1a0>
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	91 05       	cpc	r25, r1
    139c:	e9 f1       	breq	.+122    	; 0x1418 <DIO_voidSetPinDirection+0x1c8>
    139e:	4f c0       	rjmp	.+158    	; 0x143e <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(DDRA,Copy_u8Pin);
    13a0:	aa e3       	ldi	r26, 0x3A	; 58
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	ea e3       	ldi	r30, 0x3A	; 58
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_voidSetPinDirection+0x16e>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_voidSetPinDirection+0x16a>
    13c2:	84 2b       	or	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	3b c0       	rjmp	.+118    	; 0x143e <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTB:
			SET_BIT(DDRB,Copy_u8Pin);
    13c8:	a7 e3       	ldi	r26, 0x37	; 55
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e7 e3       	ldi	r30, 0x37	; 55
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	48 2f       	mov	r20, r24
    13d4:	8a 81       	ldd	r24, Y+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	02 2e       	mov	r0, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_voidSetPinDirection+0x196>
    13e2:	88 0f       	add	r24, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	0a 94       	dec	r0
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <DIO_voidSetPinDirection+0x192>
    13ea:	84 2b       	or	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	27 c0       	rjmp	.+78     	; 0x143e <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(DDRC,Copy_u8Pin);
    13f0:	a4 e3       	ldi	r26, 0x34	; 52
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e4 e3       	ldi	r30, 0x34	; 52
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_voidSetPinDirection+0x1be>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_voidSetPinDirection+0x1ba>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
    1416:	13 c0       	rjmp	.+38     	; 0x143e <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTD:
			SET_BIT(DDRD,Copy_u8Pin);
    1418:	a1 e3       	ldi	r26, 0x31	; 49
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e1 e3       	ldi	r30, 0x31	; 49
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	48 2f       	mov	r20, r24
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_voidSetPinDirection+0x1e6>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_voidSetPinDirection+0x1e2>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
			break;
		}
	}

}
    143e:	27 96       	adiw	r28, 0x07	; 7
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	27 97       	sbiw	r28, 0x07	; 7
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	6a 83       	std	Y+2, r22	; 0x02
    1468:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == DIO_HIGH)
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	09 f0       	breq	.+2      	; 0x1472 <DIO_voidSetPinValue+0x22>
    1470:	6f c0       	rjmp	.+222    	; 0x1550 <DIO_voidSetPinValue+0x100>
	{
		switch(Copy_u8Port)
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	3f 83       	std	Y+7, r19	; 0x07
    147a:	2e 83       	std	Y+6, r18	; 0x06
    147c:	8e 81       	ldd	r24, Y+6	; 0x06
    147e:	9f 81       	ldd	r25, Y+7	; 0x07
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	91 05       	cpc	r25, r1
    1484:	49 f1       	breq	.+82     	; 0x14d8 <DIO_voidSetPinValue+0x88>
    1486:	2e 81       	ldd	r18, Y+6	; 0x06
    1488:	3f 81       	ldd	r19, Y+7	; 0x07
    148a:	22 30       	cpi	r18, 0x02	; 2
    148c:	31 05       	cpc	r19, r1
    148e:	2c f4       	brge	.+10     	; 0x149a <DIO_voidSetPinValue+0x4a>
    1490:	8e 81       	ldd	r24, Y+6	; 0x06
    1492:	9f 81       	ldd	r25, Y+7	; 0x07
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	61 f0       	breq	.+24     	; 0x14b0 <DIO_voidSetPinValue+0x60>
    1498:	d2 c0       	rjmp	.+420    	; 0x163e <DIO_voidSetPinValue+0x1ee>
    149a:	2e 81       	ldd	r18, Y+6	; 0x06
    149c:	3f 81       	ldd	r19, Y+7	; 0x07
    149e:	22 30       	cpi	r18, 0x02	; 2
    14a0:	31 05       	cpc	r19, r1
    14a2:	71 f1       	breq	.+92     	; 0x1500 <DIO_voidSetPinValue+0xb0>
    14a4:	8e 81       	ldd	r24, Y+6	; 0x06
    14a6:	9f 81       	ldd	r25, Y+7	; 0x07
    14a8:	83 30       	cpi	r24, 0x03	; 3
    14aa:	91 05       	cpc	r25, r1
    14ac:	e9 f1       	breq	.+122    	; 0x1528 <DIO_voidSetPinValue+0xd8>
    14ae:	c7 c0       	rjmp	.+398    	; 0x163e <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(PORTA,Copy_u8Pin);
    14b0:	ab e3       	ldi	r26, 0x3B	; 59
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	eb e3       	ldi	r30, 0x3B	; 59
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 2e       	mov	r0, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_voidSetPinValue+0x7e>
    14ca:	88 0f       	add	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <DIO_voidSetPinValue+0x7a>
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	b3 c0       	rjmp	.+358    	; 0x163e <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTB:
			SET_BIT(PORTB,Copy_u8Pin);
    14d8:	a8 e3       	ldi	r26, 0x38	; 56
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e8 e3       	ldi	r30, 0x38	; 56
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_voidSetPinValue+0xa6>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_voidSetPinValue+0xa2>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	9f c0       	rjmp	.+318    	; 0x163e <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(PORTC,Copy_u8Pin);
    1500:	a5 e3       	ldi	r26, 0x35	; 53
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e5 e3       	ldi	r30, 0x35	; 53
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_voidSetPinValue+0xce>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <DIO_voidSetPinValue+0xca>
    1522:	84 2b       	or	r24, r20
    1524:	8c 93       	st	X, r24
    1526:	8b c0       	rjmp	.+278    	; 0x163e <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTD:
			SET_BIT(PORTD,Copy_u8Pin);
    1528:	a2 e3       	ldi	r26, 0x32	; 50
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e2 e3       	ldi	r30, 0x32	; 50
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_voidSetPinValue+0xf6>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_voidSetPinValue+0xf2>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	77 c0       	rjmp	.+238    	; 0x163e <DIO_voidSetPinValue+0x1ee>
			break;
		}

	}
	else if(Copy_u8Value == DIO_LOW)
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	88 23       	and	r24, r24
    1554:	09 f0       	breq	.+2      	; 0x1558 <DIO_voidSetPinValue+0x108>
    1556:	73 c0       	rjmp	.+230    	; 0x163e <DIO_voidSetPinValue+0x1ee>
	{
		switch(Copy_u8Port)
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	3d 83       	std	Y+5, r19	; 0x05
    1560:	2c 83       	std	Y+4, r18	; 0x04
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	91 05       	cpc	r25, r1
    156a:	59 f1       	breq	.+86     	; 0x15c2 <DIO_voidSetPinValue+0x172>
    156c:	2c 81       	ldd	r18, Y+4	; 0x04
    156e:	3d 81       	ldd	r19, Y+5	; 0x05
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	31 05       	cpc	r19, r1
    1574:	2c f4       	brge	.+10     	; 0x1580 <DIO_voidSetPinValue+0x130>
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	9d 81       	ldd	r25, Y+5	; 0x05
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	69 f0       	breq	.+26     	; 0x1598 <DIO_voidSetPinValue+0x148>
    157e:	5f c0       	rjmp	.+190    	; 0x163e <DIO_voidSetPinValue+0x1ee>
    1580:	2c 81       	ldd	r18, Y+4	; 0x04
    1582:	3d 81       	ldd	r19, Y+5	; 0x05
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	89 f1       	breq	.+98     	; 0x15ec <DIO_voidSetPinValue+0x19c>
    158a:	8c 81       	ldd	r24, Y+4	; 0x04
    158c:	9d 81       	ldd	r25, Y+5	; 0x05
    158e:	83 30       	cpi	r24, 0x03	; 3
    1590:	91 05       	cpc	r25, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <DIO_voidSetPinValue+0x146>
    1594:	40 c0       	rjmp	.+128    	; 0x1616 <DIO_voidSetPinValue+0x1c6>
    1596:	53 c0       	rjmp	.+166    	; 0x163e <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(PORTA,Copy_u8Pin);
    1598:	ab e3       	ldi	r26, 0x3B	; 59
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e3       	ldi	r30, 0x3B	; 59
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_voidSetPinValue+0x166>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_voidSetPinValue+0x162>
    15ba:	80 95       	com	r24
    15bc:	84 23       	and	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	3e c0       	rjmp	.+124    	; 0x163e <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTB:
			CLR_BIT(PORTB,Copy_u8Pin);
    15c2:	a8 e3       	ldi	r26, 0x38	; 56
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e8 e3       	ldi	r30, 0x38	; 56
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	48 2f       	mov	r20, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 2e       	mov	r0, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <DIO_voidSetPinValue+0x190>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <DIO_voidSetPinValue+0x18c>
    15e4:	80 95       	com	r24
    15e6:	84 23       	and	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	29 c0       	rjmp	.+82     	; 0x163e <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTC:
			CLR_BIT(PORTC,Copy_u8Pin);
    15ec:	a5 e3       	ldi	r26, 0x35	; 53
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e3       	ldi	r30, 0x35	; 53
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <DIO_voidSetPinValue+0x1ba>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <DIO_voidSetPinValue+0x1b6>
    160e:	80 95       	com	r24
    1610:	84 23       	and	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	14 c0       	rjmp	.+40     	; 0x163e <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTD:
			CLR_BIT(PORTD,Copy_u8Pin);
    1616:	a2 e3       	ldi	r26, 0x32	; 50
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e2 e3       	ldi	r30, 0x32	; 50
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_voidSetPinValue+0x1e4>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_voidSetPinValue+0x1e0>
    1638:	80 95       	com	r24
    163a:	84 23       	and	r24, r20
    163c:	8c 93       	st	X, r24
			break;
		}

	}
}
    163e:	27 96       	adiw	r28, 0x07	; 7
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <DIO_voidTogglePinValue+0x6>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <DIO_voidTogglePinValue+0x8>
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	3c 83       	std	Y+4, r19	; 0x04
    1668:	2b 83       	std	Y+3, r18	; 0x03
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	49 f1       	breq	.+82     	; 0x16c6 <DIO_voidTogglePinValue+0x76>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	2c f4       	brge	.+10     	; 0x1688 <DIO_voidTogglePinValue+0x38>
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	61 f0       	breq	.+24     	; 0x169e <DIO_voidTogglePinValue+0x4e>
    1686:	5a c0       	rjmp	.+180    	; 0x173c <DIO_voidTogglePinValue+0xec>
    1688:	2b 81       	ldd	r18, Y+3	; 0x03
    168a:	3c 81       	ldd	r19, Y+4	; 0x04
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	71 f1       	breq	.+92     	; 0x16ee <DIO_voidTogglePinValue+0x9e>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	e9 f1       	breq	.+122    	; 0x1716 <DIO_voidTogglePinValue+0xc6>
    169c:	4f c0       	rjmp	.+158    	; 0x173c <DIO_voidTogglePinValue+0xec>
	{
	case DIO_PORTA:
		TOG_BIT(PORTA,Copy_u8Pin);
    169e:	ab e3       	ldi	r26, 0x3B	; 59
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	eb e3       	ldi	r30, 0x3B	; 59
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_voidTogglePinValue+0x6c>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_voidTogglePinValue+0x68>
    16c0:	84 27       	eor	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	3b c0       	rjmp	.+118    	; 0x173c <DIO_voidTogglePinValue+0xec>
		break;
	case DIO_PORTB:
		TOG_BIT(PORTB,Copy_u8Pin);
    16c6:	a8 e3       	ldi	r26, 0x38	; 56
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e8 e3       	ldi	r30, 0x38	; 56
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_voidTogglePinValue+0x94>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_voidTogglePinValue+0x90>
    16e8:	84 27       	eor	r24, r20
    16ea:	8c 93       	st	X, r24
    16ec:	27 c0       	rjmp	.+78     	; 0x173c <DIO_voidTogglePinValue+0xec>
		break;
	case DIO_PORTC:
		TOG_BIT(PORTC,Copy_u8Pin);
    16ee:	a5 e3       	ldi	r26, 0x35	; 53
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e5 e3       	ldi	r30, 0x35	; 53
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_voidTogglePinValue+0xbc>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_voidTogglePinValue+0xb8>
    1710:	84 27       	eor	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	13 c0       	rjmp	.+38     	; 0x173c <DIO_voidTogglePinValue+0xec>
		break;
	case DIO_PORTD:
		TOG_BIT(PORTD,Copy_u8Pin);
    1716:	a2 e3       	ldi	r26, 0x32	; 50
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e2 e3       	ldi	r30, 0x32	; 50
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_voidTogglePinValue+0xe4>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <DIO_voidTogglePinValue+0xe0>
    1738:	84 27       	eor	r24, r20
    173a:	8c 93       	st	X, r24
		break;
	}
}
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	00 d0       	rcall	.+0      	; 0x1750 <DIO_voidSetPortDirection+0x6>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <DIO_voidSetPortDirection+0x8>
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	3c 83       	std	Y+4, r19	; 0x04
    1762:	2b 83       	std	Y+3, r18	; 0x03
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	91 05       	cpc	r25, r1
    176c:	d1 f0       	breq	.+52     	; 0x17a2 <DIO_voidSetPortDirection+0x58>
    176e:	2b 81       	ldd	r18, Y+3	; 0x03
    1770:	3c 81       	ldd	r19, Y+4	; 0x04
    1772:	22 30       	cpi	r18, 0x02	; 2
    1774:	31 05       	cpc	r19, r1
    1776:	2c f4       	brge	.+10     	; 0x1782 <DIO_voidSetPortDirection+0x38>
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	61 f0       	breq	.+24     	; 0x1798 <DIO_voidSetPortDirection+0x4e>
    1780:	1e c0       	rjmp	.+60     	; 0x17be <DIO_voidSetPortDirection+0x74>
    1782:	2b 81       	ldd	r18, Y+3	; 0x03
    1784:	3c 81       	ldd	r19, Y+4	; 0x04
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	81 f0       	breq	.+32     	; 0x17ac <DIO_voidSetPortDirection+0x62>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	91 05       	cpc	r25, r1
    1794:	81 f0       	breq	.+32     	; 0x17b6 <DIO_voidSetPortDirection+0x6c>
    1796:	13 c0       	rjmp	.+38     	; 0x17be <DIO_voidSetPortDirection+0x74>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Direction;
    1798:	ea e3       	ldi	r30, 0x3A	; 58
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	80 83       	st	Z, r24
    17a0:	0e c0       	rjmp	.+28     	; 0x17be <DIO_voidSetPortDirection+0x74>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Direction;
    17a2:	e7 e3       	ldi	r30, 0x37	; 55
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	80 83       	st	Z, r24
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <DIO_voidSetPortDirection+0x74>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Direction;
    17ac:	e4 e3       	ldi	r30, 0x34	; 52
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	80 83       	st	Z, r24
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <DIO_voidSetPortDirection+0x74>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Direction;
    17b6:	e1 e3       	ldi	r30, 0x31	; 49
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	80 83       	st	Z, r24
			break;
		}
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <DIO_voidSetPortValue+0x6>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <DIO_voidSetPortValue+0x8>
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	3c 83       	std	Y+4, r19	; 0x04
    17e4:	2b 83       	std	Y+3, r18	; 0x03
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	91 05       	cpc	r25, r1
    17ee:	d1 f0       	breq	.+52     	; 0x1824 <DIO_voidSetPortValue+0x58>
    17f0:	2b 81       	ldd	r18, Y+3	; 0x03
    17f2:	3c 81       	ldd	r19, Y+4	; 0x04
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	2c f4       	brge	.+10     	; 0x1804 <DIO_voidSetPortValue+0x38>
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	61 f0       	breq	.+24     	; 0x181a <DIO_voidSetPortValue+0x4e>
    1802:	1e c0       	rjmp	.+60     	; 0x1840 <DIO_voidSetPortValue+0x74>
    1804:	2b 81       	ldd	r18, Y+3	; 0x03
    1806:	3c 81       	ldd	r19, Y+4	; 0x04
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	81 f0       	breq	.+32     	; 0x182e <DIO_voidSetPortValue+0x62>
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	91 05       	cpc	r25, r1
    1816:	81 f0       	breq	.+32     	; 0x1838 <DIO_voidSetPortValue+0x6c>
    1818:	13 c0       	rjmp	.+38     	; 0x1840 <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA:
		PORTA = Copy_u8Value;
    181a:	eb e3       	ldi	r30, 0x3B	; 59
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	80 83       	st	Z, r24
    1822:	0e c0       	rjmp	.+28     	; 0x1840 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTB:
		PORTB = Copy_u8Value;
    1824:	e8 e3       	ldi	r30, 0x38	; 56
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	80 83       	st	Z, r24
    182c:	09 c0       	rjmp	.+18     	; 0x1840 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTC:
		PORTC = Copy_u8Value;
    182e:	e5 e3       	ldi	r30, 0x35	; 53
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	80 83       	st	Z, r24
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTD:
		PORTD = Copy_u8Value;
    1838:	e2 e3       	ldi	r30, 0x32	; 50
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	80 83       	st	Z, r24
		break;
	}
}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <DIO_u8GetPinValue+0x6>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <DIO_u8GetPinValue+0x8>
    1856:	0f 92       	push	r0
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	8a 83       	std	Y+2, r24	; 0x02
    185e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnValue;
	switch(Copy_u8Port)
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	3d 83       	std	Y+5, r19	; 0x05
    1868:	2c 83       	std	Y+4, r18	; 0x04
    186a:	4c 81       	ldd	r20, Y+4	; 0x04
    186c:	5d 81       	ldd	r21, Y+5	; 0x05
    186e:	41 30       	cpi	r20, 0x01	; 1
    1870:	51 05       	cpc	r21, r1
    1872:	41 f1       	breq	.+80     	; 0x18c4 <DIO_u8GetPinValue+0x76>
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	9d 81       	ldd	r25, Y+5	; 0x05
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	91 05       	cpc	r25, r1
    187c:	34 f4       	brge	.+12     	; 0x188a <DIO_u8GetPinValue+0x3c>
    187e:	2c 81       	ldd	r18, Y+4	; 0x04
    1880:	3d 81       	ldd	r19, Y+5	; 0x05
    1882:	21 15       	cp	r18, r1
    1884:	31 05       	cpc	r19, r1
    1886:	61 f0       	breq	.+24     	; 0x18a0 <DIO_u8GetPinValue+0x52>
    1888:	52 c0       	rjmp	.+164    	; 0x192e <DIO_u8GetPinValue+0xe0>
    188a:	4c 81       	ldd	r20, Y+4	; 0x04
    188c:	5d 81       	ldd	r21, Y+5	; 0x05
    188e:	42 30       	cpi	r20, 0x02	; 2
    1890:	51 05       	cpc	r21, r1
    1892:	51 f1       	breq	.+84     	; 0x18e8 <DIO_u8GetPinValue+0x9a>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	91 05       	cpc	r25, r1
    189c:	b9 f1       	breq	.+110    	; 0x190c <DIO_u8GetPinValue+0xbe>
    189e:	47 c0       	rjmp	.+142    	; 0x192e <DIO_u8GetPinValue+0xe0>
	{
	case DIO_PORTA:
		Local_u8ReturnValue = GET_BIT(PINA,Copy_u8Pin);
    18a0:	e9 e3       	ldi	r30, 0x39	; 57
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a9 01       	movw	r20, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_u8GetPinValue+0x6a>
    18b4:	55 95       	asr	r21
    18b6:	47 95       	ror	r20
    18b8:	8a 95       	dec	r24
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_u8GetPinValue+0x66>
    18bc:	ca 01       	movw	r24, r20
    18be:	81 70       	andi	r24, 0x01	; 1
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	35 c0       	rjmp	.+106    	; 0x192e <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTB:
		Local_u8ReturnValue = GET_BIT(PINB,Copy_u8Pin);
    18c4:	e6 e3       	ldi	r30, 0x36	; 54
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a9 01       	movw	r20, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_u8GetPinValue+0x8e>
    18d8:	55 95       	asr	r21
    18da:	47 95       	ror	r20
    18dc:	8a 95       	dec	r24
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_u8GetPinValue+0x8a>
    18e0:	ca 01       	movw	r24, r20
    18e2:	81 70       	andi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	23 c0       	rjmp	.+70     	; 0x192e <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTC:
		Local_u8ReturnValue = GET_BIT(PINC,Copy_u8Pin);
    18e8:	e3 e3       	ldi	r30, 0x33	; 51
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a9 01       	movw	r20, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <DIO_u8GetPinValue+0xb2>
    18fc:	55 95       	asr	r21
    18fe:	47 95       	ror	r20
    1900:	8a 95       	dec	r24
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <DIO_u8GetPinValue+0xae>
    1904:	ca 01       	movw	r24, r20
    1906:	81 70       	andi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	11 c0       	rjmp	.+34     	; 0x192e <DIO_u8GetPinValue+0xe0>
		break;
	case DIO_PORTD:
		Local_u8ReturnValue = GET_BIT(PIND,Copy_u8Pin);
    190c:	e0 e3       	ldi	r30, 0x30	; 48
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	88 2f       	mov	r24, r24
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a9 01       	movw	r20, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_u8GetPinValue+0xd6>
    1920:	55 95       	asr	r21
    1922:	47 95       	ror	r20
    1924:	8a 95       	dec	r24
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_u8GetPinValue+0xd2>
    1928:	ca 01       	movw	r24, r20
    192a:	81 70       	andi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ReturnValue;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <LCD_voidSendCommand>:
 */

#include "LCD_Interface.h"

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
    1948:	2f 97       	sbiw	r28, 0x0f	; 15
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	8f 87       	std	Y+15, r24	; 0x0f
	 * set RW to low
	 * send command

	 * set enable */

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    1960:	83 e0       	ldi	r24, 0x03	; 3
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    196a:	82 e0       	ldi	r24, 0x02	; 2
    196c:	6f 85       	ldd	r22, Y+15	; 0x0f
    196e:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <DIO_voidSetPortValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1972:	83 e0       	ldi	r24, 0x03	; 3
    1974:	62 e0       	ldi	r22, 0x02	; 2
    1976:	41 e0       	ldi	r20, 0x01	; 1
    1978:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e0       	ldi	r26, 0x00	; 0
    1982:	b0 e4       	ldi	r27, 0x40	; 64
    1984:	8b 87       	std	Y+11, r24	; 0x0b
    1986:	9c 87       	std	Y+12, r25	; 0x0c
    1988:	ad 87       	std	Y+13, r26	; 0x0d
    198a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6b 85       	ldd	r22, Y+11	; 0x0b
    198e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1990:	8d 85       	ldd	r24, Y+13	; 0x0d
    1992:	9e 85       	ldd	r25, Y+14	; 0x0e
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a ef       	ldi	r20, 0xFA	; 250
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	8f 83       	std	Y+7, r24	; 0x07
    19a6:	98 87       	std	Y+8, r25	; 0x08
    19a8:	a9 87       	std	Y+9, r26	; 0x09
    19aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ac:	6f 81       	ldd	r22, Y+7	; 0x07
    19ae:	78 85       	ldd	r23, Y+8	; 0x08
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <LCD_voidSendCommand+0xee>
    1a10:	88 ec       	ldi	r24, 0xC8	; 200
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9c 83       	std	Y+4, r25	; 0x04
    1a16:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_voidSendCommand+0xdc>
    1a20:	9c 83       	std	Y+4, r25	; 0x04
    1a22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	9e 81       	ldd	r25, Y+6	; 0x06
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	9e 83       	std	Y+6, r25	; 0x06
    1a2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <LCD_voidSendCommand+0xd0>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	9a 83       	std	Y+2, r25	; 0x02
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_voidSendCommand+0x118>
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1a60:	83 e0       	ldi	r24, 0x03	; 3
    1a62:	62 e0       	ldi	r22, 0x02	; 2
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>
}
    1a6a:	2f 96       	adiw	r28, 0x0f	; 15
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	2f 97       	sbiw	r28, 0x0f	; 15
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
		 * set RS to high
		 * set RW to low
		 * send data
		 * set enable */

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	61 e0       	ldi	r22, 0x01	; 1
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>
	DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Data);
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1aaa:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <DIO_voidSetPortValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1aae:	83 e0       	ldi	r24, 0x03	; 3
    1ab0:	62 e0       	ldi	r22, 0x02	; 2
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 e0       	ldi	r26, 0x00	; 0
    1abe:	b0 e4       	ldi	r27, 0x40	; 64
    1ac0:	8b 87       	std	Y+11, r24	; 0x0b
    1ac2:	9c 87       	std	Y+12, r25	; 0x0c
    1ac4:	ad 87       	std	Y+13, r26	; 0x0d
    1ac6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a ef       	ldi	r20, 0xFA	; 250
    1ad6:	54 e4       	ldi	r21, 0x44	; 68
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8f 83       	std	Y+7, r24	; 0x07
    1ae2:	98 87       	std	Y+8, r25	; 0x08
    1ae4:	a9 87       	std	Y+9, r26	; 0x09
    1ae6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aea:	78 85       	ldd	r23, Y+8	; 0x08
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	2c f4       	brge	.+10     	; 0x1b0a <LCD_voidSendData+0x8e>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
    1b08:	3f c0       	rjmp	.+126    	; 0x1b88 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0c:	78 85       	ldd	r23, Y+8	; 0x08
    1b0e:	89 85       	ldd	r24, Y+9	; 0x09
    1b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	4f e7       	ldi	r20, 0x7F	; 127
    1b18:	57 e4       	ldi	r21, 0x47	; 71
    1b1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b1e:	18 16       	cp	r1, r24
    1b20:	4c f5       	brge	.+82     	; 0x1b74 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	9e 83       	std	Y+6, r25	; 0x06
    1b48:	8d 83       	std	Y+5, r24	; 0x05
    1b4a:	0f c0       	rjmp	.+30     	; 0x1b6a <LCD_voidSendData+0xee>
    1b4c:	88 ec       	ldi	r24, 0xC8	; 200
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9c 83       	std	Y+4, r25	; 0x04
    1b52:	8b 83       	std	Y+3, r24	; 0x03
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <LCD_voidSendData+0xdc>
    1b5c:	9c 83       	std	Y+4, r25	; 0x04
    1b5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	01 97       	sbiw	r24, 0x01	; 1
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	69 f7       	brne	.-38     	; 0x1b4c <LCD_voidSendData+0xd0>
    1b72:	14 c0       	rjmp	.+40     	; 0x1b9c <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b74:	6f 81       	ldd	r22, Y+7	; 0x07
    1b76:	78 85       	ldd	r23, Y+8	; 0x08
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	9e 83       	std	Y+6, r25	; 0x06
    1b86:	8d 83       	std	Y+5, r24	; 0x05
    1b88:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8c:	9a 83       	std	Y+2, r25	; 0x02
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_voidSendData+0x118>
    1b98:	9a 83       	std	Y+2, r25	; 0x02
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	62 e0       	ldi	r22, 0x02	; 2
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	0e 94 28 0a 	call	0x1450	; 0x1450 <DIO_voidSetPinValue>
}
    1ba6:	2f 96       	adiw	r28, 0x0f	; 15
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <LCD_voidLCDInit>:

void LCD_voidLCDInit(void)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	e8 97       	sbiw	r28, 0x38	; 56
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	a0 ef       	ldi	r26, 0xF0	; 240
    1bd2:	b1 e4       	ldi	r27, 0x41	; 65
    1bd4:	8d ab       	std	Y+53, r24	; 0x35
    1bd6:	9e ab       	std	Y+54, r25	; 0x36
    1bd8:	af ab       	std	Y+55, r26	; 0x37
    1bda:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bdc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bde:	7e a9       	ldd	r23, Y+54	; 0x36
    1be0:	8f a9       	ldd	r24, Y+55	; 0x37
    1be2:	98 ad       	ldd	r25, Y+56	; 0x38
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a ef       	ldi	r20, 0xFA	; 250
    1bea:	54 e4       	ldi	r21, 0x44	; 68
    1bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	89 ab       	std	Y+49, r24	; 0x31
    1bf6:	9a ab       	std	Y+50, r25	; 0x32
    1bf8:	ab ab       	std	Y+51, r26	; 0x33
    1bfa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bfc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfe:	7a a9       	ldd	r23, Y+50	; 0x32
    1c00:	8b a9       	ldd	r24, Y+51	; 0x33
    1c02:	9c a9       	ldd	r25, Y+52	; 0x34
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e8       	ldi	r20, 0x80	; 128
    1c0a:	5f e3       	ldi	r21, 0x3F	; 63
    1c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c10:	88 23       	and	r24, r24
    1c12:	2c f4       	brge	.+10     	; 0x1c1e <LCD_voidLCDInit+0x66>
		__ticks = 1;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	98 ab       	std	Y+48, r25	; 0x30
    1c1a:	8f a7       	std	Y+47, r24	; 0x2f
    1c1c:	3f c0       	rjmp	.+126    	; 0x1c9c <LCD_voidLCDInit+0xe4>
	else if (__tmp > 65535)
    1c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c20:	7a a9       	ldd	r23, Y+50	; 0x32
    1c22:	8b a9       	ldd	r24, Y+51	; 0x33
    1c24:	9c a9       	ldd	r25, Y+52	; 0x34
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	3f ef       	ldi	r19, 0xFF	; 255
    1c2a:	4f e7       	ldi	r20, 0x7F	; 127
    1c2c:	57 e4       	ldi	r21, 0x47	; 71
    1c2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c32:	18 16       	cp	r1, r24
    1c34:	4c f5       	brge	.+82     	; 0x1c88 <LCD_voidLCDInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c36:	6d a9       	ldd	r22, Y+53	; 0x35
    1c38:	7e a9       	ldd	r23, Y+54	; 0x36
    1c3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e2       	ldi	r20, 0x20	; 32
    1c44:	51 e4       	ldi	r21, 0x41	; 65
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	98 ab       	std	Y+48, r25	; 0x30
    1c5c:	8f a7       	std	Y+47, r24	; 0x2f
    1c5e:	0f c0       	rjmp	.+30     	; 0x1c7e <LCD_voidLCDInit+0xc6>
    1c60:	88 ec       	ldi	r24, 0xC8	; 200
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9e a7       	std	Y+46, r25	; 0x2e
    1c66:	8d a7       	std	Y+45, r24	; 0x2d
    1c68:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c6a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_voidLCDInit+0xb4>
    1c70:	9e a7       	std	Y+46, r25	; 0x2e
    1c72:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c74:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c76:	98 a9       	ldd	r25, Y+48	; 0x30
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	98 ab       	std	Y+48, r25	; 0x30
    1c7c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c80:	98 a9       	ldd	r25, Y+48	; 0x30
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	69 f7       	brne	.-38     	; 0x1c60 <LCD_voidLCDInit+0xa8>
    1c86:	14 c0       	rjmp	.+40     	; 0x1cb0 <LCD_voidLCDInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c88:	69 a9       	ldd	r22, Y+49	; 0x31
    1c8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	98 ab       	std	Y+48, r25	; 0x30
    1c9a:	8f a7       	std	Y+47, r24	; 0x2f
    1c9c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c9e:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca0:	9c a7       	std	Y+44, r25	; 0x2c
    1ca2:	8b a7       	std	Y+43, r24	; 0x2b
    1ca4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <LCD_voidLCDInit+0xf0>
    1cac:	9c a7       	std	Y+44, r25	; 0x2c
    1cae:	8b a7       	std	Y+43, r24	; 0x2b
	 * send clear display command
	 * wait 1ms
	 * */

	_delay_ms(30);
	LCD_voidSendCommand(0b00111000);
    1cb0:	88 e3       	ldi	r24, 0x38	; 56
    1cb2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_voidSendCommand>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	8f a3       	std	Y+39, r24	; 0x27
    1cc0:	98 a7       	std	Y+40, r25	; 0x28
    1cc2:	a9 a7       	std	Y+41, r26	; 0x29
    1cc4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cca:	89 a5       	ldd	r24, Y+41	; 0x29
    1ccc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	4a ef       	ldi	r20, 0xFA	; 250
    1cd4:	54 e4       	ldi	r21, 0x44	; 68
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8b a3       	std	Y+35, r24	; 0x23
    1ce0:	9c a3       	std	Y+36, r25	; 0x24
    1ce2:	ad a3       	std	Y+37, r26	; 0x25
    1ce4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cea:	8d a1       	ldd	r24, Y+37	; 0x25
    1cec:	9e a1       	ldd	r25, Y+38	; 0x26
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	2c f4       	brge	.+10     	; 0x1d08 <LCD_voidLCDInit+0x150>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9a a3       	std	Y+34, r25	; 0x22
    1d04:	89 a3       	std	Y+33, r24	; 0x21
    1d06:	3f c0       	rjmp	.+126    	; 0x1d86 <LCD_voidLCDInit+0x1ce>
	else if (__tmp > 65535)
    1d08:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f ef       	ldi	r19, 0xFF	; 255
    1d14:	4f e7       	ldi	r20, 0x7F	; 127
    1d16:	57 e4       	ldi	r21, 0x47	; 71
    1d18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d1c:	18 16       	cp	r1, r24
    1d1e:	4c f5       	brge	.+82     	; 0x1d72 <LCD_voidLCDInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d20:	6f a1       	ldd	r22, Y+39	; 0x27
    1d22:	78 a5       	ldd	r23, Y+40	; 0x28
    1d24:	89 a5       	ldd	r24, Y+41	; 0x29
    1d26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e2       	ldi	r20, 0x20	; 32
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	bc 01       	movw	r22, r24
    1d3a:	cd 01       	movw	r24, r26
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	9a a3       	std	Y+34, r25	; 0x22
    1d46:	89 a3       	std	Y+33, r24	; 0x21
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <LCD_voidLCDInit+0x1b0>
    1d4a:	88 ec       	ldi	r24, 0xC8	; 200
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	98 a3       	std	Y+32, r25	; 0x20
    1d50:	8f 8f       	std	Y+31, r24	; 0x1f
    1d52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d54:	98 a1       	ldd	r25, Y+32	; 0x20
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_voidLCDInit+0x19e>
    1d5a:	98 a3       	std	Y+32, r25	; 0x20
    1d5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d60:	9a a1       	ldd	r25, Y+34	; 0x22
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	9a a3       	std	Y+34, r25	; 0x22
    1d66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d68:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	69 f7       	brne	.-38     	; 0x1d4a <LCD_voidLCDInit+0x192>
    1d70:	14 c0       	rjmp	.+40     	; 0x1d9a <LCD_voidLCDInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d72:	6b a1       	ldd	r22, Y+35	; 0x23
    1d74:	7c a1       	ldd	r23, Y+36	; 0x24
    1d76:	8d a1       	ldd	r24, Y+37	; 0x25
    1d78:	9e a1       	ldd	r25, Y+38	; 0x26
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9a a3       	std	Y+34, r25	; 0x22
    1d84:	89 a3       	std	Y+33, r24	; 0x21
    1d86:	89 a1       	ldd	r24, Y+33	; 0x21
    1d88:	9a a1       	ldd	r25, Y+34	; 0x22
    1d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_voidLCDInit+0x1da>
    1d96:	9e 8f       	std	Y+30, r25	; 0x1e
    1d98:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidSendCommand(0b00001100);
    1d9a:	8c e0       	ldi	r24, 0x0C	; 12
    1d9c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_voidSendCommand>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e8       	ldi	r26, 0x80	; 128
    1da6:	bf e3       	ldi	r27, 0x3F	; 63
    1da8:	89 8f       	std	Y+25, r24	; 0x19
    1daa:	9a 8f       	std	Y+26, r25	; 0x1a
    1dac:	ab 8f       	std	Y+27, r26	; 0x1b
    1dae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	69 8d       	ldd	r22, Y+25	; 0x19
    1db2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a ef       	ldi	r20, 0xFA	; 250
    1dbe:	54 e4       	ldi	r21, 0x44	; 68
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8d 8b       	std	Y+21, r24	; 0x15
    1dca:	9e 8b       	std	Y+22, r25	; 0x16
    1dcc:	af 8b       	std	Y+23, r26	; 0x17
    1dce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <LCD_voidLCDInit+0x23a>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9c 8b       	std	Y+20, r25	; 0x14
    1dee:	8b 8b       	std	Y+19, r24	; 0x13
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <LCD_voidLCDInit+0x2b8>
	else if (__tmp > 65535)
    1df2:	6d 89       	ldd	r22, Y+21	; 0x15
    1df4:	7e 89       	ldd	r23, Y+22	; 0x16
    1df6:	8f 89       	ldd	r24, Y+23	; 0x17
    1df8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <LCD_voidLCDInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9c 8b       	std	Y+20, r25	; 0x14
    1e30:	8b 8b       	std	Y+19, r24	; 0x13
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <LCD_voidLCDInit+0x29a>
    1e34:	88 ec       	ldi	r24, 0xC8	; 200
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	9a 8b       	std	Y+18, r25	; 0x12
    1e3a:	89 8b       	std	Y+17, r24	; 0x11
    1e3c:	89 89       	ldd	r24, Y+17	; 0x11
    1e3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_voidLCDInit+0x288>
    1e44:	9a 8b       	std	Y+18, r25	; 0x12
    1e46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9c 8b       	std	Y+20, r25	; 0x14
    1e50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <LCD_voidLCDInit+0x27c>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <LCD_voidLCDInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e60:	8f 89       	ldd	r24, Y+23	; 0x17
    1e62:	98 8d       	ldd	r25, Y+24	; 0x18
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9c 8b       	std	Y+20, r25	; 0x14
    1e6e:	8b 8b       	std	Y+19, r24	; 0x13
    1e70:	8b 89       	ldd	r24, Y+19	; 0x13
    1e72:	9c 89       	ldd	r25, Y+20	; 0x14
    1e74:	98 8b       	std	Y+16, r25	; 0x10
    1e76:	8f 87       	std	Y+15, r24	; 0x0f
    1e78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7a:	98 89       	ldd	r25, Y+16	; 0x10
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_voidLCDInit+0x2c4>
    1e80:	98 8b       	std	Y+16, r25	; 0x10
    1e82:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(1);
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_voidSendCommand>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a0 e0       	ldi	r26, 0x00	; 0
    1e90:	b0 e4       	ldi	r27, 0x40	; 64
    1e92:	8b 87       	std	Y+11, r24	; 0x0b
    1e94:	9c 87       	std	Y+12, r25	; 0x0c
    1e96:	ad 87       	std	Y+13, r26	; 0x0d
    1e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	4a ef       	ldi	r20, 0xFA	; 250
    1ea8:	54 e4       	ldi	r21, 0x44	; 68
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	8f 83       	std	Y+7, r24	; 0x07
    1eb4:	98 87       	std	Y+8, r25	; 0x08
    1eb6:	a9 87       	std	Y+9, r26	; 0x09
    1eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eba:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebc:	78 85       	ldd	r23, Y+8	; 0x08
    1ebe:	89 85       	ldd	r24, Y+9	; 0x09
    1ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e8       	ldi	r20, 0x80	; 128
    1ec8:	5f e3       	ldi	r21, 0x3F	; 63
    1eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ece:	88 23       	and	r24, r24
    1ed0:	2c f4       	brge	.+10     	; 0x1edc <LCD_voidLCDInit+0x324>
		__ticks = 1;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9e 83       	std	Y+6, r25	; 0x06
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	3f c0       	rjmp	.+126    	; 0x1f5a <LCD_voidLCDInit+0x3a2>
	else if (__tmp > 65535)
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	3f ef       	ldi	r19, 0xFF	; 255
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	57 e4       	ldi	r21, 0x47	; 71
    1eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	4c f5       	brge	.+82     	; 0x1f46 <LCD_voidLCDInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	0f c0       	rjmp	.+30     	; 0x1f3c <LCD_voidLCDInit+0x384>
    1f1e:	88 ec       	ldi	r24, 0xC8	; 200
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	9c 83       	std	Y+4, r25	; 0x04
    1f24:	8b 83       	std	Y+3, r24	; 0x03
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <LCD_voidLCDInit+0x372>
    1f2e:	9c 83       	std	Y+4, r25	; 0x04
    1f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	9e 81       	ldd	r25, Y+6	; 0x06
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	69 f7       	brne	.-38     	; 0x1f1e <LCD_voidLCDInit+0x366>
    1f44:	14 c0       	rjmp	.+40     	; 0x1f6e <LCD_voidLCDInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f46:	6f 81       	ldd	r22, Y+7	; 0x07
    1f48:	78 85       	ldd	r23, Y+8	; 0x08
    1f4a:	89 85       	ldd	r24, Y+9	; 0x09
    1f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	9e 83       	std	Y+6, r25	; 0x06
    1f58:	8d 83       	std	Y+5, r24	; 0x05
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	9a 83       	std	Y+2, r25	; 0x02
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	9a 81       	ldd	r25, Y+2	; 0x02
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_voidLCDInit+0x3ae>
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1f6e:	e8 96       	adiw	r28, 0x38	; 56
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <LCD_voidConfiguration>:

void LCD_voidConfiguration(void)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(LCD_DATA_PORT,DIO_PORT_OUTPUT);
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	6f ef       	ldi	r22, 0xFF	; 255
    1f8c:	0e 94 a5 0b 	call	0x174a	; 0x174a <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    1f90:	83 e0       	ldi	r24, 0x03	; 3
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
    1fa4:	83 e0       	ldi	r24, 0x03	; 3
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_voidSetPinDirection>
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <LCD_voidSendString>:

void LCD_voidSendString(u8* Copy_pu8String)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <LCD_voidSendString+0x6>
    1fba:	0f 92       	push	r0
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	9b 83       	std	Y+3, r25	; 0x03
    1fc2:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 Local_u8Itterator = 0; Copy_pu8String[Local_u8Itterator] != '\0';++Local_u8Itterator)
    1fc4:	19 82       	std	Y+1, r1	; 0x01
    1fc6:	0e c0       	rjmp	.+28     	; 0x1fe4 <LCD_voidSendString+0x30>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8Itterator]);
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	e2 0f       	add	r30, r18
    1fd6:	f3 1f       	adc	r31, r19
    1fd8:	80 81       	ld	r24, Z
    1fda:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
}

void LCD_voidSendString(u8* Copy_pu8String)
{
	for(u8 Local_u8Itterator = 0; Copy_pu8String[Local_u8Itterator] != '\0';++Local_u8Itterator)
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	8f 5f       	subi	r24, 0xFF	; 255
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	9b 81       	ldd	r25, Y+3	; 0x03
    1fee:	fc 01       	movw	r30, r24
    1ff0:	e2 0f       	add	r30, r18
    1ff2:	f3 1f       	adc	r31, r19
    1ff4:	80 81       	ld	r24, Z
    1ff6:	88 23       	and	r24, r24
    1ff8:	39 f7       	brne	.-50     	; 0x1fc8 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pu8String[Local_u8Itterator]);
	}
}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	60 97       	sbiw	r28, 0x10	; 16
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	6d 87       	std	Y+13, r22	; 0x0d
    201c:	7e 87       	std	Y+14, r23	; 0x0e
    201e:	8f 87       	std	Y+15, r24	; 0x0f
    2020:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8DigitOrder = 0;
    2022:	1c 86       	std	Y+12, r1	; 0x0c
	u32 Local_u32NumberCopy = Copy_u32Number;
    2024:	8d 85       	ldd	r24, Y+13	; 0x0d
    2026:	9e 85       	ldd	r25, Y+14	; 0x0e
    2028:	af 85       	ldd	r26, Y+15	; 0x0f
    202a:	b8 89       	ldd	r27, Y+16	; 0x10
    202c:	88 87       	std	Y+8, r24	; 0x08
    202e:	99 87       	std	Y+9, r25	; 0x09
    2030:	aa 87       	std	Y+10, r26	; 0x0a
    2032:	bb 87       	std	Y+11, r27	; 0x0b
	u32 Local_u32TenthOrder = 10;
    2034:	8a e0       	ldi	r24, 0x0A	; 10
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	8c 83       	std	Y+4, r24	; 0x04
    203e:	9d 83       	std	Y+5, r25	; 0x05
    2040:	ae 83       	std	Y+6, r26	; 0x06
    2042:	bf 83       	std	Y+7, r27	; 0x07

	//test if number is less than 9;
	if(Copy_u32Number<=9)
    2044:	8d 85       	ldd	r24, Y+13	; 0x0d
    2046:	9e 85       	ldd	r25, Y+14	; 0x0e
    2048:	af 85       	ldd	r26, Y+15	; 0x0f
    204a:	b8 89       	ldd	r27, Y+16	; 0x10
    204c:	8a 30       	cpi	r24, 0x0A	; 10
    204e:	91 05       	cpc	r25, r1
    2050:	a1 05       	cpc	r26, r1
    2052:	b1 05       	cpc	r27, r1
    2054:	d0 f4       	brcc	.+52     	; 0x208a <LCD_voidSendNumber+0x84>
	{
		LCD_voidSendData(Copy_u32Number+'0');
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	80 5d       	subi	r24, 0xD0	; 208
    205a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    205e:	7f c0       	rjmp	.+254    	; 0x215e <LCD_voidSendNumber+0x158>
	}
	else
	{
		while(Local_u32NumberCopy !=0)
		{
			Local_u8DigitOrder++;
    2060:	8c 85       	ldd	r24, Y+12	; 0x0c
    2062:	8f 5f       	subi	r24, 0xFF	; 255
    2064:	8c 87       	std	Y+12, r24	; 0x0c
			Local_u32NumberCopy/=Local_u32TenthOrder;
    2066:	88 85       	ldd	r24, Y+8	; 0x08
    2068:	99 85       	ldd	r25, Y+9	; 0x09
    206a:	aa 85       	ldd	r26, Y+10	; 0x0a
    206c:	bb 85       	ldd	r27, Y+11	; 0x0b
    206e:	2c 81       	ldd	r18, Y+4	; 0x04
    2070:	3d 81       	ldd	r19, Y+5	; 0x05
    2072:	4e 81       	ldd	r20, Y+6	; 0x06
    2074:	5f 81       	ldd	r21, Y+7	; 0x07
    2076:	bc 01       	movw	r22, r24
    2078:	cd 01       	movw	r24, r26
    207a:	0e 94 43 14 	call	0x2886	; 0x2886 <__udivmodsi4>
    207e:	da 01       	movw	r26, r20
    2080:	c9 01       	movw	r24, r18
    2082:	88 87       	std	Y+8, r24	; 0x08
    2084:	99 87       	std	Y+9, r25	; 0x09
    2086:	aa 87       	std	Y+10, r26	; 0x0a
    2088:	bb 87       	std	Y+11, r27	; 0x0b
	{
		LCD_voidSendData(Copy_u32Number+'0');
	}
	else
	{
		while(Local_u32NumberCopy !=0)
    208a:	88 85       	ldd	r24, Y+8	; 0x08
    208c:	99 85       	ldd	r25, Y+9	; 0x09
    208e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2090:	bb 85       	ldd	r27, Y+11	; 0x0b
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	a1 05       	cpc	r26, r1
    2096:	b1 05       	cpc	r27, r1
    2098:	19 f7       	brne	.-58     	; 0x2060 <LCD_voidSendNumber+0x5a>
			Local_u8DigitOrder++;
			Local_u32NumberCopy/=Local_u32TenthOrder;
		}

		//Digit order has number of digits in the number
		Local_u32NumberCopy = Copy_u32Number;
    209a:	8d 85       	ldd	r24, Y+13	; 0x0d
    209c:	9e 85       	ldd	r25, Y+14	; 0x0e
    209e:	af 85       	ldd	r26, Y+15	; 0x0f
    20a0:	b8 89       	ldd	r27, Y+16	; 0x10
    20a2:	88 87       	std	Y+8, r24	; 0x08
    20a4:	99 87       	std	Y+9, r25	; 0x09
    20a6:	aa 87       	std	Y+10, r26	; 0x0a
    20a8:	bb 87       	std	Y+11, r27	; 0x0b
    20aa:	55 c0       	rjmp	.+170    	; 0x2156 <LCD_voidSendNumber+0x150>
		LCD_voidSendData(' ');
		*/

		while(Local_u8DigitOrder !=0)
		{
			Local_u32TenthOrder = 1;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a0 e0       	ldi	r26, 0x00	; 0
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	8c 83       	std	Y+4, r24	; 0x04
    20b6:	9d 83       	std	Y+5, r25	; 0x05
    20b8:	ae 83       	std	Y+6, r26	; 0x06
    20ba:	bf 83       	std	Y+7, r27	; 0x07
			for(int i =0; i<Local_u8DigitOrder-1;i++)
    20bc:	1a 82       	std	Y+2, r1	; 0x02
    20be:	19 82       	std	Y+1, r1	; 0x01
    20c0:	17 c0       	rjmp	.+46     	; 0x20f0 <LCD_voidSendNumber+0xea>
			{
				Local_u32TenthOrder *=10;
    20c2:	8c 81       	ldd	r24, Y+4	; 0x04
    20c4:	9d 81       	ldd	r25, Y+5	; 0x05
    20c6:	ae 81       	ldd	r26, Y+6	; 0x06
    20c8:	bf 81       	ldd	r27, Y+7	; 0x07
    20ca:	2a e0       	ldi	r18, 0x0A	; 10
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__mulsi3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8c 83       	std	Y+4, r24	; 0x04
    20e0:	9d 83       	std	Y+5, r25	; 0x05
    20e2:	ae 83       	std	Y+6, r26	; 0x06
    20e4:	bf 83       	std	Y+7, r27	; 0x07
		*/

		while(Local_u8DigitOrder !=0)
		{
			Local_u32TenthOrder = 1;
			for(int i =0; i<Local_u8DigitOrder-1;i++)
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	01 96       	adiw	r24, 0x01	; 1
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    20f2:	88 2f       	mov	r24, r24
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9c 01       	movw	r18, r24
    20f8:	21 50       	subi	r18, 0x01	; 1
    20fa:	30 40       	sbci	r19, 0x00	; 0
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	82 17       	cp	r24, r18
    2102:	93 07       	cpc	r25, r19
    2104:	f4 f2       	brlt	.-68     	; 0x20c2 <LCD_voidSendNumber+0xbc>
			{
				Local_u32TenthOrder *=10;
			}
			u8 Local_u8Num = Local_u32NumberCopy/Local_u32TenthOrder;
    2106:	88 85       	ldd	r24, Y+8	; 0x08
    2108:	99 85       	ldd	r25, Y+9	; 0x09
    210a:	aa 85       	ldd	r26, Y+10	; 0x0a
    210c:	bb 85       	ldd	r27, Y+11	; 0x0b
    210e:	2c 81       	ldd	r18, Y+4	; 0x04
    2110:	3d 81       	ldd	r19, Y+5	; 0x05
    2112:	4e 81       	ldd	r20, Y+6	; 0x06
    2114:	5f 81       	ldd	r21, Y+7	; 0x07
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 43 14 	call	0x2886	; 0x2886 <__udivmodsi4>
    211e:	da 01       	movw	r26, r20
    2120:	c9 01       	movw	r24, r18
    2122:	8b 83       	std	Y+3, r24	; 0x03
			LCD_voidSendData(Local_u8Num+'0');
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	80 5d       	subi	r24, 0xD0	; 208
    2128:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
			Local_u32NumberCopy = Local_u32NumberCopy%Local_u32TenthOrder;
    212c:	88 85       	ldd	r24, Y+8	; 0x08
    212e:	99 85       	ldd	r25, Y+9	; 0x09
    2130:	aa 85       	ldd	r26, Y+10	; 0x0a
    2132:	bb 85       	ldd	r27, Y+11	; 0x0b
    2134:	2c 81       	ldd	r18, Y+4	; 0x04
    2136:	3d 81       	ldd	r19, Y+5	; 0x05
    2138:	4e 81       	ldd	r20, Y+6	; 0x06
    213a:	5f 81       	ldd	r21, Y+7	; 0x07
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 43 14 	call	0x2886	; 0x2886 <__udivmodsi4>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	88 87       	std	Y+8, r24	; 0x08
    214a:	99 87       	std	Y+9, r25	; 0x09
    214c:	aa 87       	std	Y+10, r26	; 0x0a
    214e:	bb 87       	std	Y+11, r27	; 0x0b
			Local_u8DigitOrder--;
    2150:	8c 85       	ldd	r24, Y+12	; 0x0c
    2152:	81 50       	subi	r24, 0x01	; 1
    2154:	8c 87       	std	Y+12, r24	; 0x0c
		/*debug
		LCD_voidSendData(Local_u8DigitOrder+'0');
		LCD_voidSendData(' ');
		*/

		while(Local_u8DigitOrder !=0)
    2156:	8c 85       	ldd	r24, Y+12	; 0x0c
    2158:	88 23       	and	r24, r24
    215a:	09 f0       	breq	.+2      	; 0x215e <LCD_voidSendNumber+0x158>
    215c:	a7 cf       	rjmp	.-178    	; 0x20ac <LCD_voidSendNumber+0xa6>
			LCD_voidSendData(Local_u8Num+'0');
			Local_u32NumberCopy = Local_u32NumberCopy%Local_u32TenthOrder;
			Local_u8DigitOrder--;
		}
	}
}
    215e:	60 96       	adiw	r28, 0x10	; 16
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <LCD_voidGoToXY>:


void LCD_voidGoToXY(u8 Copy_u8X, u8 Copy_u8Y)
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <LCD_voidGoToXY+0x6>
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	89 83       	std	Y+1, r24	; 0x01
    217c:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidSendCommand(128 + Copy_u8X+(0x40*Copy_u8Y));
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	00 24       	eor	r0, r0
    2186:	96 95       	lsr	r25
    2188:	87 95       	ror	r24
    218a:	07 94       	ror	r0
    218c:	96 95       	lsr	r25
    218e:	87 95       	ror	r24
    2190:	07 94       	ror	r0
    2192:	98 2f       	mov	r25, r24
    2194:	80 2d       	mov	r24, r0
    2196:	98 2f       	mov	r25, r24
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	89 0f       	add	r24, r25
    219c:	80 58       	subi	r24, 0x80	; 128
    219e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_voidSendCommand>

}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <LCD_voidSendSpecialCharacter>:

void LCD_voidSendSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternSlot ,u8 Copy_u8X, u8 Copy_u8Y)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	27 97       	sbiw	r28, 0x07	; 7
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	9c 83       	std	Y+4, r25	; 0x04
    21c2:	8b 83       	std	Y+3, r24	; 0x03
    21c4:	6d 83       	std	Y+5, r22	; 0x05
    21c6:	4e 83       	std	Y+6, r20	; 0x06
    21c8:	2f 83       	std	Y+7, r18	; 0x07
	//calculate addr of pattern in CGROM and set LCD addr counter to it
	u8 Local_u8CGRAMAddress = Copy_u8PatternSlot*8;
    21ca:	8d 81       	ldd	r24, Y+5	; 0x05
    21cc:	88 2f       	mov	r24, r24
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(64+Local_u8CGRAMAddress);
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	80 5c       	subi	r24, 0xC0	; 192
    21e2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LCD_voidSendCommand>

	//print byte by byte of pattern
	for(u8 Local_u8Itterator=0;Local_u8Itterator<8;Local_u8Itterator++)
    21e6:	19 82       	std	Y+1, r1	; 0x01
    21e8:	0e c0       	rjmp	.+28     	; 0x2206 <LCD_voidSendSpecialCharacter+0x5a>
	{
		LCD_voidSendData(Copy_pu8Pattern[Local_u8Itterator]);
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	fc 01       	movw	r30, r24
    21f6:	e2 0f       	add	r30, r18
    21f8:	f3 1f       	adc	r31, r19
    21fa:	80 81       	ld	r24, Z
    21fc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
	//calculate addr of pattern in CGROM and set LCD addr counter to it
	u8 Local_u8CGRAMAddress = Copy_u8PatternSlot*8;
	LCD_voidSendCommand(64+Local_u8CGRAMAddress);

	//print byte by byte of pattern
	for(u8 Local_u8Itterator=0;Local_u8Itterator<8;Local_u8Itterator++)
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	8f 5f       	subi	r24, 0xFF	; 255
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	88 30       	cpi	r24, 0x08	; 8
    220a:	78 f3       	brcs	.-34     	; 0x21ea <LCD_voidSendSpecialCharacter+0x3e>
	{
		LCD_voidSendData(Copy_pu8Pattern[Local_u8Itterator]);
	}

	//set DDRAM location
	LCD_voidGoToXY(Copy_u8X,Copy_u8Y);
    220c:	8e 81       	ldd	r24, Y+6	; 0x06
    220e:	6f 81       	ldd	r22, Y+7	; 0x07
    2210:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_voidGoToXY>

	LCD_voidSendData(Copy_u8PatternSlot);
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
}
    221a:	27 96       	adiw	r28, 0x07	; 7
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <LCD_voidClearSymbolAtXY>:

void LCD_voidClearSymbolAtXY(u8 Copy_u8X, u8 Copy_u8Y)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <LCD_voidClearSymbolAtXY+0x6>
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToXY(Copy_u8X,Copy_u8Y);
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	6a 81       	ldd	r22, Y+2	; 0x02
    223e:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_voidGoToXY>
	LCD_voidSendData(0b00100000); //draw nothing
    2242:	80 e2       	ldi	r24, 0x20	; 32
    2244:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
}
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <drawArrow>:
#include "BIT_MATH.h"
#include "LCD_Interface.h"
#include "calculator.h"

void drawArrow(u8 Copy_u8CurrPos,u8 Copy_u8OldPos)
{
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	00 d0       	rcall	.+0      	; 0x2258 <drawArrow+0x6>
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidClearSymbolAtXY(Copy_u8OldPos,1); //delete old arrow
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	61 e0       	ldi	r22, 0x01	; 1
    2264:	0e 94 16 11 	call	0x222c	; 0x222c <LCD_voidClearSymbolAtXY>
	//set cursor pos
	LCD_voidGoToXY(Copy_u8CurrPos,1);
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	61 e0       	ldi	r22, 0x01	; 1
    226c:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_voidGoToXY>
	LCD_voidSendData(0b01011110); //print arrow
    2270:	8e e5       	ldi	r24, 0x5E	; 94
    2272:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
}
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <cycleNumbers>:


void cycleNumbers(u8 Copy_u8CurrPos, u8 Copy_u8NumberIndex)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	00 d0       	rcall	.+0      	; 0x2286 <cycleNumbers+0x6>
    2286:	00 d0       	rcall	.+0      	; 0x2288 <cycleNumbers+0x8>
    2288:	cd b7       	in	r28, 0x3d	; 61
    228a:	de b7       	in	r29, 0x3e	; 62
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToXY(Copy_u8CurrPos,0);
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_voidGoToXY>
	switch(Copy_u8NumberIndex)
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	3c 83       	std	Y+4, r19	; 0x04
    22a0:	2b 83       	std	Y+3, r18	; 0x03
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	84 30       	cpi	r24, 0x04	; 4
    22a8:	91 05       	cpc	r25, r1
    22aa:	09 f4       	brne	.+2      	; 0x22ae <cycleNumbers+0x2e>
    22ac:	4f c0       	rjmp	.+158    	; 0x234c <cycleNumbers+0xcc>
    22ae:	2b 81       	ldd	r18, Y+3	; 0x03
    22b0:	3c 81       	ldd	r19, Y+4	; 0x04
    22b2:	25 30       	cpi	r18, 0x05	; 5
    22b4:	31 05       	cpc	r19, r1
    22b6:	d4 f4       	brge	.+52     	; 0x22ec <cycleNumbers+0x6c>
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	81 30       	cpi	r24, 0x01	; 1
    22be:	91 05       	cpc	r25, r1
    22c0:	c9 f1       	breq	.+114    	; 0x2334 <cycleNumbers+0xb4>
    22c2:	2b 81       	ldd	r18, Y+3	; 0x03
    22c4:	3c 81       	ldd	r19, Y+4	; 0x04
    22c6:	22 30       	cpi	r18, 0x02	; 2
    22c8:	31 05       	cpc	r19, r1
    22ca:	2c f4       	brge	.+10     	; 0x22d6 <cycleNumbers+0x56>
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	00 97       	sbiw	r24, 0x00	; 0
    22d2:	61 f1       	breq	.+88     	; 0x232c <cycleNumbers+0xac>
    22d4:	52 c0       	rjmp	.+164    	; 0x237a <cycleNumbers+0xfa>
    22d6:	2b 81       	ldd	r18, Y+3	; 0x03
    22d8:	3c 81       	ldd	r19, Y+4	; 0x04
    22da:	22 30       	cpi	r18, 0x02	; 2
    22dc:	31 05       	cpc	r19, r1
    22de:	71 f1       	breq	.+92     	; 0x233c <cycleNumbers+0xbc>
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	83 30       	cpi	r24, 0x03	; 3
    22e6:	91 05       	cpc	r25, r1
    22e8:	69 f1       	breq	.+90     	; 0x2344 <cycleNumbers+0xc4>
    22ea:	47 c0       	rjmp	.+142    	; 0x237a <cycleNumbers+0xfa>
    22ec:	2b 81       	ldd	r18, Y+3	; 0x03
    22ee:	3c 81       	ldd	r19, Y+4	; 0x04
    22f0:	27 30       	cpi	r18, 0x07	; 7
    22f2:	31 05       	cpc	r19, r1
    22f4:	b9 f1       	breq	.+110    	; 0x2364 <cycleNumbers+0xe4>
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	88 30       	cpi	r24, 0x08	; 8
    22fc:	91 05       	cpc	r25, r1
    22fe:	5c f4       	brge	.+22     	; 0x2316 <cycleNumbers+0x96>
    2300:	2b 81       	ldd	r18, Y+3	; 0x03
    2302:	3c 81       	ldd	r19, Y+4	; 0x04
    2304:	25 30       	cpi	r18, 0x05	; 5
    2306:	31 05       	cpc	r19, r1
    2308:	29 f1       	breq	.+74     	; 0x2354 <cycleNumbers+0xd4>
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	86 30       	cpi	r24, 0x06	; 6
    2310:	91 05       	cpc	r25, r1
    2312:	21 f1       	breq	.+72     	; 0x235c <cycleNumbers+0xdc>
    2314:	32 c0       	rjmp	.+100    	; 0x237a <cycleNumbers+0xfa>
    2316:	2b 81       	ldd	r18, Y+3	; 0x03
    2318:	3c 81       	ldd	r19, Y+4	; 0x04
    231a:	28 30       	cpi	r18, 0x08	; 8
    231c:	31 05       	cpc	r19, r1
    231e:	31 f1       	breq	.+76     	; 0x236c <cycleNumbers+0xec>
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	89 30       	cpi	r24, 0x09	; 9
    2326:	91 05       	cpc	r25, r1
    2328:	29 f1       	breq	.+74     	; 0x2374 <cycleNumbers+0xf4>
    232a:	27 c0       	rjmp	.+78     	; 0x237a <cycleNumbers+0xfa>
	{
	case CALCULATOR_ZERO:
		LCD_voidSendData('0');
    232c:	80 e3       	ldi	r24, 0x30	; 48
    232e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    2332:	23 c0       	rjmp	.+70     	; 0x237a <cycleNumbers+0xfa>
		break;
	case CALCULATOR_ONE:
			LCD_voidSendData('1');
    2334:	81 e3       	ldi	r24, 0x31	; 49
    2336:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    233a:	1f c0       	rjmp	.+62     	; 0x237a <cycleNumbers+0xfa>
			break;
	case CALCULATOR_TWO:
			LCD_voidSendData('2');
    233c:	82 e3       	ldi	r24, 0x32	; 50
    233e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    2342:	1b c0       	rjmp	.+54     	; 0x237a <cycleNumbers+0xfa>
			break;
	case CALCULATOR_THREE:
			LCD_voidSendData('3');
    2344:	83 e3       	ldi	r24, 0x33	; 51
    2346:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    234a:	17 c0       	rjmp	.+46     	; 0x237a <cycleNumbers+0xfa>
			break;
	case CALCULATOR_FOUR:
			LCD_voidSendData('4');
    234c:	84 e3       	ldi	r24, 0x34	; 52
    234e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    2352:	13 c0       	rjmp	.+38     	; 0x237a <cycleNumbers+0xfa>
			break;
	case CALCULATOR_FIVE:
			LCD_voidSendData('5');
    2354:	85 e3       	ldi	r24, 0x35	; 53
    2356:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    235a:	0f c0       	rjmp	.+30     	; 0x237a <cycleNumbers+0xfa>
			break;
	case CALCULATOR_SIX:
			LCD_voidSendData('6');
    235c:	86 e3       	ldi	r24, 0x36	; 54
    235e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    2362:	0b c0       	rjmp	.+22     	; 0x237a <cycleNumbers+0xfa>
			break;
	case CALCULATOR_SEVEN:
			LCD_voidSendData('7');
    2364:	87 e3       	ldi	r24, 0x37	; 55
    2366:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    236a:	07 c0       	rjmp	.+14     	; 0x237a <cycleNumbers+0xfa>
			break;
	case CALCULATOR_EIGHT:
			LCD_voidSendData('8');
    236c:	88 e3       	ldi	r24, 0x38	; 56
    236e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    2372:	03 c0       	rjmp	.+6      	; 0x237a <cycleNumbers+0xfa>
			break;
	case CALCULATOR_NINE:
			LCD_voidSendData('9');
    2374:	89 e3       	ldi	r24, 0x39	; 57
    2376:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
			break;
	}
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <cycleOperators>:


void cycleOperators(u8 Copy_u8CurrPos, u8 Copy_u8OperatorIndex)
{
    2388:	df 93       	push	r29
    238a:	cf 93       	push	r28
    238c:	00 d0       	rcall	.+0      	; 0x238e <cycleOperators+0x6>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <cycleOperators+0x8>
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToXY(Copy_u8CurrPos,0);
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	60 e0       	ldi	r22, 0x00	; 0
    239c:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_voidGoToXY>
	switch(Copy_u8OperatorIndex)
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	3c 83       	std	Y+4, r19	; 0x04
    23a8:	2b 83       	std	Y+3, r18	; 0x03
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	82 30       	cpi	r24, 0x02	; 2
    23b0:	91 05       	cpc	r25, r1
    23b2:	11 f1       	breq	.+68     	; 0x23f8 <cycleOperators+0x70>
    23b4:	2b 81       	ldd	r18, Y+3	; 0x03
    23b6:	3c 81       	ldd	r19, Y+4	; 0x04
    23b8:	23 30       	cpi	r18, 0x03	; 3
    23ba:	31 05       	cpc	r19, r1
    23bc:	54 f4       	brge	.+20     	; 0x23d2 <cycleOperators+0x4a>
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	89 f0       	breq	.+34     	; 0x23e8 <cycleOperators+0x60>
    23c6:	2b 81       	ldd	r18, Y+3	; 0x03
    23c8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ca:	21 30       	cpi	r18, 0x01	; 1
    23cc:	31 05       	cpc	r19, r1
    23ce:	81 f0       	breq	.+32     	; 0x23f0 <cycleOperators+0x68>
    23d0:	1e c0       	rjmp	.+60     	; 0x240e <cycleOperators+0x86>
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	83 30       	cpi	r24, 0x03	; 3
    23d8:	91 05       	cpc	r25, r1
    23da:	91 f0       	breq	.+36     	; 0x2400 <cycleOperators+0x78>
    23dc:	2b 81       	ldd	r18, Y+3	; 0x03
    23de:	3c 81       	ldd	r19, Y+4	; 0x04
    23e0:	24 30       	cpi	r18, 0x04	; 4
    23e2:	31 05       	cpc	r19, r1
    23e4:	89 f0       	breq	.+34     	; 0x2408 <cycleOperators+0x80>
    23e6:	13 c0       	rjmp	.+38     	; 0x240e <cycleOperators+0x86>
	{
	case CALCULATOR_ADD:
		LCD_voidSendData('+');
    23e8:	8b e2       	ldi	r24, 0x2B	; 43
    23ea:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <cycleOperators+0x86>
		break;
	case CALCULATOR_SUB:
			LCD_voidSendData('-');
    23f0:	8d e2       	ldi	r24, 0x2D	; 45
    23f2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    23f6:	0b c0       	rjmp	.+22     	; 0x240e <cycleOperators+0x86>
			break;
	case CALCULATOR_MUL:
			LCD_voidSendData('*');
    23f8:	8a e2       	ldi	r24, 0x2A	; 42
    23fa:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    23fe:	07 c0       	rjmp	.+14     	; 0x240e <cycleOperators+0x86>
			break;
	case CALCULATOR_DIV:
			LCD_voidSendData('/');
    2400:	8f e2       	ldi	r24, 0x2F	; 47
    2402:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    2406:	03 c0       	rjmp	.+6      	; 0x240e <cycleOperators+0x86>
			break;
	case CALCULATOR_REM:
			LCD_voidSendData('%');
    2408:	85 e2       	ldi	r24, 0x25	; 37
    240a:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
			break;
		}
}
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <calculatePrint>:


void calculatePrint(struct CalculatorData* pcalculatorData)
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	00 d0       	rcall	.+0      	; 0x2422 <calculatePrint+0x6>
    2422:	00 d0       	rcall	.+0      	; 0x2424 <calculatePrint+0x8>
    2424:	0f 92       	push	r0
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	9b 83       	std	Y+3, r25	; 0x03
    242c:	8a 83       	std	Y+2, r24	; 0x02
	s8 Local_s8Result;

	switch(pcalculatorData->operator)
    242e:	ea 81       	ldd	r30, Y+2	; 0x02
    2430:	fb 81       	ldd	r31, Y+3	; 0x03
    2432:	83 81       	ldd	r24, Z+3	; 0x03
    2434:	28 2f       	mov	r18, r24
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	3d 83       	std	Y+5, r19	; 0x05
    243a:	2c 83       	std	Y+4, r18	; 0x04
    243c:	8c 81       	ldd	r24, Y+4	; 0x04
    243e:	9d 81       	ldd	r25, Y+5	; 0x05
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	91 05       	cpc	r25, r1
    2444:	71 f1       	breq	.+92     	; 0x24a2 <calculatePrint+0x86>
    2446:	2c 81       	ldd	r18, Y+4	; 0x04
    2448:	3d 81       	ldd	r19, Y+5	; 0x05
    244a:	23 30       	cpi	r18, 0x03	; 3
    244c:	31 05       	cpc	r19, r1
    244e:	54 f4       	brge	.+20     	; 0x2464 <calculatePrint+0x48>
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	9d 81       	ldd	r25, Y+5	; 0x05
    2454:	00 97       	sbiw	r24, 0x00	; 0
    2456:	89 f0       	breq	.+34     	; 0x247a <calculatePrint+0x5e>
    2458:	2c 81       	ldd	r18, Y+4	; 0x04
    245a:	3d 81       	ldd	r19, Y+5	; 0x05
    245c:	21 30       	cpi	r18, 0x01	; 1
    245e:	31 05       	cpc	r19, r1
    2460:	a9 f0       	breq	.+42     	; 0x248c <calculatePrint+0x70>
    2462:	40 c0       	rjmp	.+128    	; 0x24e4 <calculatePrint+0xc8>
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	9d 81       	ldd	r25, Y+5	; 0x05
    2468:	83 30       	cpi	r24, 0x03	; 3
    246a:	91 05       	cpc	r25, r1
    246c:	29 f1       	breq	.+74     	; 0x24b8 <calculatePrint+0x9c>
    246e:	2c 81       	ldd	r18, Y+4	; 0x04
    2470:	3d 81       	ldd	r19, Y+5	; 0x05
    2472:	24 30       	cpi	r18, 0x04	; 4
    2474:	31 05       	cpc	r19, r1
    2476:	59 f1       	breq	.+86     	; 0x24ce <calculatePrint+0xb2>
    2478:	35 c0       	rjmp	.+106    	; 0x24e4 <calculatePrint+0xc8>
	{
	case CALCULATOR_ADD:
		Local_s8Result = pcalculatorData->number1+pcalculatorData->number2;
    247a:	ea 81       	ldd	r30, Y+2	; 0x02
    247c:	fb 81       	ldd	r31, Y+3	; 0x03
    247e:	91 81       	ldd	r25, Z+1	; 0x01
    2480:	ea 81       	ldd	r30, Y+2	; 0x02
    2482:	fb 81       	ldd	r31, Y+3	; 0x03
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	89 0f       	add	r24, r25
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	2c c0       	rjmp	.+88     	; 0x24e4 <calculatePrint+0xc8>
		break;
	case CALCULATOR_SUB:
		Local_s8Result = pcalculatorData->number1-pcalculatorData->number2;
    248c:	ea 81       	ldd	r30, Y+2	; 0x02
    248e:	fb 81       	ldd	r31, Y+3	; 0x03
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	ea 81       	ldd	r30, Y+2	; 0x02
    2494:	fb 81       	ldd	r31, Y+3	; 0x03
    2496:	82 81       	ldd	r24, Z+2	; 0x02
    2498:	39 2f       	mov	r19, r25
    249a:	38 1b       	sub	r19, r24
    249c:	83 2f       	mov	r24, r19
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	21 c0       	rjmp	.+66     	; 0x24e4 <calculatePrint+0xc8>
			break;
	case CALCULATOR_MUL:
		Local_s8Result = pcalculatorData->number1*pcalculatorData->number2;
    24a2:	ea 81       	ldd	r30, Y+2	; 0x02
    24a4:	fb 81       	ldd	r31, Y+3	; 0x03
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	ea 81       	ldd	r30, Y+2	; 0x02
    24aa:	fb 81       	ldd	r31, Y+3	; 0x03
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	98 9f       	mul	r25, r24
    24b0:	80 2d       	mov	r24, r0
    24b2:	11 24       	eor	r1, r1
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	16 c0       	rjmp	.+44     	; 0x24e4 <calculatePrint+0xc8>
			break;
	case CALCULATOR_DIV:
		Local_s8Result = pcalculatorData->number1/pcalculatorData->number2;
    24b8:	ea 81       	ldd	r30, Y+2	; 0x02
    24ba:	fb 81       	ldd	r31, Y+3	; 0x03
    24bc:	81 81       	ldd	r24, Z+1	; 0x01
    24be:	ea 81       	ldd	r30, Y+2	; 0x02
    24c0:	fb 81       	ldd	r31, Y+3	; 0x03
    24c2:	92 81       	ldd	r25, Z+2	; 0x02
    24c4:	69 2f       	mov	r22, r25
    24c6:	0e 94 17 14 	call	0x282e	; 0x282e <__udivmodqi4>
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	0b c0       	rjmp	.+22     	; 0x24e4 <calculatePrint+0xc8>
		break;
	case CALCULATOR_REM:
		Local_s8Result = pcalculatorData->number1%pcalculatorData->number2;
    24ce:	ea 81       	ldd	r30, Y+2	; 0x02
    24d0:	fb 81       	ldd	r31, Y+3	; 0x03
    24d2:	81 81       	ldd	r24, Z+1	; 0x01
    24d4:	ea 81       	ldd	r30, Y+2	; 0x02
    24d6:	fb 81       	ldd	r31, Y+3	; 0x03
    24d8:	92 81       	ldd	r25, Z+2	; 0x02
    24da:	69 2f       	mov	r22, r25
    24dc:	0e 94 17 14 	call	0x282e	; 0x282e <__udivmodqi4>
    24e0:	89 2f       	mov	r24, r25
    24e2:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	if(Local_s8Result>9)
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	8a 30       	cpi	r24, 0x0A	; 10
    24e8:	94 f0       	brlt	.+36     	; 0x250e <calculatePrint+0xf2>
	{
		LCD_voidSendData('0' + (Local_s8Result/10) );
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	9a e0       	ldi	r25, 0x0A	; 10
    24ee:	69 2f       	mov	r22, r25
    24f0:	0e 94 23 14 	call	0x2846	; 0x2846 <__divmodqi4>
    24f4:	80 5d       	subi	r24, 0xD0	; 208
    24f6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
		LCD_voidSendData('0' + (Local_s8Result%10) );
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	9a e0       	ldi	r25, 0x0A	; 10
    24fe:	69 2f       	mov	r22, r25
    2500:	0e 94 23 14 	call	0x2846	; 0x2846 <__divmodqi4>
    2504:	89 2f       	mov	r24, r25
    2506:	80 5d       	subi	r24, 0xD0	; 208
    2508:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
    250c:	0a c0       	rjmp	.+20     	; 0x2522 <calculatePrint+0x106>
	}
	else
	{
		if(Local_s8Result<0)
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	88 23       	and	r24, r24
    2512:	1c f4       	brge	.+6      	; 0x251a <calculatePrint+0xfe>
			LCD_voidSendData('-');
    2514:	8d e2       	ldi	r24, 0x2D	; 45
    2516:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>

		LCD_voidSendData('0'+Local_s8Result);
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	80 5d       	subi	r24, 0xD0	; 208
    251e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <LCD_voidSendData>
	}

}
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <Calculator_voidCycleUpCallback>:

void Calculator_voidCycleUpCallback(struct CalculatorData* pcalculatorData)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <Calculator_voidCycleUpCallback+0x6>
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
    253c:	9a 83       	std	Y+2, r25	; 0x02
    253e:	89 83       	std	Y+1, r24	; 0x01
	//determine determine operation based on pos
	if(pcalculatorData->currPosX == 0)
    2540:	e9 81       	ldd	r30, Y+1	; 0x01
    2542:	fa 81       	ldd	r31, Y+2	; 0x02
    2544:	80 81       	ld	r24, Z
    2546:	88 23       	and	r24, r24
    2548:	c1 f4       	brne	.+48     	; 0x257a <Calculator_voidCycleUpCallback+0x48>
	{
		//1st number
		pcalculatorData->number1 = (pcalculatorData->number1+1)%10; //update number
    254a:	e9 81       	ldd	r30, Y+1	; 0x01
    254c:	fa 81       	ldd	r31, Y+2	; 0x02
    254e:	81 81       	ldd	r24, Z+1	; 0x01
    2550:	88 2f       	mov	r24, r24
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	2a e0       	ldi	r18, 0x0A	; 10
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	b9 01       	movw	r22, r18
    255c:	0e 94 30 14 	call	0x2860	; 0x2860 <__divmodhi4>
    2560:	e9 81       	ldd	r30, Y+1	; 0x01
    2562:	fa 81       	ldd	r31, Y+2	; 0x02
    2564:	81 83       	std	Z+1, r24	; 0x01
		cycleNumbers(pcalculatorData->currPosX,pcalculatorData->number1);
    2566:	e9 81       	ldd	r30, Y+1	; 0x01
    2568:	fa 81       	ldd	r31, Y+2	; 0x02
    256a:	80 81       	ld	r24, Z
    256c:	e9 81       	ldd	r30, Y+1	; 0x01
    256e:	fa 81       	ldd	r31, Y+2	; 0x02
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	69 2f       	mov	r22, r25
    2574:	0e 94 40 11 	call	0x2280	; 0x2280 <cycleNumbers>
    2578:	39 c0       	rjmp	.+114    	; 0x25ec <Calculator_voidCycleUpCallback+0xba>

	}else if(pcalculatorData->currPosX == 1)
    257a:	e9 81       	ldd	r30, Y+1	; 0x01
    257c:	fa 81       	ldd	r31, Y+2	; 0x02
    257e:	80 81       	ld	r24, Z
    2580:	81 30       	cpi	r24, 0x01	; 1
    2582:	c1 f4       	brne	.+48     	; 0x25b4 <Calculator_voidCycleUpCallback+0x82>
	{
		//operator
		pcalculatorData->operator = (pcalculatorData->operator+1)%5; //update operator
    2584:	e9 81       	ldd	r30, Y+1	; 0x01
    2586:	fa 81       	ldd	r31, Y+2	; 0x02
    2588:	83 81       	ldd	r24, Z+3	; 0x03
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	01 96       	adiw	r24, 0x01	; 1
    2590:	25 e0       	ldi	r18, 0x05	; 5
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	b9 01       	movw	r22, r18
    2596:	0e 94 30 14 	call	0x2860	; 0x2860 <__divmodhi4>
    259a:	e9 81       	ldd	r30, Y+1	; 0x01
    259c:	fa 81       	ldd	r31, Y+2	; 0x02
    259e:	83 83       	std	Z+3, r24	; 0x03
		cycleOperators(pcalculatorData->currPosX,pcalculatorData->operator);
    25a0:	e9 81       	ldd	r30, Y+1	; 0x01
    25a2:	fa 81       	ldd	r31, Y+2	; 0x02
    25a4:	80 81       	ld	r24, Z
    25a6:	e9 81       	ldd	r30, Y+1	; 0x01
    25a8:	fa 81       	ldd	r31, Y+2	; 0x02
    25aa:	93 81       	ldd	r25, Z+3	; 0x03
    25ac:	69 2f       	mov	r22, r25
    25ae:	0e 94 c4 11 	call	0x2388	; 0x2388 <cycleOperators>
    25b2:	1c c0       	rjmp	.+56     	; 0x25ec <Calculator_voidCycleUpCallback+0xba>
	}
	else if(pcalculatorData->currPosX == 2)
    25b4:	e9 81       	ldd	r30, Y+1	; 0x01
    25b6:	fa 81       	ldd	r31, Y+2	; 0x02
    25b8:	80 81       	ld	r24, Z
    25ba:	82 30       	cpi	r24, 0x02	; 2
    25bc:	b9 f4       	brne	.+46     	; 0x25ec <Calculator_voidCycleUpCallback+0xba>
	{
		//2nd number
		pcalculatorData->number2 = (pcalculatorData->number2+1)%10; //update number
    25be:	e9 81       	ldd	r30, Y+1	; 0x01
    25c0:	fa 81       	ldd	r31, Y+2	; 0x02
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	01 96       	adiw	r24, 0x01	; 1
    25ca:	2a e0       	ldi	r18, 0x0A	; 10
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	b9 01       	movw	r22, r18
    25d0:	0e 94 30 14 	call	0x2860	; 0x2860 <__divmodhi4>
    25d4:	e9 81       	ldd	r30, Y+1	; 0x01
    25d6:	fa 81       	ldd	r31, Y+2	; 0x02
    25d8:	82 83       	std	Z+2, r24	; 0x02
		cycleNumbers(pcalculatorData->currPosX,pcalculatorData->number2);
    25da:	e9 81       	ldd	r30, Y+1	; 0x01
    25dc:	fa 81       	ldd	r31, Y+2	; 0x02
    25de:	80 81       	ld	r24, Z
    25e0:	e9 81       	ldd	r30, Y+1	; 0x01
    25e2:	fa 81       	ldd	r31, Y+2	; 0x02
    25e4:	92 81       	ldd	r25, Z+2	; 0x02
    25e6:	69 2f       	mov	r22, r25
    25e8:	0e 94 40 11 	call	0x2280	; 0x2280 <cycleNumbers>
	}
}
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <Calculator_voidCycledownCallback>:


void Calculator_voidCycledownCallback(struct CalculatorData* pcalculatorData)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <Calculator_voidCycledownCallback+0x6>
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	89 83       	std	Y+1, r24	; 0x01
	//determine determine operation based on pos
	if(pcalculatorData->currPosX == 0)
    2604:	e9 81       	ldd	r30, Y+1	; 0x01
    2606:	fa 81       	ldd	r31, Y+2	; 0x02
    2608:	80 81       	ld	r24, Z
    260a:	88 23       	and	r24, r24
    260c:	c1 f4       	brne	.+48     	; 0x263e <Calculator_voidCycledownCallback+0x48>
	{
		//1st number
		pcalculatorData->number1 = (pcalculatorData->number1-1)%10; //update number
    260e:	e9 81       	ldd	r30, Y+1	; 0x01
    2610:	fa 81       	ldd	r31, Y+2	; 0x02
    2612:	81 81       	ldd	r24, Z+1	; 0x01
    2614:	88 2f       	mov	r24, r24
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	2a e0       	ldi	r18, 0x0A	; 10
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	b9 01       	movw	r22, r18
    2620:	0e 94 30 14 	call	0x2860	; 0x2860 <__divmodhi4>
    2624:	e9 81       	ldd	r30, Y+1	; 0x01
    2626:	fa 81       	ldd	r31, Y+2	; 0x02
    2628:	81 83       	std	Z+1, r24	; 0x01
		cycleNumbers(pcalculatorData->currPosX,pcalculatorData->number1);
    262a:	e9 81       	ldd	r30, Y+1	; 0x01
    262c:	fa 81       	ldd	r31, Y+2	; 0x02
    262e:	80 81       	ld	r24, Z
    2630:	e9 81       	ldd	r30, Y+1	; 0x01
    2632:	fa 81       	ldd	r31, Y+2	; 0x02
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	69 2f       	mov	r22, r25
    2638:	0e 94 40 11 	call	0x2280	; 0x2280 <cycleNumbers>
    263c:	39 c0       	rjmp	.+114    	; 0x26b0 <Calculator_voidCycledownCallback+0xba>

	}else if(pcalculatorData->currPosX == 1)
    263e:	e9 81       	ldd	r30, Y+1	; 0x01
    2640:	fa 81       	ldd	r31, Y+2	; 0x02
    2642:	80 81       	ld	r24, Z
    2644:	81 30       	cpi	r24, 0x01	; 1
    2646:	c1 f4       	brne	.+48     	; 0x2678 <Calculator_voidCycledownCallback+0x82>
	{
		//operator
		pcalculatorData->operator = (pcalculatorData->operator-1)%5; //update operator
    2648:	e9 81       	ldd	r30, Y+1	; 0x01
    264a:	fa 81       	ldd	r31, Y+2	; 0x02
    264c:	83 81       	ldd	r24, Z+3	; 0x03
    264e:	88 2f       	mov	r24, r24
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	25 e0       	ldi	r18, 0x05	; 5
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	b9 01       	movw	r22, r18
    265a:	0e 94 30 14 	call	0x2860	; 0x2860 <__divmodhi4>
    265e:	e9 81       	ldd	r30, Y+1	; 0x01
    2660:	fa 81       	ldd	r31, Y+2	; 0x02
    2662:	83 83       	std	Z+3, r24	; 0x03
		cycleOperators(pcalculatorData->currPosX,pcalculatorData->operator);
    2664:	e9 81       	ldd	r30, Y+1	; 0x01
    2666:	fa 81       	ldd	r31, Y+2	; 0x02
    2668:	80 81       	ld	r24, Z
    266a:	e9 81       	ldd	r30, Y+1	; 0x01
    266c:	fa 81       	ldd	r31, Y+2	; 0x02
    266e:	93 81       	ldd	r25, Z+3	; 0x03
    2670:	69 2f       	mov	r22, r25
    2672:	0e 94 c4 11 	call	0x2388	; 0x2388 <cycleOperators>
    2676:	1c c0       	rjmp	.+56     	; 0x26b0 <Calculator_voidCycledownCallback+0xba>
	}
	else if(pcalculatorData->currPosX == 2)
    2678:	e9 81       	ldd	r30, Y+1	; 0x01
    267a:	fa 81       	ldd	r31, Y+2	; 0x02
    267c:	80 81       	ld	r24, Z
    267e:	82 30       	cpi	r24, 0x02	; 2
    2680:	b9 f4       	brne	.+46     	; 0x26b0 <Calculator_voidCycledownCallback+0xba>
	{
		////2nd number
		pcalculatorData->number2 = (pcalculatorData->number2-1)%10; //update number
    2682:	e9 81       	ldd	r30, Y+1	; 0x01
    2684:	fa 81       	ldd	r31, Y+2	; 0x02
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	2a e0       	ldi	r18, 0x0A	; 10
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	b9 01       	movw	r22, r18
    2694:	0e 94 30 14 	call	0x2860	; 0x2860 <__divmodhi4>
    2698:	e9 81       	ldd	r30, Y+1	; 0x01
    269a:	fa 81       	ldd	r31, Y+2	; 0x02
    269c:	82 83       	std	Z+2, r24	; 0x02
		cycleNumbers(pcalculatorData->currPosX,pcalculatorData->number2);
    269e:	e9 81       	ldd	r30, Y+1	; 0x01
    26a0:	fa 81       	ldd	r31, Y+2	; 0x02
    26a2:	80 81       	ld	r24, Z
    26a4:	e9 81       	ldd	r30, Y+1	; 0x01
    26a6:	fa 81       	ldd	r31, Y+2	; 0x02
    26a8:	92 81       	ldd	r25, Z+2	; 0x02
    26aa:	69 2f       	mov	r22, r25
    26ac:	0e 94 40 11 	call	0x2280	; 0x2280 <cycleNumbers>
	}
}
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <Calculator_voidConfirmCallback>:


void Calculator_voidConfirmCallback(struct CalculatorData* pcalculatorData)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <Calculator_voidConfirmCallback+0x6>
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
	//determine operation based on pos
	if(pcalculatorData->currPosX == 0)
    26c8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ca:	fa 81       	ldd	r31, Y+2	; 0x02
    26cc:	80 81       	ld	r24, Z
    26ce:	88 23       	and	r24, r24
    26d0:	a1 f4       	brne	.+40     	; 0x26fa <Calculator_voidConfirmCallback+0x40>
	{
		//advance from 1st num to operator
		pcalculatorData->currPosX++;
    26d2:	e9 81       	ldd	r30, Y+1	; 0x01
    26d4:	fa 81       	ldd	r31, Y+2	; 0x02
    26d6:	80 81       	ld	r24, Z
    26d8:	8f 5f       	subi	r24, 0xFF	; 255
    26da:	e9 81       	ldd	r30, Y+1	; 0x01
    26dc:	fa 81       	ldd	r31, Y+2	; 0x02
    26de:	80 83       	st	Z, r24
		drawArrow(pcalculatorData->currPosX,pcalculatorData->currPosX-1); //advance arrow
    26e0:	e9 81       	ldd	r30, Y+1	; 0x01
    26e2:	fa 81       	ldd	r31, Y+2	; 0x02
    26e4:	20 81       	ld	r18, Z
    26e6:	e9 81       	ldd	r30, Y+1	; 0x01
    26e8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ea:	80 81       	ld	r24, Z
    26ec:	98 2f       	mov	r25, r24
    26ee:	91 50       	subi	r25, 0x01	; 1
    26f0:	82 2f       	mov	r24, r18
    26f2:	69 2f       	mov	r22, r25
    26f4:	0e 94 29 11 	call	0x2252	; 0x2252 <drawArrow>
    26f8:	35 c0       	rjmp	.+106    	; 0x2764 <Calculator_voidConfirmCallback+0xaa>

	}else if(pcalculatorData->currPosX == 1)
    26fa:	e9 81       	ldd	r30, Y+1	; 0x01
    26fc:	fa 81       	ldd	r31, Y+2	; 0x02
    26fe:	80 81       	ld	r24, Z
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	a1 f4       	brne	.+40     	; 0x272c <Calculator_voidConfirmCallback+0x72>
	{
		//advance from operator to 2nd num
		pcalculatorData->currPosX++;
    2704:	e9 81       	ldd	r30, Y+1	; 0x01
    2706:	fa 81       	ldd	r31, Y+2	; 0x02
    2708:	80 81       	ld	r24, Z
    270a:	8f 5f       	subi	r24, 0xFF	; 255
    270c:	e9 81       	ldd	r30, Y+1	; 0x01
    270e:	fa 81       	ldd	r31, Y+2	; 0x02
    2710:	80 83       	st	Z, r24
		drawArrow(pcalculatorData->currPosX,pcalculatorData->currPosX-1); //advance arrow
    2712:	e9 81       	ldd	r30, Y+1	; 0x01
    2714:	fa 81       	ldd	r31, Y+2	; 0x02
    2716:	20 81       	ld	r18, Z
    2718:	e9 81       	ldd	r30, Y+1	; 0x01
    271a:	fa 81       	ldd	r31, Y+2	; 0x02
    271c:	80 81       	ld	r24, Z
    271e:	98 2f       	mov	r25, r24
    2720:	91 50       	subi	r25, 0x01	; 1
    2722:	82 2f       	mov	r24, r18
    2724:	69 2f       	mov	r22, r25
    2726:	0e 94 29 11 	call	0x2252	; 0x2252 <drawArrow>
    272a:	1c c0       	rjmp	.+56     	; 0x2764 <Calculator_voidConfirmCallback+0xaa>
	}
	else if(pcalculatorData->currPosX == 2)
    272c:	e9 81       	ldd	r30, Y+1	; 0x01
    272e:	fa 81       	ldd	r31, Y+2	; 0x02
    2730:	80 81       	ld	r24, Z
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	b9 f4       	brne	.+46     	; 0x2764 <Calculator_voidConfirmCallback+0xaa>
	{
		//advance from 2nd num to res
		pcalculatorData->currPosX++;
    2736:	e9 81       	ldd	r30, Y+1	; 0x01
    2738:	fa 81       	ldd	r31, Y+2	; 0x02
    273a:	80 81       	ld	r24, Z
    273c:	8f 5f       	subi	r24, 0xFF	; 255
    273e:	e9 81       	ldd	r30, Y+1	; 0x01
    2740:	fa 81       	ldd	r31, Y+2	; 0x02
    2742:	80 83       	st	Z, r24
		drawArrow(pcalculatorData->currPosX,pcalculatorData->currPosX-1); //advance arrow
    2744:	e9 81       	ldd	r30, Y+1	; 0x01
    2746:	fa 81       	ldd	r31, Y+2	; 0x02
    2748:	20 81       	ld	r18, Z
    274a:	e9 81       	ldd	r30, Y+1	; 0x01
    274c:	fa 81       	ldd	r31, Y+2	; 0x02
    274e:	80 81       	ld	r24, Z
    2750:	98 2f       	mov	r25, r24
    2752:	91 50       	subi	r25, 0x01	; 1
    2754:	82 2f       	mov	r24, r18
    2756:	69 2f       	mov	r22, r25
    2758:	0e 94 29 11 	call	0x2252	; 0x2252 <drawArrow>
		calculatePrint(pcalculatorData);
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02
    2760:	0e 94 0e 12 	call	0x241c	; 0x241c <calculatePrint>
	}
	else if(pcalculatorData->currPosX == 3)
	{
		//advance from res to a new operation (to be implemented
	}
}
    2764:	0f 90       	pop	r0
    2766:	0f 90       	pop	r0
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <Calculator_voidConfig>:


void Calculator_voidConfig(struct CalculatorData* pcalculatorData)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	00 d0       	rcall	.+0      	; 0x2774 <Calculator_voidConfig+0x6>
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	9a 83       	std	Y+2, r25	; 0x02
    277a:	89 83       	std	Y+1, r24	; 0x01
	//intial config for calculator elements
	pcalculatorData->currPosX = 0;
    277c:	e9 81       	ldd	r30, Y+1	; 0x01
    277e:	fa 81       	ldd	r31, Y+2	; 0x02
    2780:	10 82       	st	Z, r1
	pcalculatorData->number1 = 0;
    2782:	e9 81       	ldd	r30, Y+1	; 0x01
    2784:	fa 81       	ldd	r31, Y+2	; 0x02
    2786:	11 82       	std	Z+1, r1	; 0x01
	pcalculatorData->number2 = 0;
    2788:	e9 81       	ldd	r30, Y+1	; 0x01
    278a:	fa 81       	ldd	r31, Y+2	; 0x02
    278c:	12 82       	std	Z+2, r1	; 0x02
	pcalculatorData->operator = 0;
    278e:	e9 81       	ldd	r30, Y+1	; 0x01
    2790:	fa 81       	ldd	r31, Y+2	; 0x02
    2792:	13 82       	std	Z+3, r1	; 0x03

	//intialize arrow
	drawArrow(pcalculatorData->currPosX,pcalculatorData->currPosX);
    2794:	e9 81       	ldd	r30, Y+1	; 0x01
    2796:	fa 81       	ldd	r31, Y+2	; 0x02
    2798:	80 81       	ld	r24, Z
    279a:	e9 81       	ldd	r30, Y+1	; 0x01
    279c:	fa 81       	ldd	r31, Y+2	; 0x02
    279e:	90 81       	ld	r25, Z
    27a0:	69 2f       	mov	r22, r25
    27a2:	0e 94 29 11 	call	0x2252	; 0x2252 <drawArrow>
}
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	cf 91       	pop	r28
    27ac:	df 91       	pop	r29
    27ae:	08 95       	ret

000027b0 <main>:
#include "BUTTON.h"
#include "calculator.h"


void main(void)
{
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <main+0x6>
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <main+0x8>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <main+0xa>
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
	LCD_voidConfiguration();
    27be:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <LCD_voidConfiguration>
	LCD_voidLCDInit();
    27c2:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_voidLCDInit>
	//LCD_voidSendSpecialCharacter(Pattern1,1,14,0);
	//LCD_voidSendSpecialCharacter(Pattern2,2,13,0);
	//LCD_voidSendSpecialCharacter(Pattern3,3,12,0);


	struct BUTTON_OBJ BUTTON_structButtons[3] = {};
    27c6:	86 e0       	ldi	r24, 0x06	; 6
    27c8:	fe 01       	movw	r30, r28
    27ca:	31 96       	adiw	r30, 0x01	; 1
    27cc:	df 01       	movw	r26, r30
    27ce:	98 2f       	mov	r25, r24
    27d0:	1d 92       	st	X+, r1
    27d2:	9a 95       	dec	r25
    27d4:	e9 f7       	brne	.-6      	; 0x27d0 <main+0x20>
	BUTTON_voidButtonConfig(BUTTON_structButtons);
    27d6:	ce 01       	movw	r24, r28
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	0e 94 4f 06 	call	0xc9e	; 0xc9e <BUTTON_voidButtonConfig>
	Calculator_voidConfig(&calculatorData);
    27de:	82 e7       	ldi	r24, 0x72	; 114
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 b7 13 	call	0x276e	; 0x276e <Calculator_voidConfig>

	while(1)
	{

		BUTTON_voidPolling(BUTTON_structButtons);
    27e6:	ce 01       	movw	r24, r28
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	0e 94 9b 06 	call	0xd36	; 0xd36 <BUTTON_voidPolling>
    27ee:	fb cf       	rjmp	.-10     	; 0x27e6 <main+0x36>

000027f0 <__mulsi3>:
    27f0:	62 9f       	mul	r22, r18
    27f2:	d0 01       	movw	r26, r0
    27f4:	73 9f       	mul	r23, r19
    27f6:	f0 01       	movw	r30, r0
    27f8:	82 9f       	mul	r24, r18
    27fa:	e0 0d       	add	r30, r0
    27fc:	f1 1d       	adc	r31, r1
    27fe:	64 9f       	mul	r22, r20
    2800:	e0 0d       	add	r30, r0
    2802:	f1 1d       	adc	r31, r1
    2804:	92 9f       	mul	r25, r18
    2806:	f0 0d       	add	r31, r0
    2808:	83 9f       	mul	r24, r19
    280a:	f0 0d       	add	r31, r0
    280c:	74 9f       	mul	r23, r20
    280e:	f0 0d       	add	r31, r0
    2810:	65 9f       	mul	r22, r21
    2812:	f0 0d       	add	r31, r0
    2814:	99 27       	eor	r25, r25
    2816:	72 9f       	mul	r23, r18
    2818:	b0 0d       	add	r27, r0
    281a:	e1 1d       	adc	r30, r1
    281c:	f9 1f       	adc	r31, r25
    281e:	63 9f       	mul	r22, r19
    2820:	b0 0d       	add	r27, r0
    2822:	e1 1d       	adc	r30, r1
    2824:	f9 1f       	adc	r31, r25
    2826:	bd 01       	movw	r22, r26
    2828:	cf 01       	movw	r24, r30
    282a:	11 24       	eor	r1, r1
    282c:	08 95       	ret

0000282e <__udivmodqi4>:
    282e:	99 1b       	sub	r25, r25
    2830:	79 e0       	ldi	r23, 0x09	; 9
    2832:	04 c0       	rjmp	.+8      	; 0x283c <__udivmodqi4_ep>

00002834 <__udivmodqi4_loop>:
    2834:	99 1f       	adc	r25, r25
    2836:	96 17       	cp	r25, r22
    2838:	08 f0       	brcs	.+2      	; 0x283c <__udivmodqi4_ep>
    283a:	96 1b       	sub	r25, r22

0000283c <__udivmodqi4_ep>:
    283c:	88 1f       	adc	r24, r24
    283e:	7a 95       	dec	r23
    2840:	c9 f7       	brne	.-14     	; 0x2834 <__udivmodqi4_loop>
    2842:	80 95       	com	r24
    2844:	08 95       	ret

00002846 <__divmodqi4>:
    2846:	87 fb       	bst	r24, 7
    2848:	08 2e       	mov	r0, r24
    284a:	06 26       	eor	r0, r22
    284c:	87 fd       	sbrc	r24, 7
    284e:	81 95       	neg	r24
    2850:	67 fd       	sbrc	r22, 7
    2852:	61 95       	neg	r22
    2854:	ec df       	rcall	.-40     	; 0x282e <__udivmodqi4>
    2856:	0e f4       	brtc	.+2      	; 0x285a <__divmodqi4_1>
    2858:	91 95       	neg	r25

0000285a <__divmodqi4_1>:
    285a:	07 fc       	sbrc	r0, 7
    285c:	81 95       	neg	r24

0000285e <__divmodqi4_exit>:
    285e:	08 95       	ret

00002860 <__divmodhi4>:
    2860:	97 fb       	bst	r25, 7
    2862:	09 2e       	mov	r0, r25
    2864:	07 26       	eor	r0, r23
    2866:	0a d0       	rcall	.+20     	; 0x287c <__divmodhi4_neg1>
    2868:	77 fd       	sbrc	r23, 7
    286a:	04 d0       	rcall	.+8      	; 0x2874 <__divmodhi4_neg2>
    286c:	2e d0       	rcall	.+92     	; 0x28ca <__udivmodhi4>
    286e:	06 d0       	rcall	.+12     	; 0x287c <__divmodhi4_neg1>
    2870:	00 20       	and	r0, r0
    2872:	1a f4       	brpl	.+6      	; 0x287a <__divmodhi4_exit>

00002874 <__divmodhi4_neg2>:
    2874:	70 95       	com	r23
    2876:	61 95       	neg	r22
    2878:	7f 4f       	sbci	r23, 0xFF	; 255

0000287a <__divmodhi4_exit>:
    287a:	08 95       	ret

0000287c <__divmodhi4_neg1>:
    287c:	f6 f7       	brtc	.-4      	; 0x287a <__divmodhi4_exit>
    287e:	90 95       	com	r25
    2880:	81 95       	neg	r24
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	08 95       	ret

00002886 <__udivmodsi4>:
    2886:	a1 e2       	ldi	r26, 0x21	; 33
    2888:	1a 2e       	mov	r1, r26
    288a:	aa 1b       	sub	r26, r26
    288c:	bb 1b       	sub	r27, r27
    288e:	fd 01       	movw	r30, r26
    2890:	0d c0       	rjmp	.+26     	; 0x28ac <__udivmodsi4_ep>

00002892 <__udivmodsi4_loop>:
    2892:	aa 1f       	adc	r26, r26
    2894:	bb 1f       	adc	r27, r27
    2896:	ee 1f       	adc	r30, r30
    2898:	ff 1f       	adc	r31, r31
    289a:	a2 17       	cp	r26, r18
    289c:	b3 07       	cpc	r27, r19
    289e:	e4 07       	cpc	r30, r20
    28a0:	f5 07       	cpc	r31, r21
    28a2:	20 f0       	brcs	.+8      	; 0x28ac <__udivmodsi4_ep>
    28a4:	a2 1b       	sub	r26, r18
    28a6:	b3 0b       	sbc	r27, r19
    28a8:	e4 0b       	sbc	r30, r20
    28aa:	f5 0b       	sbc	r31, r21

000028ac <__udivmodsi4_ep>:
    28ac:	66 1f       	adc	r22, r22
    28ae:	77 1f       	adc	r23, r23
    28b0:	88 1f       	adc	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	1a 94       	dec	r1
    28b6:	69 f7       	brne	.-38     	; 0x2892 <__udivmodsi4_loop>
    28b8:	60 95       	com	r22
    28ba:	70 95       	com	r23
    28bc:	80 95       	com	r24
    28be:	90 95       	com	r25
    28c0:	9b 01       	movw	r18, r22
    28c2:	ac 01       	movw	r20, r24
    28c4:	bd 01       	movw	r22, r26
    28c6:	cf 01       	movw	r24, r30
    28c8:	08 95       	ret

000028ca <__udivmodhi4>:
    28ca:	aa 1b       	sub	r26, r26
    28cc:	bb 1b       	sub	r27, r27
    28ce:	51 e1       	ldi	r21, 0x11	; 17
    28d0:	07 c0       	rjmp	.+14     	; 0x28e0 <__udivmodhi4_ep>

000028d2 <__udivmodhi4_loop>:
    28d2:	aa 1f       	adc	r26, r26
    28d4:	bb 1f       	adc	r27, r27
    28d6:	a6 17       	cp	r26, r22
    28d8:	b7 07       	cpc	r27, r23
    28da:	10 f0       	brcs	.+4      	; 0x28e0 <__udivmodhi4_ep>
    28dc:	a6 1b       	sub	r26, r22
    28de:	b7 0b       	sbc	r27, r23

000028e0 <__udivmodhi4_ep>:
    28e0:	88 1f       	adc	r24, r24
    28e2:	99 1f       	adc	r25, r25
    28e4:	5a 95       	dec	r21
    28e6:	a9 f7       	brne	.-22     	; 0x28d2 <__udivmodhi4_loop>
    28e8:	80 95       	com	r24
    28ea:	90 95       	com	r25
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	08 95       	ret

000028f2 <__prologue_saves__>:
    28f2:	2f 92       	push	r2
    28f4:	3f 92       	push	r3
    28f6:	4f 92       	push	r4
    28f8:	5f 92       	push	r5
    28fa:	6f 92       	push	r6
    28fc:	7f 92       	push	r7
    28fe:	8f 92       	push	r8
    2900:	9f 92       	push	r9
    2902:	af 92       	push	r10
    2904:	bf 92       	push	r11
    2906:	cf 92       	push	r12
    2908:	df 92       	push	r13
    290a:	ef 92       	push	r14
    290c:	ff 92       	push	r15
    290e:	0f 93       	push	r16
    2910:	1f 93       	push	r17
    2912:	cf 93       	push	r28
    2914:	df 93       	push	r29
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	ca 1b       	sub	r28, r26
    291c:	db 0b       	sbc	r29, r27
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	09 94       	ijmp

0000292a <__epilogue_restores__>:
    292a:	2a 88       	ldd	r2, Y+18	; 0x12
    292c:	39 88       	ldd	r3, Y+17	; 0x11
    292e:	48 88       	ldd	r4, Y+16	; 0x10
    2930:	5f 84       	ldd	r5, Y+15	; 0x0f
    2932:	6e 84       	ldd	r6, Y+14	; 0x0e
    2934:	7d 84       	ldd	r7, Y+13	; 0x0d
    2936:	8c 84       	ldd	r8, Y+12	; 0x0c
    2938:	9b 84       	ldd	r9, Y+11	; 0x0b
    293a:	aa 84       	ldd	r10, Y+10	; 0x0a
    293c:	b9 84       	ldd	r11, Y+9	; 0x09
    293e:	c8 84       	ldd	r12, Y+8	; 0x08
    2940:	df 80       	ldd	r13, Y+7	; 0x07
    2942:	ee 80       	ldd	r14, Y+6	; 0x06
    2944:	fd 80       	ldd	r15, Y+5	; 0x05
    2946:	0c 81       	ldd	r16, Y+4	; 0x04
    2948:	1b 81       	ldd	r17, Y+3	; 0x03
    294a:	aa 81       	ldd	r26, Y+2	; 0x02
    294c:	b9 81       	ldd	r27, Y+1	; 0x01
    294e:	ce 0f       	add	r28, r30
    2950:	d1 1d       	adc	r29, r1
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	ed 01       	movw	r28, r26
    295e:	08 95       	ret

00002960 <_exit>:
    2960:	f8 94       	cli

00002962 <__stop_program>:
    2962:	ff cf       	rjmp	.-2      	; 0x2962 <__stop_program>
